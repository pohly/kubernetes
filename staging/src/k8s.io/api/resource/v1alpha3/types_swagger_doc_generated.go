/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha3

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-codegen.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_AllocationConfiguration = map[string]string{
	"":             "AllocationConfiguration gets embedded in an AllocationResult.",
	"admin":        "Admins is true if the source of the configuration was a class and thus not something that a normal user would have been able to set.",
	"requestNames": "The configuration applies to devices in these requests.\n\nIf empty, the configuration applies to all devices in the claim.",
}

func (AllocationConfiguration) SwaggerDoc() map[string]string {
	return map_AllocationConfiguration
}

var map_AllocationResult = map[string]string{
	"":                 "AllocationResult contains attributes of an allocated resource.",
	"results":          "Results lists all allocated devices.",
	"config":           "This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.\n\nThis includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.",
	"availableOnNodes": "Setting this field is optional. If unset, the allocated devices are available everywhere.",
	"controllerName":   "ControllerName is the name of the DRA driver which handled the allocation. That driver is also responsible for deallocating the claim. It is empty when the claim can be deallocated without involving a driver.\n\nA driver may allocate devices provided by other drivers, so this driver name here can be different from the driver names listed for the results.\n\nThis is an alpha field and requires enabling the DRAControlPlaneController feature gate.",
}

func (AllocationResult) SwaggerDoc() map[string]string {
	return map_AllocationResult
}

var map_CELSelector = map[string]string{
	"":           "CELSelector contains a CEL expression for selecting a device.",
	"expression": "This CEL expression must evaluate to true if a device is suitable. This covers qualitative aspects of device selection.\n\nThe language is as defined in https://kubernetes.io/docs/reference/using-api/cel/ with several additions that are specific to device selectors.\n\nAttributes of a device are made available through a nested `device.attributes` map with the domain part of the attribute name as key in the outer map and the identifier as key in the inner map. All identifiers can be used in a field lookup:\n\n   device.attributes[\"dra.example.com\"].driverVersion\n\nThe type of each entry varies, depending on the attribute that is being looked up. The domain lookup returns an empty map if there is no attribute with that domain. However, unknown identifiers then trigger a runtime error.\n\nThe `cel.bind` function is enabled and can be used to simplify expressions that access multiple attributes with the same domain:\n\n   cel.bind(dra, device.attributes[\"dra.example.com\"], dra.someBool && dra.anotherBool)\n\nCapacities associated with a device are made available through a nested `device.capacities` map the same way as attributes.\n\nThe `device.driverName` string variable can be used to check for a specific driver explicitly in a filter that is meant to work for devices from different vendors. It is provided by Kubernetes and matches the `driverName` from the ResourceSlice which provides the device.\n\nThe CEL expression is applied to *all* available devices from any driver. The expression has to check for existence of an attribute when it is not certain that it is provided because runtime errors are not automatically treated as \"don't select device\". Instead, device selection fails completely and reports the error.\n\nSome more examples:\n\n   \"memory\" in device.capacities[\"dra.example.com\"] && # Is the capacity available?\n      device.capacities[\"dra.example.com\"].memory.isGreaterThan(quantity(\"1Gi\")) # >= 1Gi\n\n   device.attributes[\"dra.example.com\"].driverVersion.isGreaterThan(semver(\"1.0.0\")) # >= v1.0.0, runtime error if not available\n\n   device.driverName == \"dra.example.com\" # any device from that driver",
}

func (CELSelector) SwaggerDoc() map[string]string {
	return map_CELSelector
}

var map_ClaimConfiguration = map[string]string{
	"":             "ClaimConfiguration is used for configuration parameters in ResourcClaimSpec.",
	"requestNames": "The configuration applies to devices in these requests.\n\nIf empty, the configuration applies to all devices in the claim.",
}

func (ClaimConfiguration) SwaggerDoc() map[string]string {
	return map_ClaimConfiguration
}

var map_ClassConfiguration = map[string]string{
	"": "ClassConfiguration is used in DeviceClass.",
}

func (ClassConfiguration) SwaggerDoc() map[string]string {
	return map_ClassConfiguration
}

var map_Configuration = map[string]string{
	"":       "Configuration must have exactly one field set. It gets embedded inline in some other structs which have other fields, so field names must not conflict with those.",
	"opaque": "Opaque provides driver-specific configuration parameters.",
}

func (Configuration) SwaggerDoc() map[string]string {
	return map_Configuration
}

var map_Constraint = map[string]string{
	"":               "Besides the request name slice, constraint must have exactly one field set.",
	"requestNames":   "The constraint applies to devices in these requests. A single entry is okay and used when that request is for multiple devices.\n\nIf empty, the constrain applies to all devices in the claim.",
	"matchAttribute": "The devices must have this attribute and its value must be the same.\n\nFor example, if you specified \"dra.example.com/numa\" (a hypothetical example!), then only devices in the same NUMA node will be chosen.",
}

func (Constraint) SwaggerDoc() map[string]string {
	return map_Constraint
}

var map_Device = map[string]string{
	"":           "Device represents one individual hardware instance that can be selected based on its attributes.",
	"name":       "Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.",
	"attributes": "Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities is 32.",
	"capacities": "Capacities defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities is 32.",
}

func (Device) SwaggerDoc() map[string]string {
	return map_Device
}

var map_DeviceAttribute = map[string]string{
	"":        "DeviceAttribute is a combination of an attribute name and its value. Exactly one value must be set.",
	"name":    "Name is a unique identifier for this attribute, which will be referenced when selecting devices.\n\nAttributes are defined either by the owner of the specific driver (usually the vendor) or by some 3rd party (e.g. the Kubernetes project). Because attributes are sometimes compared across devices, a given name is expected to mean the same thing and have the same type on all devices.\n\nAttribute names must be either a DNS label (e.g. \"theName\") or a DNS subdomain followed by a slash (\"/\") followed by a DNS label (e.g. \"example.com/theName\"). Attributes whose name do not include the domain prefix are assumed to be part of the driver's domain. Attributes defined by 3rd parties must include the domain prefix.\n\nThe maximum length for the DNS subdomain is 63 characters (same as for driver names) and the maximum length of the DNS label identifier is 32.",
	"int":     "IntValue is a number.",
	"bool":    "BoolValue is a true/false value.",
	"string":  "StringValue is a string. Must not be longer than 64 characters.",
	"version": "VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters.",
}

func (DeviceAttribute) SwaggerDoc() map[string]string {
	return map_DeviceAttribute
}

var map_DeviceCapacity = map[string]string{
	"":         "DeviceCapacity is a combination of a capacity name and its value. Exactly one value must be set.",
	"name":     "Name is a unique identifier for this capacity, which will be referenced when selecting devices.\n\nCapacities are defined either by the owner of the specific driver (usually the vendor) or by some 3rd party (e.g. the Kubernetes project). Because capacities are sometimes compared across devices, a given name is expected to mean the same thing and have the same type on all devices.\n\nCapacity names must be either a DNS label (e.g. \"theName\") or a DNS subdomain followed by a slash (\"/\") followed by a DNS label (e.g. \"example.com/theName\"). Capacities whose name do not include the domain prefix are assumed to be part of the driver's domain. Capacities defined by 3rd parties must include the domain prefix.\n\nThe maximum length for the DNS subdomain is 63 characters (same as for driver names) and the maximum length of the DNS label identifier is 32.",
	"quantity": "Quantity determines the size of the capacity.",
}

func (DeviceCapacity) SwaggerDoc() map[string]string {
	return map_DeviceCapacity
}

var map_DeviceClass = map[string]string{
	"":         "DeviceClass is a vendor or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.",
	"metadata": "Standard object metadata",
	"spec":     "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec bumps up the generation number.",
}

func (DeviceClass) SwaggerDoc() map[string]string {
	return map_DeviceClass
}

var map_DeviceClassList = map[string]string{
	"":         "DeviceClassList is a collection of classes.",
	"metadata": "Standard list metadata",
	"items":    "Items is the list of resource classes.",
}

func (DeviceClassList) SwaggerDoc() map[string]string {
	return map_DeviceClassList
}

var map_DeviceClassSpec = map[string]string{
	"selectors":     "Each selector must be satisfied by a device which is claimed via this class.",
	"config":        "Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.\n\nThey are passed to the driver, but are not considered while allocating the claim.",
	"suitableNodes": "Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod when that Pod uses a claim that has not been allocated yet *and* that claim gets allocated through a control plane controller. It is ignored when the claim does not use a control plane controller for allocation.\n\nSetting this field is optional. If unset, all Nodes are candidates.\n\nThis is an alpha field and requires enabling the DRAControlPlaneController feature gate.",
}

func (DeviceClassSpec) SwaggerDoc() map[string]string {
	return map_DeviceClassSpec
}

var map_DeviceRequest = map[string]string{
	"":                "DeviceRequest is currently the only permitted alternative in RequestDetail.",
	"deviceClassName": "By referencing a DeviceClass, a request inherits additional configuration parameters and selectors.\n\nA class is required. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then an empty class called \"none\" can get created to permit `deviceClassName: none`.",
	"selectors":       "Each selector must be satisfied by a device which is requested.",
	"countMode":       "The count mode together with, for some modes, additional fields determines how many devices to allocate for the request.\n\nThe default if unset is exactly one device:\n    countMode: Exact\n    count: 1\n\n\"countMode: All\" asks for all devices matching the selectors. Allocation fails if not all of them are available, unless admin access is requested. Admin access is granted also for devices which are in use.\n\nMore modes may get added in the future.",
	"count":           "Count is used only when the count mode is \"Exact\". Must be larger than zero.",
	"adminAccess":     "AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations. Ability to request this kind of access is controlled via ResourceQuota in the resource.k8s.io API.\n\nDefault is false.",
}

func (DeviceRequest) SwaggerDoc() map[string]string {
	return map_DeviceRequest
}

var map_OpaqueConfiguration = map[string]string{
	"":           "OpaqueConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.",
	"driverName": "DriverName is used to determine which kubelet plugin needs to be passed these configuration parameters.\n\nAn admission webhook provided by the driver developer could use this to decide whether it needs to validate them.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.",
	"parameters": "Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (\"kind\" + \"apiVersion\" for Kubernetes types), with conversion between different versions.",
}

func (OpaqueConfiguration) SwaggerDoc() map[string]string {
	return map_OpaqueConfiguration
}

var map_PodSchedulingContext = map[string]string{
	"":         "PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use \"WaitForFirstConsumer\" allocation mode.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.",
	"metadata": "Standard object metadata",
	"spec":     "Spec describes where resources for the Pod are needed.",
	"status":   "Status describes where resources for the Pod can be allocated.",
}

func (PodSchedulingContext) SwaggerDoc() map[string]string {
	return map_PodSchedulingContext
}

var map_PodSchedulingContextList = map[string]string{
	"":         "PodSchedulingContextList is a collection of Pod scheduling objects.",
	"metadata": "Standard list metadata",
	"items":    "Items is the list of PodSchedulingContext objects.",
}

func (PodSchedulingContextList) SwaggerDoc() map[string]string {
	return map_PodSchedulingContextList
}

var map_PodSchedulingContextSpec = map[string]string{
	"":               "PodSchedulingContextSpec describes where resources for the Pod are needed.",
	"selectedNode":   "SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use \"WaitForFirstConsumer\" allocation is to be attempted.",
	"potentialNodes": "PotentialNodes lists nodes where the Pod might be able to run.\n\nThe size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.",
}

func (PodSchedulingContextSpec) SwaggerDoc() map[string]string {
	return map_PodSchedulingContextSpec
}

var map_PodSchedulingContextStatus = map[string]string{
	"":               "PodSchedulingContextStatus describes where resources for the Pod can be allocated.",
	"resourceClaims": "ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses \"WaitForFirstConsumer\" allocation mode.",
}

func (PodSchedulingContextStatus) SwaggerDoc() map[string]string {
	return map_PodSchedulingContextStatus
}

var map_Request = map[string]string{
	"":     "Request is a request for one of many resources required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices. It might get extended to support asking for one of several different alternatives.",
	"name": "The name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.\n\nMust be a DNS label.",
}

func (Request) SwaggerDoc() map[string]string {
	return map_Request
}

var map_RequestAllocationResult = map[string]string{
	"":            "RequestAllocationResult contains the allocation result for one request.",
	"requestName": "RequestName identifies the request in the claim which caused this device to be allocated. Multiple devices may have been allocated per request.",
	"driverName":  "DriverName specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.",
	"poolName":    "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.",
	"deviceName":  "DeviceName references one device instance via its name in the driver's resource pool. It must be a DNS label.",
}

func (RequestAllocationResult) SwaggerDoc() map[string]string {
	return map_RequestAllocationResult
}

var map_RequestDetail = map[string]string{
	"":       "RequestDetail is embedded inside Request. Exactly one field must be set.",
	"device": "Device requests one or more devices.",
}

func (RequestDetail) SwaggerDoc() map[string]string {
	return map_RequestDetail
}

var map_ResourceClaim = map[string]string{
	"":         "ResourceClaim describes which resources (typically one or more devices) are needed by a claim consumer. Its status tracks whether the claim has been allocated and what the resulting attributes are.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.",
	"metadata": "Standard object metadata",
	"spec":     "Spec defines what to allocated and how to configure it. The spec is immutable.",
	"status":   "Status describes whether the claim is ready for use.",
}

func (ResourceClaim) SwaggerDoc() map[string]string {
	return map_ResourceClaim
}

var map_ResourceClaimConsumerReference = map[string]string{
	"":         "ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.",
	"apiGroup": "APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.",
	"resource": "Resource is the type of resource being referenced, for example \"pods\".",
	"name":     "Name is the name of resource being referenced.",
	"uid":      "UID identifies exactly one incarnation of the resource.",
}

func (ResourceClaimConsumerReference) SwaggerDoc() map[string]string {
	return map_ResourceClaimConsumerReference
}

var map_ResourceClaimList = map[string]string{
	"":         "ResourceClaimList is a collection of claims.",
	"metadata": "Standard list metadata",
	"items":    "Items is the list of resource claims.",
}

func (ResourceClaimList) SwaggerDoc() map[string]string {
	return map_ResourceClaimList
}

var map_ResourceClaimSchedulingStatus = map[string]string{
	"":                "ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with \"WaitForFirstConsumer\" allocation mode.",
	"name":            "Name matches the pod.spec.resourceClaims[*].Name field.",
	"unsuitableNodes": "UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.\n\nThe size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.",
}

func (ResourceClaimSchedulingStatus) SwaggerDoc() map[string]string {
	return map_ResourceClaimSchedulingStatus
}

var map_ResourceClaimSpec = map[string]string{
	"":               "ResourceClaimSpec defines how a resource is to be allocated.",
	"requests":       "Requests are individual requests for separate resources for the claim. An empty list is valid and means that the claim can always be allocated without needing anything. A class can be referenced to use the default requests from that class.",
	"constraints":    "These constraints must be satisfied by the set of devices that get allocated for the claim.",
	"config":         "This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.",
	"controllerName": "ControllerName defines the name of the DRA driver that is meant to handle allocation of this claim. If empty, allocation is handled by the scheduler while scheduling a pod.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.\n\nThis is an alpha field and requires enabling the DRAControlPlaneController feature gate.",
}

func (ResourceClaimSpec) SwaggerDoc() map[string]string {
	return map_ResourceClaimSpec
}

var map_ResourceClaimStatus = map[string]string{
	"":                      "ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.",
	"allocation":            "Allocation is set once the claim has been allocated successfully.",
	"reservedFor":           "ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.\n\nIn a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.\n\nBoth schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.\n\nThere can be at most 32 such reservations. This may get increased in the future, but not reduced.",
	"deallocationRequested": "Indicates that a claim is to be deallocated. While this is set, no new consumers may be added to ReservedFor.\n\nThis is only used if the claim needs to be deallocated by a DRA driver. That driver then must deallocate this claim and reset the field together with clearing the Allocation field.\n\nThis is an alpha field and requires enabling the DRAControlPlaneController feature gate.",
}

func (ResourceClaimStatus) SwaggerDoc() map[string]string {
	return map_ResourceClaimStatus
}

var map_ResourceClaimTemplate = map[string]string{
	"":         "ResourceClaimTemplate is used to produce ResourceClaim objects.",
	"metadata": "Standard object metadata",
	"spec":     "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.",
}

func (ResourceClaimTemplate) SwaggerDoc() map[string]string {
	return map_ResourceClaimTemplate
}

var map_ResourceClaimTemplateList = map[string]string{
	"":         "ResourceClaimTemplateList is a collection of claim templates.",
	"metadata": "Standard list metadata",
	"items":    "Items is the list of resource claim templates.",
}

func (ResourceClaimTemplateList) SwaggerDoc() map[string]string {
	return map_ResourceClaimTemplateList
}

var map_ResourceClaimTemplateSpec = map[string]string{
	"":         "ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.",
	"metadata": "ObjectMeta may contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.",
	"spec":     "Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.",
}

func (ResourceClaimTemplateSpec) SwaggerDoc() map[string]string {
	return map_ResourceClaimTemplateSpec
}

var map_ResourceSlice = map[string]string{
	"":         "One or more slices represent a pool of devices managed by a given driver. How many slices the driver uses to publish that pool is driver-specific. Each device in a given pool must have a unique name.\n\nThe slice in which a device gets published may change over time. The unique identifier for a device is the tuple `<driver name>/<pool name>/<device name>`. Driver name and device name don't contain slashes, so it is okay to concatenate them like this in a string with a slash as separator. The pool name itself may contain additional slashes.\n\nWhenever a driver needs to update a pool, it bumps the pool generation number and updates all slices with that new number and any new device definitions. A consumer must only use device definitions from slices with the highest generation number and ignore all others.\n\nIf necessary, a consumer can check the number of total devices in a pool (included in each slice) to determine whether its view of a pool is complete.\n\nFor devices that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.",
	"metadata": "Standard object metadata",
	"spec":     "Contains the information published by the driver.\n\nChanging the spec bumps up the generation number.",
}

func (ResourceSlice) SwaggerDoc() map[string]string {
	return map_ResourceSlice
}

var map_ResourceSliceList = map[string]string{
	"":         "ResourceSliceList is a collection of slices.",
	"listMeta": "Standard list metadata",
	"items":    "Items is the list of resource slices.",
}

func (ResourceSliceList) SwaggerDoc() map[string]string {
	return map_ResourceSliceList
}

var map_ResourceSliceSpec = map[string]string{
	"":               "ResourceSliceSpec contains the information published by the driver in one ResourceSlice.",
	"driverName":     "DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.",
	"poolName":       "PoolName is used to identify devices. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 and must consist of one or more DNS sub-domains separated by slashes.",
	"nodeName":       "NodeName identifies the node which provides the devices. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to slices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new devices available.\n\nNodeName and NodeSelector are mutually exclusive. One of them must be set.",
	"nodeSelector":   "Defines which nodes have access to the devices in the pool. If the node selector is empty, all nodes have access.\n\nNodeName and NodeSelector are mutually exclusive. One of them must be set.",
	"poolGeneration": "The generation gets bumped in all slices of a pool whenever device definitions change. A consumer must only use device definitions from slices with the highest generation number and ignore all others.",
	"poolSliceCount": "The total number of slices in the pool. Consumers can use this to check whether they have seen all slices.",
	"devices":        "Devices lists all available devices in this pool.\n\nMust not have more than 128 entries.",
}

func (ResourceSliceSpec) SwaggerDoc() map[string]string {
	return map_ResourceSliceSpec
}

var map_Selector = map[string]string{
	"":    "Exactly one field must be set.",
	"cel": "CEL contains a CEL expression for selecting a device.",
}

func (Selector) SwaggerDoc() map[string]string {
	return map_Selector
}

// AUTO-GENERATED FUNCTIONS END HERE
