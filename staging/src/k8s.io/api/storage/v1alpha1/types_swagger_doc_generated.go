/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_CSIStoragePool = map[string]string{
	"":         "CSIStoragePool identifies one particular storage pool and stores the corresponding attributes. The spec is read-only.",
	"metadata": "Standard object's metadata. The name has no particular meaning and just has to meet the usual requirements (length, characters, unique). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use sp-<uuid>.\n\nObjects are not namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
}

func (CSIStoragePool) SwaggerDoc() map[string]string {
	return map_CSIStoragePool
}

var map_CSIStoragePoolByClass = map[string]string{
	"":                 "CSIStoragePoolByClass contains information that applies to one storage pool of a CSI driver when using a certain storage class.",
	"storageClassName": "The storage class name matches the name of some actual `StorageClass`, in which case the information applies when using that storage class for a volume. There are also two special names: - <ephemeral> for storage used by ephemeral inline volumes (which\n  don't use a storage class)\n- <fallback> for storage that is the same regardless of the storage class;\n  it is applicable if there is no other, more specific entry",
	"capacity":         "Capacity is the size of the largest volume that currently can be created. This is a best-effort guess and even volumes of that size might not get created successfully.",
}

func (CSIStoragePoolByClass) SwaggerDoc() map[string]string {
	return map_CSIStoragePoolByClass
}

var map_CSIStoragePoolList = map[string]string{
	"":         "CSIStoragePoolList is a collection of CSIStoragePool objects.",
	"metadata": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "Items is the list of CSIStoragePool objects.",
}

func (CSIStoragePoolList) SwaggerDoc() map[string]string {
	return map_CSIStoragePoolList
}

var map_CSIStoragePoolSpec = map[string]string{
	"":           "CSIStoragePoolSpec contains the constant attributes of a CSIStoragePool.",
	"driverName": "The CSI driver that provides access to the storage pool. This must be the string returned by the CSI GetPluginName() call.",
}

func (CSIStoragePoolSpec) SwaggerDoc() map[string]string {
	return map_CSIStoragePoolSpec
}

var map_CSIStoragePoolStatus = map[string]string{
	"":             "CSIStoragePoolStatus contains runtime information about a CSIStoragePool.\n\nA pool might only be accessible from a subset of the nodes in the cluster. That subset can be identified either via NodeTopology or Nodes, but not both. If neither is set, the pool is assumed to be available in the entire cluster.\n\nIt is expected to be extended with other attributes which do not depend on the storage class, like health of the pool. Therefore it has the list of `CSIStoragePoolByClass` instances instead of just the capacity and the storage class being in the spec.",
	"nodeTopology": "NodeTopology can be used to describe a storage pool that is available only for nodes matching certain criteria.",
	"nodes":        "Nodes can be used to describe a storage pool that is available only for certain nodes in the cluster.",
	"classes":      "Some information, like the actual usable capacity, may depend on the storage class used for volumes.",
}

func (CSIStoragePoolStatus) SwaggerDoc() map[string]string {
	return map_CSIStoragePoolStatus
}

var map_VolumeAttachment = map[string]string{
	"":         "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
	"metadata": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
	"status":   "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
}

func (VolumeAttachment) SwaggerDoc() map[string]string {
	return map_VolumeAttachment
}

var map_VolumeAttachmentList = map[string]string{
	"":         "VolumeAttachmentList is a collection of VolumeAttachment objects.",
	"metadata": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "Items is the list of VolumeAttachments",
}

func (VolumeAttachmentList) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentList
}

var map_VolumeAttachmentSource = map[string]string{
	"":                     "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
	"persistentVolumeName": "Name of the persistent volume to attach.",
}

func (VolumeAttachmentSource) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentSource
}

var map_VolumeAttachmentSpec = map[string]string{
	"":         "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
	"attacher": "Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
	"source":   "Source represents the volume that should be attached.",
	"nodeName": "The node that the volume should be attached to.",
}

func (VolumeAttachmentSpec) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentSpec
}

var map_VolumeAttachmentStatus = map[string]string{
	"":                   "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
	"attached":           "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
	"attachmentMetadata": "Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
	"attachError":        "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
	"detachError":        "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
}

func (VolumeAttachmentStatus) SwaggerDoc() map[string]string {
	return map_VolumeAttachmentStatus
}

var map_VolumeError = map[string]string{
	"":        "VolumeError captures an error encountered during a volume operation.",
	"time":    "Time the error was encountered.",
	"message": "String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.",
}

func (VolumeError) SwaggerDoc() map[string]string {
	return map_VolumeError
}

// AUTO-GENERATED FUNCTIONS END HERE
