/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: k8s.io/kubernetes/vendor/k8s.io/client-go/applyconfigurations/core/v1/generated.proto

package v1

import (
	fmt "fmt"
	"errors"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	k8s_io_api_core_v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	k8s_io_apimachinery_pkg_types "k8s.io/apimachinery/pkg/types"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) Reset() {
	*m = AWSElasticBlockStoreVolumeSourceApplyConfiguration{}
}
func (*AWSElasticBlockStoreVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*AWSElasticBlockStoreVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{0}
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSElasticBlockStoreVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSElasticBlockStoreVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AWSElasticBlockStoreVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *AffinityApplyConfiguration) Reset()      { *m = AffinityApplyConfiguration{} }
func (*AffinityApplyConfiguration) ProtoMessage() {}
func (*AffinityApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{1}
}
func (m *AffinityApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffinityApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AffinityApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffinityApplyConfiguration.Merge(m, src)
}
func (m *AffinityApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AffinityApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AffinityApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AffinityApplyConfiguration proto.InternalMessageInfo

func (m *AttachedVolumeApplyConfiguration) Reset()      { *m = AttachedVolumeApplyConfiguration{} }
func (*AttachedVolumeApplyConfiguration) ProtoMessage() {}
func (*AttachedVolumeApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{2}
}
func (m *AttachedVolumeApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttachedVolumeApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AttachedVolumeApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachedVolumeApplyConfiguration.Merge(m, src)
}
func (m *AttachedVolumeApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AttachedVolumeApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachedVolumeApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AttachedVolumeApplyConfiguration proto.InternalMessageInfo

func (m *AzureDiskVolumeSourceApplyConfiguration) Reset() {
	*m = AzureDiskVolumeSourceApplyConfiguration{}
}
func (*AzureDiskVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*AzureDiskVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{3}
}
func (m *AzureDiskVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureDiskVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureDiskVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureDiskVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *AzureDiskVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AzureDiskVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureDiskVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AzureDiskVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *AzureFilePersistentVolumeSourceApplyConfiguration) Reset() {
	*m = AzureFilePersistentVolumeSourceApplyConfiguration{}
}
func (*AzureFilePersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*AzureFilePersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{4}
}
func (m *AzureFilePersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureFilePersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureFilePersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureFilePersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *AzureFilePersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AzureFilePersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureFilePersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AzureFilePersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *AzureFileVolumeSourceApplyConfiguration) Reset() {
	*m = AzureFileVolumeSourceApplyConfiguration{}
}
func (*AzureFileVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*AzureFileVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{5}
}
func (m *AzureFileVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureFileVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureFileVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureFileVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *AzureFileVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AzureFileVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureFileVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AzureFileVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *CSIPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = CSIPersistentVolumeSourceApplyConfiguration{}
}
func (*CSIPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*CSIPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{6}
}
func (m *CSIPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSIPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CSIPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSIPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *CSIPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CSIPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CSIPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CSIPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *CSIVolumeSourceApplyConfiguration) Reset()      { *m = CSIVolumeSourceApplyConfiguration{} }
func (*CSIVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*CSIVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{7}
}
func (m *CSIVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSIVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CSIVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSIVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *CSIVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CSIVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CSIVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CSIVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *CapabilitiesApplyConfiguration) Reset()      { *m = CapabilitiesApplyConfiguration{} }
func (*CapabilitiesApplyConfiguration) ProtoMessage() {}
func (*CapabilitiesApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{8}
}
func (m *CapabilitiesApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapabilitiesApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CapabilitiesApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapabilitiesApplyConfiguration.Merge(m, src)
}
func (m *CapabilitiesApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CapabilitiesApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CapabilitiesApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CapabilitiesApplyConfiguration proto.InternalMessageInfo

func (m *CephFSPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = CephFSPersistentVolumeSourceApplyConfiguration{}
}
func (*CephFSPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*CephFSPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{9}
}
func (m *CephFSPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CephFSPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CephFSPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CephFSPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *CephFSPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CephFSPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CephFSPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CephFSPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *CephFSVolumeSourceApplyConfiguration) Reset()      { *m = CephFSVolumeSourceApplyConfiguration{} }
func (*CephFSVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*CephFSVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{10}
}
func (m *CephFSVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CephFSVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CephFSVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CephFSVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *CephFSVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CephFSVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CephFSVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CephFSVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *CinderPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = CinderPersistentVolumeSourceApplyConfiguration{}
}
func (*CinderPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*CinderPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{11}
}
func (m *CinderPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CinderPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CinderPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CinderPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *CinderPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CinderPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CinderPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CinderPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *CinderVolumeSourceApplyConfiguration) Reset()      { *m = CinderVolumeSourceApplyConfiguration{} }
func (*CinderVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*CinderVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{12}
}
func (m *CinderVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CinderVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CinderVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CinderVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *CinderVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *CinderVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CinderVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CinderVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ClaimSourceApplyConfiguration) Reset()      { *m = ClaimSourceApplyConfiguration{} }
func (*ClaimSourceApplyConfiguration) ProtoMessage() {}
func (*ClaimSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{13}
}
func (m *ClaimSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClaimSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimSourceApplyConfiguration.Merge(m, src)
}
func (m *ClaimSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ClaimSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimSourceApplyConfiguration proto.InternalMessageInfo

func (m *ClientIPConfigApplyConfiguration) Reset()      { *m = ClientIPConfigApplyConfiguration{} }
func (*ClientIPConfigApplyConfiguration) ProtoMessage() {}
func (*ClientIPConfigApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{14}
}
func (m *ClientIPConfigApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientIPConfigApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientIPConfigApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientIPConfigApplyConfiguration.Merge(m, src)
}
func (m *ClientIPConfigApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ClientIPConfigApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientIPConfigApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ClientIPConfigApplyConfiguration proto.InternalMessageInfo

func (m *ComponentConditionApplyConfiguration) Reset()      { *m = ComponentConditionApplyConfiguration{} }
func (*ComponentConditionApplyConfiguration) ProtoMessage() {}
func (*ComponentConditionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{15}
}
func (m *ComponentConditionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentConditionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComponentConditionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentConditionApplyConfiguration.Merge(m, src)
}
func (m *ComponentConditionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ComponentConditionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentConditionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentConditionApplyConfiguration proto.InternalMessageInfo

func (m *ComponentStatusApplyConfiguration) Reset()      { *m = ComponentStatusApplyConfiguration{} }
func (*ComponentStatusApplyConfiguration) ProtoMessage() {}
func (*ComponentStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{16}
}
func (m *ComponentStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComponentStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentStatusApplyConfiguration.Merge(m, src)
}
func (m *ComponentStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ComponentStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentStatusApplyConfiguration proto.InternalMessageInfo

func (m *ConfigMapApplyConfiguration) Reset()      { *m = ConfigMapApplyConfiguration{} }
func (*ConfigMapApplyConfiguration) ProtoMessage() {}
func (*ConfigMapApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{17}
}
func (m *ConfigMapApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigMapApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapApplyConfiguration.Merge(m, src)
}
func (m *ConfigMapApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapApplyConfiguration proto.InternalMessageInfo

func (m *ConfigMapEnvSourceApplyConfiguration) Reset()      { *m = ConfigMapEnvSourceApplyConfiguration{} }
func (*ConfigMapEnvSourceApplyConfiguration) ProtoMessage() {}
func (*ConfigMapEnvSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{18}
}
func (m *ConfigMapEnvSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapEnvSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigMapEnvSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapEnvSourceApplyConfiguration.Merge(m, src)
}
func (m *ConfigMapEnvSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapEnvSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapEnvSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapEnvSourceApplyConfiguration proto.InternalMessageInfo

func (m *ConfigMapKeySelectorApplyConfiguration) Reset() {
	*m = ConfigMapKeySelectorApplyConfiguration{}
}
func (*ConfigMapKeySelectorApplyConfiguration) ProtoMessage() {}
func (*ConfigMapKeySelectorApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{19}
}
func (m *ConfigMapKeySelectorApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapKeySelectorApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigMapKeySelectorApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapKeySelectorApplyConfiguration.Merge(m, src)
}
func (m *ConfigMapKeySelectorApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapKeySelectorApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapKeySelectorApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapKeySelectorApplyConfiguration proto.InternalMessageInfo

func (m *ConfigMapNodeConfigSourceApplyConfiguration) Reset() {
	*m = ConfigMapNodeConfigSourceApplyConfiguration{}
}
func (*ConfigMapNodeConfigSourceApplyConfiguration) ProtoMessage() {}
func (*ConfigMapNodeConfigSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{20}
}
func (m *ConfigMapNodeConfigSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapNodeConfigSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigMapNodeConfigSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapNodeConfigSourceApplyConfiguration.Merge(m, src)
}
func (m *ConfigMapNodeConfigSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapNodeConfigSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapNodeConfigSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapNodeConfigSourceApplyConfiguration proto.InternalMessageInfo

func (m *ConfigMapProjectionApplyConfiguration) Reset()      { *m = ConfigMapProjectionApplyConfiguration{} }
func (*ConfigMapProjectionApplyConfiguration) ProtoMessage() {}
func (*ConfigMapProjectionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{21}
}
func (m *ConfigMapProjectionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapProjectionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigMapProjectionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapProjectionApplyConfiguration.Merge(m, src)
}
func (m *ConfigMapProjectionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapProjectionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapProjectionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapProjectionApplyConfiguration proto.InternalMessageInfo

func (m *ConfigMapVolumeSourceApplyConfiguration) Reset() {
	*m = ConfigMapVolumeSourceApplyConfiguration{}
}
func (*ConfigMapVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*ConfigMapVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{22}
}
func (m *ConfigMapVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigMapVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *ConfigMapVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ContainerApplyConfiguration) Reset()      { *m = ContainerApplyConfiguration{} }
func (*ContainerApplyConfiguration) ProtoMessage() {}
func (*ContainerApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{23}
}
func (m *ContainerApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerApplyConfiguration.Merge(m, src)
}
func (m *ContainerApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerApplyConfiguration proto.InternalMessageInfo

func (m *ContainerImageApplyConfiguration) Reset()      { *m = ContainerImageApplyConfiguration{} }
func (*ContainerImageApplyConfiguration) ProtoMessage() {}
func (*ContainerImageApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{24}
}
func (m *ContainerImageApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerImageApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerImageApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerImageApplyConfiguration.Merge(m, src)
}
func (m *ContainerImageApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerImageApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerImageApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerImageApplyConfiguration proto.InternalMessageInfo

func (m *ContainerPortApplyConfiguration) Reset()      { *m = ContainerPortApplyConfiguration{} }
func (*ContainerPortApplyConfiguration) ProtoMessage() {}
func (*ContainerPortApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{25}
}
func (m *ContainerPortApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerPortApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerPortApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerPortApplyConfiguration.Merge(m, src)
}
func (m *ContainerPortApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerPortApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerPortApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerPortApplyConfiguration proto.InternalMessageInfo

func (m *ContainerResizePolicyApplyConfiguration) Reset() {
	*m = ContainerResizePolicyApplyConfiguration{}
}
func (*ContainerResizePolicyApplyConfiguration) ProtoMessage() {}
func (*ContainerResizePolicyApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{26}
}
func (m *ContainerResizePolicyApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerResizePolicyApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerResizePolicyApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerResizePolicyApplyConfiguration.Merge(m, src)
}
func (m *ContainerResizePolicyApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerResizePolicyApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerResizePolicyApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerResizePolicyApplyConfiguration proto.InternalMessageInfo

func (m *ContainerStateApplyConfiguration) Reset()      { *m = ContainerStateApplyConfiguration{} }
func (*ContainerStateApplyConfiguration) ProtoMessage() {}
func (*ContainerStateApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{27}
}
func (m *ContainerStateApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStateApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerStateApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStateApplyConfiguration.Merge(m, src)
}
func (m *ContainerStateApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStateApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStateApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStateApplyConfiguration proto.InternalMessageInfo

func (m *ContainerStateRunningApplyConfiguration) Reset() {
	*m = ContainerStateRunningApplyConfiguration{}
}
func (*ContainerStateRunningApplyConfiguration) ProtoMessage() {}
func (*ContainerStateRunningApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{28}
}
func (m *ContainerStateRunningApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStateRunningApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerStateRunningApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStateRunningApplyConfiguration.Merge(m, src)
}
func (m *ContainerStateRunningApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStateRunningApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStateRunningApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStateRunningApplyConfiguration proto.InternalMessageInfo

func (m *ContainerStateTerminatedApplyConfiguration) Reset() {
	*m = ContainerStateTerminatedApplyConfiguration{}
}
func (*ContainerStateTerminatedApplyConfiguration) ProtoMessage() {}
func (*ContainerStateTerminatedApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{29}
}
func (m *ContainerStateTerminatedApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStateTerminatedApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerStateTerminatedApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStateTerminatedApplyConfiguration.Merge(m, src)
}
func (m *ContainerStateTerminatedApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStateTerminatedApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStateTerminatedApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStateTerminatedApplyConfiguration proto.InternalMessageInfo

func (m *ContainerStateWaitingApplyConfiguration) Reset() {
	*m = ContainerStateWaitingApplyConfiguration{}
}
func (*ContainerStateWaitingApplyConfiguration) ProtoMessage() {}
func (*ContainerStateWaitingApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{30}
}
func (m *ContainerStateWaitingApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStateWaitingApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerStateWaitingApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStateWaitingApplyConfiguration.Merge(m, src)
}
func (m *ContainerStateWaitingApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStateWaitingApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStateWaitingApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStateWaitingApplyConfiguration proto.InternalMessageInfo

func (m *ContainerStatusApplyConfiguration) Reset()      { *m = ContainerStatusApplyConfiguration{} }
func (*ContainerStatusApplyConfiguration) ProtoMessage() {}
func (*ContainerStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{31}
}
func (m *ContainerStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContainerStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStatusApplyConfiguration.Merge(m, src)
}
func (m *ContainerStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStatusApplyConfiguration proto.InternalMessageInfo

func (m *DaemonEndpointApplyConfiguration) Reset()      { *m = DaemonEndpointApplyConfiguration{} }
func (*DaemonEndpointApplyConfiguration) ProtoMessage() {}
func (*DaemonEndpointApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{32}
}
func (m *DaemonEndpointApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaemonEndpointApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DaemonEndpointApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonEndpointApplyConfiguration.Merge(m, src)
}
func (m *DaemonEndpointApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DaemonEndpointApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonEndpointApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonEndpointApplyConfiguration proto.InternalMessageInfo

func (m *DownwardAPIProjectionApplyConfiguration) Reset() {
	*m = DownwardAPIProjectionApplyConfiguration{}
}
func (*DownwardAPIProjectionApplyConfiguration) ProtoMessage() {}
func (*DownwardAPIProjectionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{33}
}
func (m *DownwardAPIProjectionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownwardAPIProjectionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownwardAPIProjectionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownwardAPIProjectionApplyConfiguration.Merge(m, src)
}
func (m *DownwardAPIProjectionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DownwardAPIProjectionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DownwardAPIProjectionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DownwardAPIProjectionApplyConfiguration proto.InternalMessageInfo

func (m *DownwardAPIVolumeFileApplyConfiguration) Reset() {
	*m = DownwardAPIVolumeFileApplyConfiguration{}
}
func (*DownwardAPIVolumeFileApplyConfiguration) ProtoMessage() {}
func (*DownwardAPIVolumeFileApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{34}
}
func (m *DownwardAPIVolumeFileApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownwardAPIVolumeFileApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownwardAPIVolumeFileApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownwardAPIVolumeFileApplyConfiguration.Merge(m, src)
}
func (m *DownwardAPIVolumeFileApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DownwardAPIVolumeFileApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DownwardAPIVolumeFileApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DownwardAPIVolumeFileApplyConfiguration proto.InternalMessageInfo

func (m *DownwardAPIVolumeSourceApplyConfiguration) Reset() {
	*m = DownwardAPIVolumeSourceApplyConfiguration{}
}
func (*DownwardAPIVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*DownwardAPIVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{35}
}
func (m *DownwardAPIVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownwardAPIVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownwardAPIVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownwardAPIVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *DownwardAPIVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DownwardAPIVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DownwardAPIVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DownwardAPIVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *EmptyDirVolumeSourceApplyConfiguration) Reset() {
	*m = EmptyDirVolumeSourceApplyConfiguration{}
}
func (*EmptyDirVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*EmptyDirVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{36}
}
func (m *EmptyDirVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyDirVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EmptyDirVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyDirVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *EmptyDirVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EmptyDirVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyDirVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyDirVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *EndpointAddressApplyConfiguration) Reset()      { *m = EndpointAddressApplyConfiguration{} }
func (*EndpointAddressApplyConfiguration) ProtoMessage() {}
func (*EndpointAddressApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{37}
}
func (m *EndpointAddressApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointAddressApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointAddressApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointAddressApplyConfiguration.Merge(m, src)
}
func (m *EndpointAddressApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EndpointAddressApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointAddressApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointAddressApplyConfiguration proto.InternalMessageInfo

func (m *EndpointPortApplyConfiguration) Reset()      { *m = EndpointPortApplyConfiguration{} }
func (*EndpointPortApplyConfiguration) ProtoMessage() {}
func (*EndpointPortApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{38}
}
func (m *EndpointPortApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointPortApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointPortApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointPortApplyConfiguration.Merge(m, src)
}
func (m *EndpointPortApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EndpointPortApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointPortApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointPortApplyConfiguration proto.InternalMessageInfo

func (m *EndpointSubsetApplyConfiguration) Reset()      { *m = EndpointSubsetApplyConfiguration{} }
func (*EndpointSubsetApplyConfiguration) ProtoMessage() {}
func (*EndpointSubsetApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{39}
}
func (m *EndpointSubsetApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointSubsetApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointSubsetApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointSubsetApplyConfiguration.Merge(m, src)
}
func (m *EndpointSubsetApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EndpointSubsetApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointSubsetApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointSubsetApplyConfiguration proto.InternalMessageInfo

func (m *EndpointsApplyConfiguration) Reset()      { *m = EndpointsApplyConfiguration{} }
func (*EndpointsApplyConfiguration) ProtoMessage() {}
func (*EndpointsApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{40}
}
func (m *EndpointsApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointsApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointsApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointsApplyConfiguration.Merge(m, src)
}
func (m *EndpointsApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EndpointsApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointsApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointsApplyConfiguration proto.InternalMessageInfo

func (m *EnvFromSourceApplyConfiguration) Reset()      { *m = EnvFromSourceApplyConfiguration{} }
func (*EnvFromSourceApplyConfiguration) ProtoMessage() {}
func (*EnvFromSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{41}
}
func (m *EnvFromSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvFromSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnvFromSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvFromSourceApplyConfiguration.Merge(m, src)
}
func (m *EnvFromSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EnvFromSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvFromSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EnvFromSourceApplyConfiguration proto.InternalMessageInfo

func (m *EnvVarApplyConfiguration) Reset()      { *m = EnvVarApplyConfiguration{} }
func (*EnvVarApplyConfiguration) ProtoMessage() {}
func (*EnvVarApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{42}
}
func (m *EnvVarApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvVarApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnvVarApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvVarApplyConfiguration.Merge(m, src)
}
func (m *EnvVarApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EnvVarApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvVarApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EnvVarApplyConfiguration proto.InternalMessageInfo

func (m *EnvVarSourceApplyConfiguration) Reset()      { *m = EnvVarSourceApplyConfiguration{} }
func (*EnvVarSourceApplyConfiguration) ProtoMessage() {}
func (*EnvVarSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{43}
}
func (m *EnvVarSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvVarSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnvVarSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvVarSourceApplyConfiguration.Merge(m, src)
}
func (m *EnvVarSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EnvVarSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvVarSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EnvVarSourceApplyConfiguration proto.InternalMessageInfo

func (m *EphemeralContainerApplyConfiguration) Reset()      { *m = EphemeralContainerApplyConfiguration{} }
func (*EphemeralContainerApplyConfiguration) ProtoMessage() {}
func (*EphemeralContainerApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{44}
}
func (m *EphemeralContainerApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralContainerApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EphemeralContainerApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralContainerApplyConfiguration.Merge(m, src)
}
func (m *EphemeralContainerApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralContainerApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralContainerApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralContainerApplyConfiguration proto.InternalMessageInfo

func (m *EphemeralContainerCommonApplyConfiguration) Reset() {
	*m = EphemeralContainerCommonApplyConfiguration{}
}
func (*EphemeralContainerCommonApplyConfiguration) ProtoMessage() {}
func (*EphemeralContainerCommonApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{45}
}
func (m *EphemeralContainerCommonApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralContainerCommonApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EphemeralContainerCommonApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralContainerCommonApplyConfiguration.Merge(m, src)
}
func (m *EphemeralContainerCommonApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralContainerCommonApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralContainerCommonApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralContainerCommonApplyConfiguration proto.InternalMessageInfo

func (m *EphemeralVolumeSourceApplyConfiguration) Reset() {
	*m = EphemeralVolumeSourceApplyConfiguration{}
}
func (*EphemeralVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*EphemeralVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{46}
}
func (m *EphemeralVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EphemeralVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *EphemeralVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *EventApplyConfiguration) Reset()      { *m = EventApplyConfiguration{} }
func (*EventApplyConfiguration) ProtoMessage() {}
func (*EventApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{47}
}
func (m *EventApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventApplyConfiguration.Merge(m, src)
}
func (m *EventApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EventApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EventApplyConfiguration proto.InternalMessageInfo

func (m *EventSeriesApplyConfiguration) Reset()      { *m = EventSeriesApplyConfiguration{} }
func (*EventSeriesApplyConfiguration) ProtoMessage() {}
func (*EventSeriesApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{48}
}
func (m *EventSeriesApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSeriesApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventSeriesApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSeriesApplyConfiguration.Merge(m, src)
}
func (m *EventSeriesApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EventSeriesApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSeriesApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EventSeriesApplyConfiguration proto.InternalMessageInfo

func (m *EventSourceApplyConfiguration) Reset()      { *m = EventSourceApplyConfiguration{} }
func (*EventSourceApplyConfiguration) ProtoMessage() {}
func (*EventSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{49}
}
func (m *EventSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSourceApplyConfiguration.Merge(m, src)
}
func (m *EventSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EventSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EventSourceApplyConfiguration proto.InternalMessageInfo

func (m *ExecActionApplyConfiguration) Reset()      { *m = ExecActionApplyConfiguration{} }
func (*ExecActionApplyConfiguration) ProtoMessage() {}
func (*ExecActionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{50}
}
func (m *ExecActionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecActionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExecActionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecActionApplyConfiguration.Merge(m, src)
}
func (m *ExecActionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ExecActionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecActionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ExecActionApplyConfiguration proto.InternalMessageInfo

func (m *FCVolumeSourceApplyConfiguration) Reset()      { *m = FCVolumeSourceApplyConfiguration{} }
func (*FCVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*FCVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{51}
}
func (m *FCVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FCVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FCVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FCVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *FCVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FCVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FCVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FCVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *FlexPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = FlexPersistentVolumeSourceApplyConfiguration{}
}
func (*FlexPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*FlexPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{52}
}
func (m *FlexPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlexPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlexPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *FlexPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FlexPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FlexPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *FlexVolumeSourceApplyConfiguration) Reset()      { *m = FlexVolumeSourceApplyConfiguration{} }
func (*FlexVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*FlexVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{53}
}
func (m *FlexVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlexVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlexVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *FlexVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FlexVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FlexVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *FlockerVolumeSourceApplyConfiguration) Reset()      { *m = FlockerVolumeSourceApplyConfiguration{} }
func (*FlockerVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*FlockerVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{54}
}
func (m *FlockerVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlockerVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlockerVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlockerVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *FlockerVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FlockerVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FlockerVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FlockerVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) Reset() {
	*m = GCEPersistentDiskVolumeSourceApplyConfiguration{}
}
func (*GCEPersistentDiskVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*GCEPersistentDiskVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{55}
}
func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCEPersistentDiskVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GCEPersistentDiskVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GCEPersistentDiskVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *GRPCActionApplyConfiguration) Reset()      { *m = GRPCActionApplyConfiguration{} }
func (*GRPCActionApplyConfiguration) ProtoMessage() {}
func (*GRPCActionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{56}
}
func (m *GRPCActionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCActionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GRPCActionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCActionApplyConfiguration.Merge(m, src)
}
func (m *GRPCActionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GRPCActionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCActionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCActionApplyConfiguration proto.InternalMessageInfo

func (m *GitRepoVolumeSourceApplyConfiguration) Reset()      { *m = GitRepoVolumeSourceApplyConfiguration{} }
func (*GitRepoVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*GitRepoVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{57}
}
func (m *GitRepoVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GitRepoVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GitRepoVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitRepoVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *GitRepoVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GitRepoVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GitRepoVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GitRepoVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = GlusterfsPersistentVolumeSourceApplyConfiguration{}
}
func (*GlusterfsPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*GlusterfsPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{58}
}
func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlusterfsPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GlusterfsPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GlusterfsPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *GlusterfsVolumeSourceApplyConfiguration) Reset() {
	*m = GlusterfsVolumeSourceApplyConfiguration{}
}
func (*GlusterfsVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*GlusterfsVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{59}
}
func (m *GlusterfsVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlusterfsVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlusterfsVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlusterfsVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *GlusterfsVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GlusterfsVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GlusterfsVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GlusterfsVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *HTTPGetActionApplyConfiguration) Reset()      { *m = HTTPGetActionApplyConfiguration{} }
func (*HTTPGetActionApplyConfiguration) ProtoMessage() {}
func (*HTTPGetActionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{60}
}
func (m *HTTPGetActionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPGetActionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPGetActionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPGetActionApplyConfiguration.Merge(m, src)
}
func (m *HTTPGetActionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *HTTPGetActionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPGetActionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPGetActionApplyConfiguration proto.InternalMessageInfo

func (m *HTTPHeaderApplyConfiguration) Reset()      { *m = HTTPHeaderApplyConfiguration{} }
func (*HTTPHeaderApplyConfiguration) ProtoMessage() {}
func (*HTTPHeaderApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{61}
}
func (m *HTTPHeaderApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPHeaderApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPHeaderApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPHeaderApplyConfiguration.Merge(m, src)
}
func (m *HTTPHeaderApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *HTTPHeaderApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPHeaderApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPHeaderApplyConfiguration proto.InternalMessageInfo

func (m *HostAliasApplyConfiguration) Reset()      { *m = HostAliasApplyConfiguration{} }
func (*HostAliasApplyConfiguration) ProtoMessage() {}
func (*HostAliasApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{62}
}
func (m *HostAliasApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostAliasApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostAliasApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostAliasApplyConfiguration.Merge(m, src)
}
func (m *HostAliasApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *HostAliasApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_HostAliasApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_HostAliasApplyConfiguration proto.InternalMessageInfo

func (m *HostIPApplyConfiguration) Reset()      { *m = HostIPApplyConfiguration{} }
func (*HostIPApplyConfiguration) ProtoMessage() {}
func (*HostIPApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{63}
}
func (m *HostIPApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostIPApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostIPApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostIPApplyConfiguration.Merge(m, src)
}
func (m *HostIPApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *HostIPApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_HostIPApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_HostIPApplyConfiguration proto.InternalMessageInfo

func (m *HostPathVolumeSourceApplyConfiguration) Reset() {
	*m = HostPathVolumeSourceApplyConfiguration{}
}
func (*HostPathVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*HostPathVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{64}
}
func (m *HostPathVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostPathVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostPathVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostPathVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *HostPathVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *HostPathVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_HostPathVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_HostPathVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ISCSIPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = ISCSIPersistentVolumeSourceApplyConfiguration{}
}
func (*ISCSIPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*ISCSIPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{65}
}
func (m *ISCSIPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ISCSIPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ISCSIPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ISCSIPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *ISCSIPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ISCSIPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ISCSIPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ISCSIPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ISCSIVolumeSourceApplyConfiguration) Reset()      { *m = ISCSIVolumeSourceApplyConfiguration{} }
func (*ISCSIVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*ISCSIVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{66}
}
func (m *ISCSIVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ISCSIVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ISCSIVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ISCSIVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *ISCSIVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ISCSIVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ISCSIVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ISCSIVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *KeyToPathApplyConfiguration) Reset()      { *m = KeyToPathApplyConfiguration{} }
func (*KeyToPathApplyConfiguration) ProtoMessage() {}
func (*KeyToPathApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{67}
}
func (m *KeyToPathApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyToPathApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeyToPathApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyToPathApplyConfiguration.Merge(m, src)
}
func (m *KeyToPathApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *KeyToPathApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyToPathApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_KeyToPathApplyConfiguration proto.InternalMessageInfo

func (m *LifecycleApplyConfiguration) Reset()      { *m = LifecycleApplyConfiguration{} }
func (*LifecycleApplyConfiguration) ProtoMessage() {}
func (*LifecycleApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{68}
}
func (m *LifecycleApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LifecycleApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LifecycleApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LifecycleApplyConfiguration.Merge(m, src)
}
func (m *LifecycleApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LifecycleApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LifecycleApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LifecycleApplyConfiguration proto.InternalMessageInfo

func (m *LifecycleHandlerApplyConfiguration) Reset()      { *m = LifecycleHandlerApplyConfiguration{} }
func (*LifecycleHandlerApplyConfiguration) ProtoMessage() {}
func (*LifecycleHandlerApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{69}
}
func (m *LifecycleHandlerApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LifecycleHandlerApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LifecycleHandlerApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LifecycleHandlerApplyConfiguration.Merge(m, src)
}
func (m *LifecycleHandlerApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LifecycleHandlerApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LifecycleHandlerApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LifecycleHandlerApplyConfiguration proto.InternalMessageInfo

func (m *LimitRangeApplyConfiguration) Reset()      { *m = LimitRangeApplyConfiguration{} }
func (*LimitRangeApplyConfiguration) ProtoMessage() {}
func (*LimitRangeApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{70}
}
func (m *LimitRangeApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitRangeApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LimitRangeApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitRangeApplyConfiguration.Merge(m, src)
}
func (m *LimitRangeApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LimitRangeApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitRangeApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LimitRangeApplyConfiguration proto.InternalMessageInfo

func (m *LimitRangeItemApplyConfiguration) Reset()      { *m = LimitRangeItemApplyConfiguration{} }
func (*LimitRangeItemApplyConfiguration) ProtoMessage() {}
func (*LimitRangeItemApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{71}
}
func (m *LimitRangeItemApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitRangeItemApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LimitRangeItemApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitRangeItemApplyConfiguration.Merge(m, src)
}
func (m *LimitRangeItemApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LimitRangeItemApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitRangeItemApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LimitRangeItemApplyConfiguration proto.InternalMessageInfo

func (m *LimitRangeSpecApplyConfiguration) Reset()      { *m = LimitRangeSpecApplyConfiguration{} }
func (*LimitRangeSpecApplyConfiguration) ProtoMessage() {}
func (*LimitRangeSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{72}
}
func (m *LimitRangeSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitRangeSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LimitRangeSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitRangeSpecApplyConfiguration.Merge(m, src)
}
func (m *LimitRangeSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LimitRangeSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitRangeSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LimitRangeSpecApplyConfiguration proto.InternalMessageInfo

func (m *LoadBalancerIngressApplyConfiguration) Reset()      { *m = LoadBalancerIngressApplyConfiguration{} }
func (*LoadBalancerIngressApplyConfiguration) ProtoMessage() {}
func (*LoadBalancerIngressApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{73}
}
func (m *LoadBalancerIngressApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadBalancerIngressApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoadBalancerIngressApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancerIngressApplyConfiguration.Merge(m, src)
}
func (m *LoadBalancerIngressApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LoadBalancerIngressApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancerIngressApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancerIngressApplyConfiguration proto.InternalMessageInfo

func (m *LoadBalancerStatusApplyConfiguration) Reset()      { *m = LoadBalancerStatusApplyConfiguration{} }
func (*LoadBalancerStatusApplyConfiguration) ProtoMessage() {}
func (*LoadBalancerStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{74}
}
func (m *LoadBalancerStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadBalancerStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoadBalancerStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancerStatusApplyConfiguration.Merge(m, src)
}
func (m *LoadBalancerStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LoadBalancerStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancerStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancerStatusApplyConfiguration proto.InternalMessageInfo

func (m *LocalObjectReferenceApplyConfiguration) Reset() {
	*m = LocalObjectReferenceApplyConfiguration{}
}
func (*LocalObjectReferenceApplyConfiguration) ProtoMessage() {}
func (*LocalObjectReferenceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{75}
}
func (m *LocalObjectReferenceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalObjectReferenceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalObjectReferenceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalObjectReferenceApplyConfiguration.Merge(m, src)
}
func (m *LocalObjectReferenceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LocalObjectReferenceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalObjectReferenceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LocalObjectReferenceApplyConfiguration proto.InternalMessageInfo

func (m *LocalVolumeSourceApplyConfiguration) Reset()      { *m = LocalVolumeSourceApplyConfiguration{} }
func (*LocalVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*LocalVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{76}
}
func (m *LocalVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *LocalVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LocalVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LocalVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *NFSVolumeSourceApplyConfiguration) Reset()      { *m = NFSVolumeSourceApplyConfiguration{} }
func (*NFSVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*NFSVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{77}
}
func (m *NFSVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFSVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NFSVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFSVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *NFSVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NFSVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NFSVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NFSVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *NamespaceApplyConfiguration) Reset()      { *m = NamespaceApplyConfiguration{} }
func (*NamespaceApplyConfiguration) ProtoMessage() {}
func (*NamespaceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{78}
}
func (m *NamespaceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NamespaceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceApplyConfiguration.Merge(m, src)
}
func (m *NamespaceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceApplyConfiguration proto.InternalMessageInfo

func (m *NamespaceConditionApplyConfiguration) Reset()      { *m = NamespaceConditionApplyConfiguration{} }
func (*NamespaceConditionApplyConfiguration) ProtoMessage() {}
func (*NamespaceConditionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{79}
}
func (m *NamespaceConditionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceConditionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NamespaceConditionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceConditionApplyConfiguration.Merge(m, src)
}
func (m *NamespaceConditionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceConditionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceConditionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceConditionApplyConfiguration proto.InternalMessageInfo

func (m *NamespaceSpecApplyConfiguration) Reset()      { *m = NamespaceSpecApplyConfiguration{} }
func (*NamespaceSpecApplyConfiguration) ProtoMessage() {}
func (*NamespaceSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{80}
}
func (m *NamespaceSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NamespaceSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceSpecApplyConfiguration.Merge(m, src)
}
func (m *NamespaceSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceSpecApplyConfiguration proto.InternalMessageInfo

func (m *NamespaceStatusApplyConfiguration) Reset()      { *m = NamespaceStatusApplyConfiguration{} }
func (*NamespaceStatusApplyConfiguration) ProtoMessage() {}
func (*NamespaceStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{81}
}
func (m *NamespaceStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NamespaceStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceStatusApplyConfiguration.Merge(m, src)
}
func (m *NamespaceStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceStatusApplyConfiguration proto.InternalMessageInfo

func (m *NodeAddressApplyConfiguration) Reset()      { *m = NodeAddressApplyConfiguration{} }
func (*NodeAddressApplyConfiguration) ProtoMessage() {}
func (*NodeAddressApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{82}
}
func (m *NodeAddressApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeAddressApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeAddressApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAddressApplyConfiguration.Merge(m, src)
}
func (m *NodeAddressApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeAddressApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAddressApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAddressApplyConfiguration proto.InternalMessageInfo

func (m *NodeAffinityApplyConfiguration) Reset()      { *m = NodeAffinityApplyConfiguration{} }
func (*NodeAffinityApplyConfiguration) ProtoMessage() {}
func (*NodeAffinityApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{83}
}
func (m *NodeAffinityApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeAffinityApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeAffinityApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAffinityApplyConfiguration.Merge(m, src)
}
func (m *NodeAffinityApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeAffinityApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAffinityApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAffinityApplyConfiguration proto.InternalMessageInfo

func (m *NodeApplyConfiguration) Reset()      { *m = NodeApplyConfiguration{} }
func (*NodeApplyConfiguration) ProtoMessage() {}
func (*NodeApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{84}
}
func (m *NodeApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeApplyConfiguration.Merge(m, src)
}
func (m *NodeApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeApplyConfiguration proto.InternalMessageInfo

func (m *NodeConditionApplyConfiguration) Reset()      { *m = NodeConditionApplyConfiguration{} }
func (*NodeConditionApplyConfiguration) ProtoMessage() {}
func (*NodeConditionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{85}
}
func (m *NodeConditionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConditionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeConditionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConditionApplyConfiguration.Merge(m, src)
}
func (m *NodeConditionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeConditionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConditionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConditionApplyConfiguration proto.InternalMessageInfo

func (m *NodeConfigSourceApplyConfiguration) Reset()      { *m = NodeConfigSourceApplyConfiguration{} }
func (*NodeConfigSourceApplyConfiguration) ProtoMessage() {}
func (*NodeConfigSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{86}
}
func (m *NodeConfigSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConfigSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeConfigSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConfigSourceApplyConfiguration.Merge(m, src)
}
func (m *NodeConfigSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeConfigSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConfigSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConfigSourceApplyConfiguration proto.InternalMessageInfo

func (m *NodeConfigStatusApplyConfiguration) Reset()      { *m = NodeConfigStatusApplyConfiguration{} }
func (*NodeConfigStatusApplyConfiguration) ProtoMessage() {}
func (*NodeConfigStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{87}
}
func (m *NodeConfigStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConfigStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeConfigStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConfigStatusApplyConfiguration.Merge(m, src)
}
func (m *NodeConfigStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeConfigStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConfigStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConfigStatusApplyConfiguration proto.InternalMessageInfo

func (m *NodeDaemonEndpointsApplyConfiguration) Reset()      { *m = NodeDaemonEndpointsApplyConfiguration{} }
func (*NodeDaemonEndpointsApplyConfiguration) ProtoMessage() {}
func (*NodeDaemonEndpointsApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{88}
}
func (m *NodeDaemonEndpointsApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDaemonEndpointsApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeDaemonEndpointsApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDaemonEndpointsApplyConfiguration.Merge(m, src)
}
func (m *NodeDaemonEndpointsApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeDaemonEndpointsApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDaemonEndpointsApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDaemonEndpointsApplyConfiguration proto.InternalMessageInfo

func (m *NodeSelectorApplyConfiguration) Reset()      { *m = NodeSelectorApplyConfiguration{} }
func (*NodeSelectorApplyConfiguration) ProtoMessage() {}
func (*NodeSelectorApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{89}
}
func (m *NodeSelectorApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSelectorApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSelectorApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSelectorApplyConfiguration.Merge(m, src)
}
func (m *NodeSelectorApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeSelectorApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSelectorApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSelectorApplyConfiguration proto.InternalMessageInfo

func (m *NodeSelectorRequirementApplyConfiguration) Reset() {
	*m = NodeSelectorRequirementApplyConfiguration{}
}
func (*NodeSelectorRequirementApplyConfiguration) ProtoMessage() {}
func (*NodeSelectorRequirementApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{90}
}
func (m *NodeSelectorRequirementApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSelectorRequirementApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSelectorRequirementApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSelectorRequirementApplyConfiguration.Merge(m, src)
}
func (m *NodeSelectorRequirementApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeSelectorRequirementApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSelectorRequirementApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSelectorRequirementApplyConfiguration proto.InternalMessageInfo

func (m *NodeSelectorTermApplyConfiguration) Reset()      { *m = NodeSelectorTermApplyConfiguration{} }
func (*NodeSelectorTermApplyConfiguration) ProtoMessage() {}
func (*NodeSelectorTermApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{91}
}
func (m *NodeSelectorTermApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSelectorTermApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSelectorTermApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSelectorTermApplyConfiguration.Merge(m, src)
}
func (m *NodeSelectorTermApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeSelectorTermApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSelectorTermApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSelectorTermApplyConfiguration proto.InternalMessageInfo

func (m *NodeSpecApplyConfiguration) Reset()      { *m = NodeSpecApplyConfiguration{} }
func (*NodeSpecApplyConfiguration) ProtoMessage() {}
func (*NodeSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{92}
}
func (m *NodeSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSpecApplyConfiguration.Merge(m, src)
}
func (m *NodeSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSpecApplyConfiguration proto.InternalMessageInfo

func (m *NodeStatusApplyConfiguration) Reset()      { *m = NodeStatusApplyConfiguration{} }
func (*NodeStatusApplyConfiguration) ProtoMessage() {}
func (*NodeStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{93}
}
func (m *NodeStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatusApplyConfiguration.Merge(m, src)
}
func (m *NodeStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatusApplyConfiguration proto.InternalMessageInfo

func (m *NodeSystemInfoApplyConfiguration) Reset()      { *m = NodeSystemInfoApplyConfiguration{} }
func (*NodeSystemInfoApplyConfiguration) ProtoMessage() {}
func (*NodeSystemInfoApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{94}
}
func (m *NodeSystemInfoApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSystemInfoApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSystemInfoApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSystemInfoApplyConfiguration.Merge(m, src)
}
func (m *NodeSystemInfoApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NodeSystemInfoApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSystemInfoApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSystemInfoApplyConfiguration proto.InternalMessageInfo

func (m *ObjectFieldSelectorApplyConfiguration) Reset()      { *m = ObjectFieldSelectorApplyConfiguration{} }
func (*ObjectFieldSelectorApplyConfiguration) ProtoMessage() {}
func (*ObjectFieldSelectorApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{95}
}
func (m *ObjectFieldSelectorApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectFieldSelectorApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ObjectFieldSelectorApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectFieldSelectorApplyConfiguration.Merge(m, src)
}
func (m *ObjectFieldSelectorApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ObjectFieldSelectorApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectFieldSelectorApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectFieldSelectorApplyConfiguration proto.InternalMessageInfo

func (m *ObjectReferenceApplyConfiguration) Reset()      { *m = ObjectReferenceApplyConfiguration{} }
func (*ObjectReferenceApplyConfiguration) ProtoMessage() {}
func (*ObjectReferenceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{96}
}
func (m *ObjectReferenceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectReferenceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ObjectReferenceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectReferenceApplyConfiguration.Merge(m, src)
}
func (m *ObjectReferenceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ObjectReferenceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectReferenceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectReferenceApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeApplyConfiguration) Reset()      { *m = PersistentVolumeApplyConfiguration{} }
func (*PersistentVolumeApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{97}
}
func (m *PersistentVolumeApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeClaimApplyConfiguration) Reset() {
	*m = PersistentVolumeClaimApplyConfiguration{}
}
func (*PersistentVolumeClaimApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeClaimApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{98}
}
func (m *PersistentVolumeClaimApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeClaimApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeClaimApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeClaimConditionApplyConfiguration) Reset() {
	*m = PersistentVolumeClaimConditionApplyConfiguration{}
}
func (*PersistentVolumeClaimConditionApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeClaimConditionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{99}
}
func (m *PersistentVolumeClaimConditionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimConditionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeClaimConditionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimConditionApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeClaimConditionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimConditionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimConditionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimConditionApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeClaimSpecApplyConfiguration) Reset() {
	*m = PersistentVolumeClaimSpecApplyConfiguration{}
}
func (*PersistentVolumeClaimSpecApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeClaimSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{100}
}
func (m *PersistentVolumeClaimSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeClaimSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimSpecApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeClaimSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimSpecApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeClaimStatusApplyConfiguration) Reset() {
	*m = PersistentVolumeClaimStatusApplyConfiguration{}
}
func (*PersistentVolumeClaimStatusApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeClaimStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{101}
}
func (m *PersistentVolumeClaimStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeClaimStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimStatusApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeClaimStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimStatusApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeClaimTemplateApplyConfiguration) Reset() {
	*m = PersistentVolumeClaimTemplateApplyConfiguration{}
}
func (*PersistentVolumeClaimTemplateApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeClaimTemplateApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{102}
}
func (m *PersistentVolumeClaimTemplateApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimTemplateApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeClaimTemplateApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimTemplateApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeClaimTemplateApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimTemplateApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimTemplateApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimTemplateApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) Reset() {
	*m = PersistentVolumeClaimVolumeSourceApplyConfiguration{}
}
func (*PersistentVolumeClaimVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeClaimVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{103}
}
func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeSourceApplyConfiguration) Reset() {
	*m = PersistentVolumeSourceApplyConfiguration{}
}
func (*PersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{104}
}
func (m *PersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeSpecApplyConfiguration) Reset() {
	*m = PersistentVolumeSpecApplyConfiguration{}
}
func (*PersistentVolumeSpecApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{105}
}
func (m *PersistentVolumeSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeSpecApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeSpecApplyConfiguration proto.InternalMessageInfo

func (m *PersistentVolumeStatusApplyConfiguration) Reset() {
	*m = PersistentVolumeStatusApplyConfiguration{}
}
func (*PersistentVolumeStatusApplyConfiguration) ProtoMessage() {}
func (*PersistentVolumeStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{106}
}
func (m *PersistentVolumeStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PersistentVolumeStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeStatusApplyConfiguration.Merge(m, src)
}
func (m *PersistentVolumeStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeStatusApplyConfiguration proto.InternalMessageInfo

func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) Reset() {
	*m = PhotonPersistentDiskVolumeSourceApplyConfiguration{}
}
func (*PhotonPersistentDiskVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*PhotonPersistentDiskVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{107}
}
func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotonPersistentDiskVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotonPersistentDiskVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PhotonPersistentDiskVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *PodAffinityApplyConfiguration) Reset()      { *m = PodAffinityApplyConfiguration{} }
func (*PodAffinityApplyConfiguration) ProtoMessage() {}
func (*PodAffinityApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{108}
}
func (m *PodAffinityApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodAffinityApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodAffinityApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodAffinityApplyConfiguration.Merge(m, src)
}
func (m *PodAffinityApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodAffinityApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodAffinityApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodAffinityApplyConfiguration proto.InternalMessageInfo

func (m *PodAffinityTermApplyConfiguration) Reset()      { *m = PodAffinityTermApplyConfiguration{} }
func (*PodAffinityTermApplyConfiguration) ProtoMessage() {}
func (*PodAffinityTermApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{109}
}
func (m *PodAffinityTermApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodAffinityTermApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodAffinityTermApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodAffinityTermApplyConfiguration.Merge(m, src)
}
func (m *PodAffinityTermApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodAffinityTermApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodAffinityTermApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodAffinityTermApplyConfiguration proto.InternalMessageInfo

func (m *PodAntiAffinityApplyConfiguration) Reset()      { *m = PodAntiAffinityApplyConfiguration{} }
func (*PodAntiAffinityApplyConfiguration) ProtoMessage() {}
func (*PodAntiAffinityApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{110}
}
func (m *PodAntiAffinityApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodAntiAffinityApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodAntiAffinityApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodAntiAffinityApplyConfiguration.Merge(m, src)
}
func (m *PodAntiAffinityApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodAntiAffinityApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodAntiAffinityApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodAntiAffinityApplyConfiguration proto.InternalMessageInfo

func (m *PodApplyConfiguration) Reset()      { *m = PodApplyConfiguration{} }
func (*PodApplyConfiguration) ProtoMessage() {}
func (*PodApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{111}
}
func (m *PodApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodApplyConfiguration.Merge(m, src)
}
func (m *PodApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodApplyConfiguration proto.InternalMessageInfo

func (m *PodConditionApplyConfiguration) Reset()      { *m = PodConditionApplyConfiguration{} }
func (*PodConditionApplyConfiguration) ProtoMessage() {}
func (*PodConditionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{112}
}
func (m *PodConditionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodConditionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodConditionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodConditionApplyConfiguration.Merge(m, src)
}
func (m *PodConditionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodConditionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodConditionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodConditionApplyConfiguration proto.InternalMessageInfo

func (m *PodDNSConfigApplyConfiguration) Reset()      { *m = PodDNSConfigApplyConfiguration{} }
func (*PodDNSConfigApplyConfiguration) ProtoMessage() {}
func (*PodDNSConfigApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{113}
}
func (m *PodDNSConfigApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodDNSConfigApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodDNSConfigApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDNSConfigApplyConfiguration.Merge(m, src)
}
func (m *PodDNSConfigApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodDNSConfigApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDNSConfigApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodDNSConfigApplyConfiguration proto.InternalMessageInfo

func (m *PodDNSConfigOptionApplyConfiguration) Reset()      { *m = PodDNSConfigOptionApplyConfiguration{} }
func (*PodDNSConfigOptionApplyConfiguration) ProtoMessage() {}
func (*PodDNSConfigOptionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{114}
}
func (m *PodDNSConfigOptionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodDNSConfigOptionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodDNSConfigOptionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDNSConfigOptionApplyConfiguration.Merge(m, src)
}
func (m *PodDNSConfigOptionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodDNSConfigOptionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDNSConfigOptionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodDNSConfigOptionApplyConfiguration proto.InternalMessageInfo

func (m *PodIPApplyConfiguration) Reset()      { *m = PodIPApplyConfiguration{} }
func (*PodIPApplyConfiguration) ProtoMessage() {}
func (*PodIPApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{115}
}
func (m *PodIPApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodIPApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodIPApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodIPApplyConfiguration.Merge(m, src)
}
func (m *PodIPApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodIPApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodIPApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodIPApplyConfiguration proto.InternalMessageInfo

func (m *PodOSApplyConfiguration) Reset()      { *m = PodOSApplyConfiguration{} }
func (*PodOSApplyConfiguration) ProtoMessage() {}
func (*PodOSApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{116}
}
func (m *PodOSApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodOSApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodOSApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodOSApplyConfiguration.Merge(m, src)
}
func (m *PodOSApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodOSApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodOSApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodOSApplyConfiguration proto.InternalMessageInfo

func (m *PodReadinessGateApplyConfiguration) Reset()      { *m = PodReadinessGateApplyConfiguration{} }
func (*PodReadinessGateApplyConfiguration) ProtoMessage() {}
func (*PodReadinessGateApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{117}
}
func (m *PodReadinessGateApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodReadinessGateApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodReadinessGateApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodReadinessGateApplyConfiguration.Merge(m, src)
}
func (m *PodReadinessGateApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodReadinessGateApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodReadinessGateApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodReadinessGateApplyConfiguration proto.InternalMessageInfo

func (m *PodResourceClaimApplyConfiguration) Reset()      { *m = PodResourceClaimApplyConfiguration{} }
func (*PodResourceClaimApplyConfiguration) ProtoMessage() {}
func (*PodResourceClaimApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{118}
}
func (m *PodResourceClaimApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodResourceClaimApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodResourceClaimApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodResourceClaimApplyConfiguration.Merge(m, src)
}
func (m *PodResourceClaimApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodResourceClaimApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodResourceClaimApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodResourceClaimApplyConfiguration proto.InternalMessageInfo

func (m *PodResourceClaimStatusApplyConfiguration) Reset() {
	*m = PodResourceClaimStatusApplyConfiguration{}
}
func (*PodResourceClaimStatusApplyConfiguration) ProtoMessage() {}
func (*PodResourceClaimStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{119}
}
func (m *PodResourceClaimStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodResourceClaimStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodResourceClaimStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodResourceClaimStatusApplyConfiguration.Merge(m, src)
}
func (m *PodResourceClaimStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodResourceClaimStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodResourceClaimStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodResourceClaimStatusApplyConfiguration proto.InternalMessageInfo

func (m *PodSchedulingGateApplyConfiguration) Reset()      { *m = PodSchedulingGateApplyConfiguration{} }
func (*PodSchedulingGateApplyConfiguration) ProtoMessage() {}
func (*PodSchedulingGateApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{120}
}
func (m *PodSchedulingGateApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodSchedulingGateApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodSchedulingGateApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSchedulingGateApplyConfiguration.Merge(m, src)
}
func (m *PodSchedulingGateApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodSchedulingGateApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSchedulingGateApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodSchedulingGateApplyConfiguration proto.InternalMessageInfo

func (m *PodSecurityContextApplyConfiguration) Reset()      { *m = PodSecurityContextApplyConfiguration{} }
func (*PodSecurityContextApplyConfiguration) ProtoMessage() {}
func (*PodSecurityContextApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{121}
}
func (m *PodSecurityContextApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodSecurityContextApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodSecurityContextApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSecurityContextApplyConfiguration.Merge(m, src)
}
func (m *PodSecurityContextApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodSecurityContextApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSecurityContextApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodSecurityContextApplyConfiguration proto.InternalMessageInfo

func (m *PodSpecApplyConfiguration) Reset()      { *m = PodSpecApplyConfiguration{} }
func (*PodSpecApplyConfiguration) ProtoMessage() {}
func (*PodSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{122}
}
func (m *PodSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSpecApplyConfiguration.Merge(m, src)
}
func (m *PodSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodSpecApplyConfiguration proto.InternalMessageInfo

func (m *PodStatusApplyConfiguration) Reset()      { *m = PodStatusApplyConfiguration{} }
func (*PodStatusApplyConfiguration) ProtoMessage() {}
func (*PodStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{123}
}
func (m *PodStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusApplyConfiguration.Merge(m, src)
}
func (m *PodStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusApplyConfiguration proto.InternalMessageInfo

func (m *PodTemplateApplyConfiguration) Reset()      { *m = PodTemplateApplyConfiguration{} }
func (*PodTemplateApplyConfiguration) ProtoMessage() {}
func (*PodTemplateApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{124}
}
func (m *PodTemplateApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodTemplateApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodTemplateApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodTemplateApplyConfiguration.Merge(m, src)
}
func (m *PodTemplateApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodTemplateApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodTemplateApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodTemplateApplyConfiguration proto.InternalMessageInfo

func (m *PodTemplateSpecApplyConfiguration) Reset()      { *m = PodTemplateSpecApplyConfiguration{} }
func (*PodTemplateSpecApplyConfiguration) ProtoMessage() {}
func (*PodTemplateSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{125}
}
func (m *PodTemplateSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodTemplateSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodTemplateSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodTemplateSpecApplyConfiguration.Merge(m, src)
}
func (m *PodTemplateSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PodTemplateSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PodTemplateSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PodTemplateSpecApplyConfiguration proto.InternalMessageInfo

func (m *PortStatusApplyConfiguration) Reset()      { *m = PortStatusApplyConfiguration{} }
func (*PortStatusApplyConfiguration) ProtoMessage() {}
func (*PortStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{126}
}
func (m *PortStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PortStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortStatusApplyConfiguration.Merge(m, src)
}
func (m *PortStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PortStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PortStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PortStatusApplyConfiguration proto.InternalMessageInfo

func (m *PortworxVolumeSourceApplyConfiguration) Reset() {
	*m = PortworxVolumeSourceApplyConfiguration{}
}
func (*PortworxVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*PortworxVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{127}
}
func (m *PortworxVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortworxVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PortworxVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortworxVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *PortworxVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PortworxVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PortworxVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PortworxVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *PreferredSchedulingTermApplyConfiguration) Reset() {
	*m = PreferredSchedulingTermApplyConfiguration{}
}
func (*PreferredSchedulingTermApplyConfiguration) ProtoMessage() {}
func (*PreferredSchedulingTermApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{128}
}
func (m *PreferredSchedulingTermApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreferredSchedulingTermApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PreferredSchedulingTermApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreferredSchedulingTermApplyConfiguration.Merge(m, src)
}
func (m *PreferredSchedulingTermApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *PreferredSchedulingTermApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PreferredSchedulingTermApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PreferredSchedulingTermApplyConfiguration proto.InternalMessageInfo

func (m *ProbeApplyConfiguration) Reset()      { *m = ProbeApplyConfiguration{} }
func (*ProbeApplyConfiguration) ProtoMessage() {}
func (*ProbeApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{129}
}
func (m *ProbeApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProbeApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeApplyConfiguration.Merge(m, src)
}
func (m *ProbeApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ProbeApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeApplyConfiguration proto.InternalMessageInfo

func (m *ProbeHandlerApplyConfiguration) Reset()      { *m = ProbeHandlerApplyConfiguration{} }
func (*ProbeHandlerApplyConfiguration) ProtoMessage() {}
func (*ProbeHandlerApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{130}
}
func (m *ProbeHandlerApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeHandlerApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProbeHandlerApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeHandlerApplyConfiguration.Merge(m, src)
}
func (m *ProbeHandlerApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ProbeHandlerApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeHandlerApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeHandlerApplyConfiguration proto.InternalMessageInfo

func (m *ProjectedVolumeSourceApplyConfiguration) Reset() {
	*m = ProjectedVolumeSourceApplyConfiguration{}
}
func (*ProjectedVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*ProjectedVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{131}
}
func (m *ProjectedVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectedVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProjectedVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectedVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *ProjectedVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ProjectedVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectedVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectedVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *QuobyteVolumeSourceApplyConfiguration) Reset()      { *m = QuobyteVolumeSourceApplyConfiguration{} }
func (*QuobyteVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*QuobyteVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{132}
}
func (m *QuobyteVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuobyteVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QuobyteVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuobyteVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *QuobyteVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *QuobyteVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_QuobyteVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_QuobyteVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *RBDPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = RBDPersistentVolumeSourceApplyConfiguration{}
}
func (*RBDPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*RBDPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{133}
}
func (m *RBDPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBDPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RBDPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBDPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *RBDPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *RBDPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RBDPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RBDPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *RBDVolumeSourceApplyConfiguration) Reset()      { *m = RBDVolumeSourceApplyConfiguration{} }
func (*RBDVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*RBDVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{134}
}
func (m *RBDVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBDVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RBDVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBDVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *RBDVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *RBDVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RBDVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RBDVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ReplicationControllerApplyConfiguration) Reset() {
	*m = ReplicationControllerApplyConfiguration{}
}
func (*ReplicationControllerApplyConfiguration) ProtoMessage() {}
func (*ReplicationControllerApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{135}
}
func (m *ReplicationControllerApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationControllerApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationControllerApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationControllerApplyConfiguration.Merge(m, src)
}
func (m *ReplicationControllerApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationControllerApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationControllerApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationControllerApplyConfiguration proto.InternalMessageInfo

func (m *ReplicationControllerConditionApplyConfiguration) Reset() {
	*m = ReplicationControllerConditionApplyConfiguration{}
}
func (*ReplicationControllerConditionApplyConfiguration) ProtoMessage() {}
func (*ReplicationControllerConditionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{136}
}
func (m *ReplicationControllerConditionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationControllerConditionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationControllerConditionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationControllerConditionApplyConfiguration.Merge(m, src)
}
func (m *ReplicationControllerConditionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationControllerConditionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationControllerConditionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationControllerConditionApplyConfiguration proto.InternalMessageInfo

func (m *ReplicationControllerSpecApplyConfiguration) Reset() {
	*m = ReplicationControllerSpecApplyConfiguration{}
}
func (*ReplicationControllerSpecApplyConfiguration) ProtoMessage() {}
func (*ReplicationControllerSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{137}
}
func (m *ReplicationControllerSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationControllerSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationControllerSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationControllerSpecApplyConfiguration.Merge(m, src)
}
func (m *ReplicationControllerSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationControllerSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationControllerSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationControllerSpecApplyConfiguration proto.InternalMessageInfo

func (m *ReplicationControllerStatusApplyConfiguration) Reset() {
	*m = ReplicationControllerStatusApplyConfiguration{}
}
func (*ReplicationControllerStatusApplyConfiguration) ProtoMessage() {}
func (*ReplicationControllerStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{138}
}
func (m *ReplicationControllerStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationControllerStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationControllerStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationControllerStatusApplyConfiguration.Merge(m, src)
}
func (m *ReplicationControllerStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationControllerStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationControllerStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationControllerStatusApplyConfiguration proto.InternalMessageInfo

func (m *ResourceClaimApplyConfiguration) Reset()      { *m = ResourceClaimApplyConfiguration{} }
func (*ResourceClaimApplyConfiguration) ProtoMessage() {}
func (*ResourceClaimApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{139}
}
func (m *ResourceClaimApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceClaimApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceClaimApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceClaimApplyConfiguration.Merge(m, src)
}
func (m *ResourceClaimApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ResourceClaimApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceClaimApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceClaimApplyConfiguration proto.InternalMessageInfo

func (m *ResourceFieldSelectorApplyConfiguration) Reset() {
	*m = ResourceFieldSelectorApplyConfiguration{}
}
func (*ResourceFieldSelectorApplyConfiguration) ProtoMessage() {}
func (*ResourceFieldSelectorApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{140}
}
func (m *ResourceFieldSelectorApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceFieldSelectorApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceFieldSelectorApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceFieldSelectorApplyConfiguration.Merge(m, src)
}
func (m *ResourceFieldSelectorApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ResourceFieldSelectorApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceFieldSelectorApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceFieldSelectorApplyConfiguration proto.InternalMessageInfo

func (m *ResourceQuotaApplyConfiguration) Reset()      { *m = ResourceQuotaApplyConfiguration{} }
func (*ResourceQuotaApplyConfiguration) ProtoMessage() {}
func (*ResourceQuotaApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{141}
}
func (m *ResourceQuotaApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceQuotaApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceQuotaApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceQuotaApplyConfiguration.Merge(m, src)
}
func (m *ResourceQuotaApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ResourceQuotaApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceQuotaApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceQuotaApplyConfiguration proto.InternalMessageInfo

func (m *ResourceQuotaSpecApplyConfiguration) Reset()      { *m = ResourceQuotaSpecApplyConfiguration{} }
func (*ResourceQuotaSpecApplyConfiguration) ProtoMessage() {}
func (*ResourceQuotaSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{142}
}
func (m *ResourceQuotaSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceQuotaSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceQuotaSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceQuotaSpecApplyConfiguration.Merge(m, src)
}
func (m *ResourceQuotaSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ResourceQuotaSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceQuotaSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceQuotaSpecApplyConfiguration proto.InternalMessageInfo

func (m *ResourceQuotaStatusApplyConfiguration) Reset()      { *m = ResourceQuotaStatusApplyConfiguration{} }
func (*ResourceQuotaStatusApplyConfiguration) ProtoMessage() {}
func (*ResourceQuotaStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{143}
}
func (m *ResourceQuotaStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceQuotaStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceQuotaStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceQuotaStatusApplyConfiguration.Merge(m, src)
}
func (m *ResourceQuotaStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ResourceQuotaStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceQuotaStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceQuotaStatusApplyConfiguration proto.InternalMessageInfo

func (m *ResourceRequirementsApplyConfiguration) Reset() {
	*m = ResourceRequirementsApplyConfiguration{}
}
func (*ResourceRequirementsApplyConfiguration) ProtoMessage() {}
func (*ResourceRequirementsApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{144}
}
func (m *ResourceRequirementsApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceRequirementsApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceRequirementsApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceRequirementsApplyConfiguration.Merge(m, src)
}
func (m *ResourceRequirementsApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ResourceRequirementsApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceRequirementsApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceRequirementsApplyConfiguration proto.InternalMessageInfo

func (m *SELinuxOptionsApplyConfiguration) Reset()      { *m = SELinuxOptionsApplyConfiguration{} }
func (*SELinuxOptionsApplyConfiguration) ProtoMessage() {}
func (*SELinuxOptionsApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{145}
}
func (m *SELinuxOptionsApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SELinuxOptionsApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SELinuxOptionsApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SELinuxOptionsApplyConfiguration.Merge(m, src)
}
func (m *SELinuxOptionsApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SELinuxOptionsApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SELinuxOptionsApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SELinuxOptionsApplyConfiguration proto.InternalMessageInfo

func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = ScaleIOPersistentVolumeSourceApplyConfiguration{}
}
func (*ScaleIOPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*ScaleIOPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{146}
}
func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleIOPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleIOPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleIOPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ScaleIOVolumeSourceApplyConfiguration) Reset()      { *m = ScaleIOVolumeSourceApplyConfiguration{} }
func (*ScaleIOVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*ScaleIOVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{147}
}
func (m *ScaleIOVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScaleIOVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScaleIOVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleIOVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *ScaleIOVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ScaleIOVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleIOVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleIOVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *ScopeSelectorApplyConfiguration) Reset()      { *m = ScopeSelectorApplyConfiguration{} }
func (*ScopeSelectorApplyConfiguration) ProtoMessage() {}
func (*ScopeSelectorApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{148}
}
func (m *ScopeSelectorApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSelectorApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScopeSelectorApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSelectorApplyConfiguration.Merge(m, src)
}
func (m *ScopeSelectorApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSelectorApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSelectorApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSelectorApplyConfiguration proto.InternalMessageInfo

func (m *ScopedResourceSelectorRequirementApplyConfiguration) Reset() {
	*m = ScopedResourceSelectorRequirementApplyConfiguration{}
}
func (*ScopedResourceSelectorRequirementApplyConfiguration) ProtoMessage() {}
func (*ScopedResourceSelectorRequirementApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{149}
}
func (m *ScopedResourceSelectorRequirementApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopedResourceSelectorRequirementApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScopedResourceSelectorRequirementApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopedResourceSelectorRequirementApplyConfiguration.Merge(m, src)
}
func (m *ScopedResourceSelectorRequirementApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ScopedResourceSelectorRequirementApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopedResourceSelectorRequirementApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ScopedResourceSelectorRequirementApplyConfiguration proto.InternalMessageInfo

func (m *SeccompProfileApplyConfiguration) Reset()      { *m = SeccompProfileApplyConfiguration{} }
func (*SeccompProfileApplyConfiguration) ProtoMessage() {}
func (*SeccompProfileApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{150}
}
func (m *SeccompProfileApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeccompProfileApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SeccompProfileApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeccompProfileApplyConfiguration.Merge(m, src)
}
func (m *SeccompProfileApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SeccompProfileApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SeccompProfileApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SeccompProfileApplyConfiguration proto.InternalMessageInfo

func (m *SecretApplyConfiguration) Reset()      { *m = SecretApplyConfiguration{} }
func (*SecretApplyConfiguration) ProtoMessage() {}
func (*SecretApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{151}
}
func (m *SecretApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretApplyConfiguration.Merge(m, src)
}
func (m *SecretApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecretApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecretApplyConfiguration proto.InternalMessageInfo

func (m *SecretEnvSourceApplyConfiguration) Reset()      { *m = SecretEnvSourceApplyConfiguration{} }
func (*SecretEnvSourceApplyConfiguration) ProtoMessage() {}
func (*SecretEnvSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{152}
}
func (m *SecretEnvSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretEnvSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretEnvSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretEnvSourceApplyConfiguration.Merge(m, src)
}
func (m *SecretEnvSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecretEnvSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretEnvSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecretEnvSourceApplyConfiguration proto.InternalMessageInfo

func (m *SecretKeySelectorApplyConfiguration) Reset()      { *m = SecretKeySelectorApplyConfiguration{} }
func (*SecretKeySelectorApplyConfiguration) ProtoMessage() {}
func (*SecretKeySelectorApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{153}
}
func (m *SecretKeySelectorApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretKeySelectorApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretKeySelectorApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretKeySelectorApplyConfiguration.Merge(m, src)
}
func (m *SecretKeySelectorApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecretKeySelectorApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretKeySelectorApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecretKeySelectorApplyConfiguration proto.InternalMessageInfo

func (m *SecretProjectionApplyConfiguration) Reset()      { *m = SecretProjectionApplyConfiguration{} }
func (*SecretProjectionApplyConfiguration) ProtoMessage() {}
func (*SecretProjectionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{154}
}
func (m *SecretProjectionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretProjectionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretProjectionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretProjectionApplyConfiguration.Merge(m, src)
}
func (m *SecretProjectionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecretProjectionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretProjectionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecretProjectionApplyConfiguration proto.InternalMessageInfo

func (m *SecretReferenceApplyConfiguration) Reset()      { *m = SecretReferenceApplyConfiguration{} }
func (*SecretReferenceApplyConfiguration) ProtoMessage() {}
func (*SecretReferenceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{155}
}
func (m *SecretReferenceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretReferenceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretReferenceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretReferenceApplyConfiguration.Merge(m, src)
}
func (m *SecretReferenceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecretReferenceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretReferenceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecretReferenceApplyConfiguration proto.InternalMessageInfo

func (m *SecretVolumeSourceApplyConfiguration) Reset()      { *m = SecretVolumeSourceApplyConfiguration{} }
func (*SecretVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*SecretVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{156}
}
func (m *SecretVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecretVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *SecretVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecretVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecretVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *SecurityContextApplyConfiguration) Reset()      { *m = SecurityContextApplyConfiguration{} }
func (*SecurityContextApplyConfiguration) ProtoMessage() {}
func (*SecurityContextApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{157}
}
func (m *SecurityContextApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityContextApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecurityContextApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityContextApplyConfiguration.Merge(m, src)
}
func (m *SecurityContextApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SecurityContextApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityContextApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityContextApplyConfiguration proto.InternalMessageInfo

func (m *ServiceAccountApplyConfiguration) Reset()      { *m = ServiceAccountApplyConfiguration{} }
func (*ServiceAccountApplyConfiguration) ProtoMessage() {}
func (*ServiceAccountApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{158}
}
func (m *ServiceAccountApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceAccountApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountApplyConfiguration.Merge(m, src)
}
func (m *ServiceAccountApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountApplyConfiguration proto.InternalMessageInfo

func (m *ServiceAccountTokenProjectionApplyConfiguration) Reset() {
	*m = ServiceAccountTokenProjectionApplyConfiguration{}
}
func (*ServiceAccountTokenProjectionApplyConfiguration) ProtoMessage() {}
func (*ServiceAccountTokenProjectionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{159}
}
func (m *ServiceAccountTokenProjectionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountTokenProjectionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceAccountTokenProjectionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountTokenProjectionApplyConfiguration.Merge(m, src)
}
func (m *ServiceAccountTokenProjectionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountTokenProjectionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountTokenProjectionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountTokenProjectionApplyConfiguration proto.InternalMessageInfo

func (m *ServiceApplyConfiguration) Reset()      { *m = ServiceApplyConfiguration{} }
func (*ServiceApplyConfiguration) ProtoMessage() {}
func (*ServiceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{160}
}
func (m *ServiceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceApplyConfiguration.Merge(m, src)
}
func (m *ServiceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceApplyConfiguration proto.InternalMessageInfo

func (m *ServicePortApplyConfiguration) Reset()      { *m = ServicePortApplyConfiguration{} }
func (*ServicePortApplyConfiguration) ProtoMessage() {}
func (*ServicePortApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{161}
}
func (m *ServicePortApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePortApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServicePortApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePortApplyConfiguration.Merge(m, src)
}
func (m *ServicePortApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ServicePortApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePortApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePortApplyConfiguration proto.InternalMessageInfo

func (m *ServiceSpecApplyConfiguration) Reset()      { *m = ServiceSpecApplyConfiguration{} }
func (*ServiceSpecApplyConfiguration) ProtoMessage() {}
func (*ServiceSpecApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{162}
}
func (m *ServiceSpecApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSpecApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceSpecApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSpecApplyConfiguration.Merge(m, src)
}
func (m *ServiceSpecApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSpecApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSpecApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSpecApplyConfiguration proto.InternalMessageInfo

func (m *ServiceStatusApplyConfiguration) Reset()      { *m = ServiceStatusApplyConfiguration{} }
func (*ServiceStatusApplyConfiguration) ProtoMessage() {}
func (*ServiceStatusApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{163}
}
func (m *ServiceStatusApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceStatusApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusApplyConfiguration.Merge(m, src)
}
func (m *ServiceStatusApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusApplyConfiguration proto.InternalMessageInfo

func (m *SessionAffinityConfigApplyConfiguration) Reset() {
	*m = SessionAffinityConfigApplyConfiguration{}
}
func (*SessionAffinityConfigApplyConfiguration) ProtoMessage() {}
func (*SessionAffinityConfigApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{164}
}
func (m *SessionAffinityConfigApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionAffinityConfigApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SessionAffinityConfigApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionAffinityConfigApplyConfiguration.Merge(m, src)
}
func (m *SessionAffinityConfigApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SessionAffinityConfigApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionAffinityConfigApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SessionAffinityConfigApplyConfiguration proto.InternalMessageInfo

func (m *StorageOSPersistentVolumeSourceApplyConfiguration) Reset() {
	*m = StorageOSPersistentVolumeSourceApplyConfiguration{}
}
func (*StorageOSPersistentVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*StorageOSPersistentVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{165}
}
func (m *StorageOSPersistentVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageOSPersistentVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageOSPersistentVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageOSPersistentVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *StorageOSPersistentVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *StorageOSPersistentVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageOSPersistentVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_StorageOSPersistentVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *StorageOSVolumeSourceApplyConfiguration) Reset() {
	*m = StorageOSVolumeSourceApplyConfiguration{}
}
func (*StorageOSVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*StorageOSVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{166}
}
func (m *StorageOSVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageOSVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageOSVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageOSVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *StorageOSVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *StorageOSVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageOSVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_StorageOSVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *SysctlApplyConfiguration) Reset()      { *m = SysctlApplyConfiguration{} }
func (*SysctlApplyConfiguration) ProtoMessage() {}
func (*SysctlApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{167}
}
func (m *SysctlApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysctlApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SysctlApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysctlApplyConfiguration.Merge(m, src)
}
func (m *SysctlApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SysctlApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SysctlApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SysctlApplyConfiguration proto.InternalMessageInfo

func (m *TCPSocketActionApplyConfiguration) Reset()      { *m = TCPSocketActionApplyConfiguration{} }
func (*TCPSocketActionApplyConfiguration) ProtoMessage() {}
func (*TCPSocketActionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{168}
}
func (m *TCPSocketActionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPSocketActionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TCPSocketActionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPSocketActionApplyConfiguration.Merge(m, src)
}
func (m *TCPSocketActionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TCPSocketActionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPSocketActionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TCPSocketActionApplyConfiguration proto.InternalMessageInfo

func (m *TaintApplyConfiguration) Reset()      { *m = TaintApplyConfiguration{} }
func (*TaintApplyConfiguration) ProtoMessage() {}
func (*TaintApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{169}
}
func (m *TaintApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaintApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TaintApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaintApplyConfiguration.Merge(m, src)
}
func (m *TaintApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TaintApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TaintApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TaintApplyConfiguration proto.InternalMessageInfo

func (m *TolerationApplyConfiguration) Reset()      { *m = TolerationApplyConfiguration{} }
func (*TolerationApplyConfiguration) ProtoMessage() {}
func (*TolerationApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{170}
}
func (m *TolerationApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TolerationApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TolerationApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TolerationApplyConfiguration.Merge(m, src)
}
func (m *TolerationApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TolerationApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TolerationApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TolerationApplyConfiguration proto.InternalMessageInfo

func (m *TopologySelectorLabelRequirementApplyConfiguration) Reset() {
	*m = TopologySelectorLabelRequirementApplyConfiguration{}
}
func (*TopologySelectorLabelRequirementApplyConfiguration) ProtoMessage() {}
func (*TopologySelectorLabelRequirementApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{171}
}
func (m *TopologySelectorLabelRequirementApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopologySelectorLabelRequirementApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TopologySelectorLabelRequirementApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopologySelectorLabelRequirementApplyConfiguration.Merge(m, src)
}
func (m *TopologySelectorLabelRequirementApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TopologySelectorLabelRequirementApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TopologySelectorLabelRequirementApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TopologySelectorLabelRequirementApplyConfiguration proto.InternalMessageInfo

func (m *TopologySelectorTermApplyConfiguration) Reset() {
	*m = TopologySelectorTermApplyConfiguration{}
}
func (*TopologySelectorTermApplyConfiguration) ProtoMessage() {}
func (*TopologySelectorTermApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{172}
}
func (m *TopologySelectorTermApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopologySelectorTermApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TopologySelectorTermApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopologySelectorTermApplyConfiguration.Merge(m, src)
}
func (m *TopologySelectorTermApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TopologySelectorTermApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TopologySelectorTermApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TopologySelectorTermApplyConfiguration proto.InternalMessageInfo

func (m *TopologySpreadConstraintApplyConfiguration) Reset() {
	*m = TopologySpreadConstraintApplyConfiguration{}
}
func (*TopologySpreadConstraintApplyConfiguration) ProtoMessage() {}
func (*TopologySpreadConstraintApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{173}
}
func (m *TopologySpreadConstraintApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopologySpreadConstraintApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TopologySpreadConstraintApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopologySpreadConstraintApplyConfiguration.Merge(m, src)
}
func (m *TopologySpreadConstraintApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TopologySpreadConstraintApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TopologySpreadConstraintApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TopologySpreadConstraintApplyConfiguration proto.InternalMessageInfo

func (m *TypedLocalObjectReferenceApplyConfiguration) Reset() {
	*m = TypedLocalObjectReferenceApplyConfiguration{}
}
func (*TypedLocalObjectReferenceApplyConfiguration) ProtoMessage() {}
func (*TypedLocalObjectReferenceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{174}
}
func (m *TypedLocalObjectReferenceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypedLocalObjectReferenceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TypedLocalObjectReferenceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedLocalObjectReferenceApplyConfiguration.Merge(m, src)
}
func (m *TypedLocalObjectReferenceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TypedLocalObjectReferenceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedLocalObjectReferenceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TypedLocalObjectReferenceApplyConfiguration proto.InternalMessageInfo

func (m *TypedObjectReferenceApplyConfiguration) Reset() {
	*m = TypedObjectReferenceApplyConfiguration{}
}
func (*TypedObjectReferenceApplyConfiguration) ProtoMessage() {}
func (*TypedObjectReferenceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{175}
}
func (m *TypedObjectReferenceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypedObjectReferenceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TypedObjectReferenceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedObjectReferenceApplyConfiguration.Merge(m, src)
}
func (m *TypedObjectReferenceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TypedObjectReferenceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedObjectReferenceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TypedObjectReferenceApplyConfiguration proto.InternalMessageInfo

func (m *VolumeApplyConfiguration) Reset()      { *m = VolumeApplyConfiguration{} }
func (*VolumeApplyConfiguration) ProtoMessage() {}
func (*VolumeApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{176}
}
func (m *VolumeApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeApplyConfiguration.Merge(m, src)
}
func (m *VolumeApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VolumeApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeApplyConfiguration proto.InternalMessageInfo

func (m *VolumeDeviceApplyConfiguration) Reset()      { *m = VolumeDeviceApplyConfiguration{} }
func (*VolumeDeviceApplyConfiguration) ProtoMessage() {}
func (*VolumeDeviceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{177}
}
func (m *VolumeDeviceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeDeviceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeDeviceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDeviceApplyConfiguration.Merge(m, src)
}
func (m *VolumeDeviceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VolumeDeviceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDeviceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDeviceApplyConfiguration proto.InternalMessageInfo

func (m *VolumeMountApplyConfiguration) Reset()      { *m = VolumeMountApplyConfiguration{} }
func (*VolumeMountApplyConfiguration) ProtoMessage() {}
func (*VolumeMountApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{178}
}
func (m *VolumeMountApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeMountApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeMountApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeMountApplyConfiguration.Merge(m, src)
}
func (m *VolumeMountApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VolumeMountApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeMountApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeMountApplyConfiguration proto.InternalMessageInfo

func (m *VolumeNodeAffinityApplyConfiguration) Reset()      { *m = VolumeNodeAffinityApplyConfiguration{} }
func (*VolumeNodeAffinityApplyConfiguration) ProtoMessage() {}
func (*VolumeNodeAffinityApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{179}
}
func (m *VolumeNodeAffinityApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeNodeAffinityApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeNodeAffinityApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeNodeAffinityApplyConfiguration.Merge(m, src)
}
func (m *VolumeNodeAffinityApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VolumeNodeAffinityApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeNodeAffinityApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeNodeAffinityApplyConfiguration proto.InternalMessageInfo

func (m *VolumeProjectionApplyConfiguration) Reset()      { *m = VolumeProjectionApplyConfiguration{} }
func (*VolumeProjectionApplyConfiguration) ProtoMessage() {}
func (*VolumeProjectionApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{180}
}
func (m *VolumeProjectionApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeProjectionApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeProjectionApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeProjectionApplyConfiguration.Merge(m, src)
}
func (m *VolumeProjectionApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VolumeProjectionApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeProjectionApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeProjectionApplyConfiguration proto.InternalMessageInfo

func (m *VolumeSourceApplyConfiguration) Reset()      { *m = VolumeSourceApplyConfiguration{} }
func (*VolumeSourceApplyConfiguration) ProtoMessage() {}
func (*VolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{181}
}
func (m *VolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *VolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) Reset() {
	*m = VsphereVirtualDiskVolumeSourceApplyConfiguration{}
}
func (*VsphereVirtualDiskVolumeSourceApplyConfiguration) ProtoMessage() {}
func (*VsphereVirtualDiskVolumeSourceApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{182}
}
func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VsphereVirtualDiskVolumeSourceApplyConfiguration.Merge(m, src)
}
func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VsphereVirtualDiskVolumeSourceApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VsphereVirtualDiskVolumeSourceApplyConfiguration proto.InternalMessageInfo

func (m *WeightedPodAffinityTermApplyConfiguration) Reset() {
	*m = WeightedPodAffinityTermApplyConfiguration{}
}
func (*WeightedPodAffinityTermApplyConfiguration) ProtoMessage() {}
func (*WeightedPodAffinityTermApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{183}
}
func (m *WeightedPodAffinityTermApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedPodAffinityTermApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WeightedPodAffinityTermApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedPodAffinityTermApplyConfiguration.Merge(m, src)
}
func (m *WeightedPodAffinityTermApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *WeightedPodAffinityTermApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedPodAffinityTermApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedPodAffinityTermApplyConfiguration proto.InternalMessageInfo

func (m *WindowsSecurityContextOptionsApplyConfiguration) Reset() {
	*m = WindowsSecurityContextOptionsApplyConfiguration{}
}
func (*WindowsSecurityContextOptionsApplyConfiguration) ProtoMessage() {}
func (*WindowsSecurityContextOptionsApplyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0dae6ae1339580, []int{184}
}
func (m *WindowsSecurityContextOptionsApplyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowsSecurityContextOptionsApplyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WindowsSecurityContextOptionsApplyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowsSecurityContextOptionsApplyConfiguration.Merge(m, src)
}
func (m *WindowsSecurityContextOptionsApplyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *WindowsSecurityContextOptionsApplyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowsSecurityContextOptionsApplyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_WindowsSecurityContextOptionsApplyConfiguration proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AWSElasticBlockStoreVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.AWSElasticBlockStoreVolumeSourceApplyConfiguration")
	proto.RegisterType((*AffinityApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.AffinityApplyConfiguration")
	proto.RegisterType((*AttachedVolumeApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.AttachedVolumeApplyConfiguration")
	proto.RegisterType((*AzureDiskVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.AzureDiskVolumeSourceApplyConfiguration")
	proto.RegisterType((*AzureFilePersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.AzureFilePersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*AzureFileVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.AzureFileVolumeSourceApplyConfiguration")
	proto.RegisterType((*CSIPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CSIPersistentVolumeSourceApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CSIPersistentVolumeSourceApplyConfiguration.VolumeAttributesEntry")
	proto.RegisterType((*CSIVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CSIVolumeSourceApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CSIVolumeSourceApplyConfiguration.VolumeAttributesEntry")
	proto.RegisterType((*CapabilitiesApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CapabilitiesApplyConfiguration")
	proto.RegisterType((*CephFSPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CephFSPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*CephFSVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CephFSVolumeSourceApplyConfiguration")
	proto.RegisterType((*CinderPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CinderPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*CinderVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.CinderVolumeSourceApplyConfiguration")
	proto.RegisterType((*ClaimSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ClaimSourceApplyConfiguration")
	proto.RegisterType((*ClientIPConfigApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ClientIPConfigApplyConfiguration")
	proto.RegisterType((*ComponentConditionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ComponentConditionApplyConfiguration")
	proto.RegisterType((*ComponentStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ComponentStatusApplyConfiguration")
	proto.RegisterType((*ConfigMapApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapApplyConfiguration")
	proto.RegisterMapType((map[string][]byte)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapApplyConfiguration.BinaryDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapApplyConfiguration.DataEntry")
	proto.RegisterType((*ConfigMapEnvSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapEnvSourceApplyConfiguration")
	proto.RegisterType((*ConfigMapKeySelectorApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapKeySelectorApplyConfiguration")
	proto.RegisterType((*ConfigMapNodeConfigSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapNodeConfigSourceApplyConfiguration")
	proto.RegisterType((*ConfigMapProjectionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapProjectionApplyConfiguration")
	proto.RegisterType((*ConfigMapVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ConfigMapVolumeSourceApplyConfiguration")
	proto.RegisterType((*ContainerApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerApplyConfiguration")
	proto.RegisterType((*ContainerImageApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerImageApplyConfiguration")
	proto.RegisterType((*ContainerPortApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerPortApplyConfiguration")
	proto.RegisterType((*ContainerResizePolicyApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerResizePolicyApplyConfiguration")
	proto.RegisterType((*ContainerStateApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerStateApplyConfiguration")
	proto.RegisterType((*ContainerStateRunningApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerStateRunningApplyConfiguration")
	proto.RegisterType((*ContainerStateTerminatedApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerStateTerminatedApplyConfiguration")
	proto.RegisterType((*ContainerStateWaitingApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerStateWaitingApplyConfiguration")
	proto.RegisterType((*ContainerStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerStatusApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ContainerStatusApplyConfiguration.AllocatedResourcesEntry")
	proto.RegisterType((*DaemonEndpointApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.DaemonEndpointApplyConfiguration")
	proto.RegisterType((*DownwardAPIProjectionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.DownwardAPIProjectionApplyConfiguration")
	proto.RegisterType((*DownwardAPIVolumeFileApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.DownwardAPIVolumeFileApplyConfiguration")
	proto.RegisterType((*DownwardAPIVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.DownwardAPIVolumeSourceApplyConfiguration")
	proto.RegisterType((*EmptyDirVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EmptyDirVolumeSourceApplyConfiguration")
	proto.RegisterType((*EndpointAddressApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EndpointAddressApplyConfiguration")
	proto.RegisterType((*EndpointPortApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EndpointPortApplyConfiguration")
	proto.RegisterType((*EndpointSubsetApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EndpointSubsetApplyConfiguration")
	proto.RegisterType((*EndpointsApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EndpointsApplyConfiguration")
	proto.RegisterType((*EnvFromSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EnvFromSourceApplyConfiguration")
	proto.RegisterType((*EnvVarApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EnvVarApplyConfiguration")
	proto.RegisterType((*EnvVarSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EnvVarSourceApplyConfiguration")
	proto.RegisterType((*EphemeralContainerApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EphemeralContainerApplyConfiguration")
	proto.RegisterType((*EphemeralContainerCommonApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EphemeralContainerCommonApplyConfiguration")
	proto.RegisterType((*EphemeralVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EphemeralVolumeSourceApplyConfiguration")
	proto.RegisterType((*EventApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EventApplyConfiguration")
	proto.RegisterType((*EventSeriesApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EventSeriesApplyConfiguration")
	proto.RegisterType((*EventSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.EventSourceApplyConfiguration")
	proto.RegisterType((*ExecActionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ExecActionApplyConfiguration")
	proto.RegisterType((*FCVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.FCVolumeSourceApplyConfiguration")
	proto.RegisterType((*FlexPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.FlexPersistentVolumeSourceApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.FlexPersistentVolumeSourceApplyConfiguration.OptionsEntry")
	proto.RegisterType((*FlexVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.FlexVolumeSourceApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.FlexVolumeSourceApplyConfiguration.OptionsEntry")
	proto.RegisterType((*FlockerVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.FlockerVolumeSourceApplyConfiguration")
	proto.RegisterType((*GCEPersistentDiskVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.GCEPersistentDiskVolumeSourceApplyConfiguration")
	proto.RegisterType((*GRPCActionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.GRPCActionApplyConfiguration")
	proto.RegisterType((*GitRepoVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.GitRepoVolumeSourceApplyConfiguration")
	proto.RegisterType((*GlusterfsPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.GlusterfsPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*GlusterfsVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.GlusterfsVolumeSourceApplyConfiguration")
	proto.RegisterType((*HTTPGetActionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.HTTPGetActionApplyConfiguration")
	proto.RegisterType((*HTTPHeaderApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.HTTPHeaderApplyConfiguration")
	proto.RegisterType((*HostAliasApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.HostAliasApplyConfiguration")
	proto.RegisterType((*HostIPApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.HostIPApplyConfiguration")
	proto.RegisterType((*HostPathVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.HostPathVolumeSourceApplyConfiguration")
	proto.RegisterType((*ISCSIPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ISCSIPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*ISCSIVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ISCSIVolumeSourceApplyConfiguration")
	proto.RegisterType((*KeyToPathApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.KeyToPathApplyConfiguration")
	proto.RegisterType((*LifecycleApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LifecycleApplyConfiguration")
	proto.RegisterType((*LifecycleHandlerApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LifecycleHandlerApplyConfiguration")
	proto.RegisterType((*LimitRangeApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeApplyConfiguration")
	proto.RegisterType((*LimitRangeItemApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeItemApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeItemApplyConfiguration.DefaultEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeItemApplyConfiguration.DefaultRequestEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeItemApplyConfiguration.MaxEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeItemApplyConfiguration.MaxLimitRequestRatioEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeItemApplyConfiguration.MinEntry")
	proto.RegisterType((*LimitRangeSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LimitRangeSpecApplyConfiguration")
	proto.RegisterType((*LoadBalancerIngressApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LoadBalancerIngressApplyConfiguration")
	proto.RegisterType((*LoadBalancerStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LoadBalancerStatusApplyConfiguration")
	proto.RegisterType((*LocalObjectReferenceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LocalObjectReferenceApplyConfiguration")
	proto.RegisterType((*LocalVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.LocalVolumeSourceApplyConfiguration")
	proto.RegisterType((*NFSVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NFSVolumeSourceApplyConfiguration")
	proto.RegisterType((*NamespaceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NamespaceApplyConfiguration")
	proto.RegisterType((*NamespaceConditionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NamespaceConditionApplyConfiguration")
	proto.RegisterType((*NamespaceSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NamespaceSpecApplyConfiguration")
	proto.RegisterType((*NamespaceStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NamespaceStatusApplyConfiguration")
	proto.RegisterType((*NodeAddressApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeAddressApplyConfiguration")
	proto.RegisterType((*NodeAffinityApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeAffinityApplyConfiguration")
	proto.RegisterType((*NodeApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeApplyConfiguration")
	proto.RegisterType((*NodeConditionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeConditionApplyConfiguration")
	proto.RegisterType((*NodeConfigSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeConfigSourceApplyConfiguration")
	proto.RegisterType((*NodeConfigStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeConfigStatusApplyConfiguration")
	proto.RegisterType((*NodeDaemonEndpointsApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeDaemonEndpointsApplyConfiguration")
	proto.RegisterType((*NodeSelectorApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeSelectorApplyConfiguration")
	proto.RegisterType((*NodeSelectorRequirementApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeSelectorRequirementApplyConfiguration")
	proto.RegisterType((*NodeSelectorTermApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeSelectorTermApplyConfiguration")
	proto.RegisterType((*NodeSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeSpecApplyConfiguration")
	proto.RegisterType((*NodeStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeStatusApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeStatusApplyConfiguration.AllocatableEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeStatusApplyConfiguration.CapacityEntry")
	proto.RegisterType((*NodeSystemInfoApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.NodeSystemInfoApplyConfiguration")
	proto.RegisterType((*ObjectFieldSelectorApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ObjectFieldSelectorApplyConfiguration")
	proto.RegisterType((*ObjectReferenceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ObjectReferenceApplyConfiguration")
	proto.RegisterType((*PersistentVolumeApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeApplyConfiguration")
	proto.RegisterType((*PersistentVolumeClaimApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimApplyConfiguration")
	proto.RegisterType((*PersistentVolumeClaimConditionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimConditionApplyConfiguration")
	proto.RegisterType((*PersistentVolumeClaimSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimSpecApplyConfiguration")
	proto.RegisterType((*PersistentVolumeClaimStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimStatusApplyConfiguration")
	proto.RegisterMapType((map[k8s_io_api_core_v1.ResourceName]k8s_io_api_core_v1.ClaimResourceStatus)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimStatusApplyConfiguration.AllocatedResourceStatusesEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimStatusApplyConfiguration.AllocatedResourcesEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimStatusApplyConfiguration.CapacityEntry")
	proto.RegisterType((*PersistentVolumeClaimTemplateApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimTemplateApplyConfiguration")
	proto.RegisterType((*PersistentVolumeClaimVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeClaimVolumeSourceApplyConfiguration")
	proto.RegisterType((*PersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*PersistentVolumeSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeSpecApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeSpecApplyConfiguration.CapacityEntry")
	proto.RegisterType((*PersistentVolumeStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PersistentVolumeStatusApplyConfiguration")
	proto.RegisterType((*PhotonPersistentDiskVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PhotonPersistentDiskVolumeSourceApplyConfiguration")
	proto.RegisterType((*PodAffinityApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodAffinityApplyConfiguration")
	proto.RegisterType((*PodAffinityTermApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodAffinityTermApplyConfiguration")
	proto.RegisterType((*PodAntiAffinityApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodAntiAffinityApplyConfiguration")
	proto.RegisterType((*PodApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodApplyConfiguration")
	proto.RegisterType((*PodConditionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodConditionApplyConfiguration")
	proto.RegisterType((*PodDNSConfigApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodDNSConfigApplyConfiguration")
	proto.RegisterType((*PodDNSConfigOptionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodDNSConfigOptionApplyConfiguration")
	proto.RegisterType((*PodIPApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodIPApplyConfiguration")
	proto.RegisterType((*PodOSApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodOSApplyConfiguration")
	proto.RegisterType((*PodReadinessGateApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodReadinessGateApplyConfiguration")
	proto.RegisterType((*PodResourceClaimApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodResourceClaimApplyConfiguration")
	proto.RegisterType((*PodResourceClaimStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodResourceClaimStatusApplyConfiguration")
	proto.RegisterType((*PodSchedulingGateApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodSchedulingGateApplyConfiguration")
	proto.RegisterType((*PodSecurityContextApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodSecurityContextApplyConfiguration")
	proto.RegisterType((*PodSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodSpecApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodSpecApplyConfiguration.NodeSelectorEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodSpecApplyConfiguration.OverheadEntry")
	proto.RegisterType((*PodStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodStatusApplyConfiguration")
	proto.RegisterType((*PodTemplateApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodTemplateApplyConfiguration")
	proto.RegisterType((*PodTemplateSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PodTemplateSpecApplyConfiguration")
	proto.RegisterType((*PortStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PortStatusApplyConfiguration")
	proto.RegisterType((*PortworxVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PortworxVolumeSourceApplyConfiguration")
	proto.RegisterType((*PreferredSchedulingTermApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.PreferredSchedulingTermApplyConfiguration")
	proto.RegisterType((*ProbeApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ProbeApplyConfiguration")
	proto.RegisterType((*ProbeHandlerApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ProbeHandlerApplyConfiguration")
	proto.RegisterType((*ProjectedVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ProjectedVolumeSourceApplyConfiguration")
	proto.RegisterType((*QuobyteVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.QuobyteVolumeSourceApplyConfiguration")
	proto.RegisterType((*RBDPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.RBDPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*RBDVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.RBDVolumeSourceApplyConfiguration")
	proto.RegisterType((*ReplicationControllerApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ReplicationControllerApplyConfiguration")
	proto.RegisterType((*ReplicationControllerConditionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ReplicationControllerConditionApplyConfiguration")
	proto.RegisterType((*ReplicationControllerSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ReplicationControllerSpecApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ReplicationControllerSpecApplyConfiguration.SelectorEntry")
	proto.RegisterType((*ReplicationControllerStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ReplicationControllerStatusApplyConfiguration")
	proto.RegisterType((*ResourceClaimApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceClaimApplyConfiguration")
	proto.RegisterType((*ResourceFieldSelectorApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceFieldSelectorApplyConfiguration")
	proto.RegisterType((*ResourceQuotaApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceQuotaApplyConfiguration")
	proto.RegisterType((*ResourceQuotaSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceQuotaSpecApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceQuotaSpecApplyConfiguration.HardEntry")
	proto.RegisterType((*ResourceQuotaStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceQuotaStatusApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceQuotaStatusApplyConfiguration.HardEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceQuotaStatusApplyConfiguration.UsedEntry")
	proto.RegisterType((*ResourceRequirementsApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceRequirementsApplyConfiguration")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceRequirementsApplyConfiguration.LimitsEntry")
	proto.RegisterMapType((k8s_io_api_core_v1.ResourceList)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ResourceRequirementsApplyConfiguration.RequestsEntry")
	proto.RegisterType((*SELinuxOptionsApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SELinuxOptionsApplyConfiguration")
	proto.RegisterType((*ScaleIOPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ScaleIOPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*ScaleIOVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ScaleIOVolumeSourceApplyConfiguration")
	proto.RegisterType((*ScopeSelectorApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ScopeSelectorApplyConfiguration")
	proto.RegisterType((*ScopedResourceSelectorRequirementApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ScopedResourceSelectorRequirementApplyConfiguration")
	proto.RegisterType((*SeccompProfileApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SeccompProfileApplyConfiguration")
	proto.RegisterType((*SecretApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretApplyConfiguration")
	proto.RegisterMapType((map[string][]byte)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretApplyConfiguration.DataEntry")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretApplyConfiguration.StringDataEntry")
	proto.RegisterType((*SecretEnvSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretEnvSourceApplyConfiguration")
	proto.RegisterType((*SecretKeySelectorApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretKeySelectorApplyConfiguration")
	proto.RegisterType((*SecretProjectionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretProjectionApplyConfiguration")
	proto.RegisterType((*SecretReferenceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretReferenceApplyConfiguration")
	proto.RegisterType((*SecretVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecretVolumeSourceApplyConfiguration")
	proto.RegisterType((*SecurityContextApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SecurityContextApplyConfiguration")
	proto.RegisterType((*ServiceAccountApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServiceAccountApplyConfiguration")
	proto.RegisterType((*ServiceAccountTokenProjectionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServiceAccountTokenProjectionApplyConfiguration")
	proto.RegisterType((*ServiceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServiceApplyConfiguration")
	proto.RegisterType((*ServicePortApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServicePortApplyConfiguration")
	proto.RegisterType((*ServiceSpecApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServiceSpecApplyConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServiceSpecApplyConfiguration.SelectorEntry")
	proto.RegisterType((*ServiceStatusApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.ServiceStatusApplyConfiguration")
	proto.RegisterType((*SessionAffinityConfigApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SessionAffinityConfigApplyConfiguration")
	proto.RegisterType((*StorageOSPersistentVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.StorageOSPersistentVolumeSourceApplyConfiguration")
	proto.RegisterType((*StorageOSVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.StorageOSVolumeSourceApplyConfiguration")
	proto.RegisterType((*SysctlApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.SysctlApplyConfiguration")
	proto.RegisterType((*TCPSocketActionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TCPSocketActionApplyConfiguration")
	proto.RegisterType((*TaintApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TaintApplyConfiguration")
	proto.RegisterType((*TolerationApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TolerationApplyConfiguration")
	proto.RegisterType((*TopologySelectorLabelRequirementApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TopologySelectorLabelRequirementApplyConfiguration")
	proto.RegisterType((*TopologySelectorTermApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TopologySelectorTermApplyConfiguration")
	proto.RegisterType((*TopologySpreadConstraintApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TopologySpreadConstraintApplyConfiguration")
	proto.RegisterType((*TypedLocalObjectReferenceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TypedLocalObjectReferenceApplyConfiguration")
	proto.RegisterType((*TypedObjectReferenceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.TypedObjectReferenceApplyConfiguration")
	proto.RegisterType((*VolumeApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VolumeApplyConfiguration")
	proto.RegisterType((*VolumeDeviceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VolumeDeviceApplyConfiguration")
	proto.RegisterType((*VolumeMountApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VolumeMountApplyConfiguration")
	proto.RegisterType((*VolumeNodeAffinityApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VolumeNodeAffinityApplyConfiguration")
	proto.RegisterType((*VolumeProjectionApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VolumeProjectionApplyConfiguration")
	proto.RegisterType((*VolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VolumeSourceApplyConfiguration")
	proto.RegisterType((*VsphereVirtualDiskVolumeSourceApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.VsphereVirtualDiskVolumeSourceApplyConfiguration")
	proto.RegisterType((*WeightedPodAffinityTermApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.WeightedPodAffinityTermApplyConfiguration")
	proto.RegisterType((*WindowsSecurityContextOptionsApplyConfiguration)(nil), "k8s.io.client_go.applyconfigurations.core.v1.WindowsSecurityContextOptionsApplyConfiguration")
}

func init() {
	proto.RegisterFile("k8s.io/kubernetes/vendor/k8s.io/client-go/applyconfigurations/core/v1/generated.proto", fileDescriptor_ad0dae6ae1339580)
}

var fileDescriptor_ad0dae6ae1339580 = []byte{
	// 15065 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x7d, 0x90, 0x1c, 0xc9,
	0x55, 0x20, 0xee, 0xea, 0xee, 0xf9, 0x7a, 0xa3, 0xcf, 0xd4, 0x6a, 0x77, 0xa4, 0x95, 0xd4, 0x52,
	0xed, 0x4a, 0xab, 0xb5, 0xbc, 0xa3, 0xd5, 0x7a, 0xed, 0x85, 0x85, 0xb5, 0x3d, 0x9f, 0x52, 0x5b,
	0xd2, 0xa8, 0x37, 0x7b, 0x24, 0xd9, 0x18, 0x1b, 0xd7, 0x74, 0xe7, 0xcc, 0x94, 0xa7, 0xbb, 0xaa,
	0x55, 0x55, 0x3d, 0xd2, 0x08, 0xdb, 0x3f, 0x7b, 0x01, 0xdb, 0xf8, 0x87, 0x6d, 0x30, 0x47, 0x98,
	0x8f, 0xf0, 0x05, 0x67, 0x38, 0x9b, 0x3b, 0x1b, 0xb8, 0xc0, 0xc7, 0x81, 0xe3, 0x88, 0x23, 0x88,
	0x0b, 0x08, 0x73, 0x07, 0x84, 0xc3, 0x98, 0x08, 0x7c, 0x40, 0x63, 0x0f, 0x04, 0x47, 0x10, 0x77,
	0x10, 0x71, 0x01, 0x47, 0x9c, 0x82, 0xb8, 0xb8, 0xc8, 0x97, 0x59, 0x55, 0x59, 0xd5, 0x55, 0xdd,
	0x5d, 0xad, 0x1e, 0x69, 0x6d, 0xe6, 0xbf, 0xee, 0x97, 0x2f, 0xf3, 0xbd, 0xca, 0xcf, 0x97, 0xef,
	0xbd, 0x7c, 0x0f, 0xae, 0x6f, 0x7c, 0x87, 0x3b, 0x6d, 0xda, 0xe7, 0x37, 0x5a, 0x2b, 0xcc, 0xb1,
	0x98, 0xc7, 0xdc, 0xf3, 0x9b, 0xcc, 0xaa, 0xd9, 0xce, 0x79, 0x59, 0x50, 0xad, 0x9b, 0xcc, 0xf2,
	0x9e, 0x59, 0xb3, 0xcf, 0x1b, 0xcd, 0x66, 0x7d, 0xab, 0x6a, 0x5b, 0xab, 0xe6, 0x5a, 0xcb, 0x31,
	0x3c, 0xd3, 0xb6, 0xdc, 0xf3, 0x55, 0xdb, 0x61, 0xe7, 0x37, 0x2f, 0x9c, 0x5f, 0x63, 0x16, 0x73,
	0x0c, 0x8f, 0xd5, 0xa6, 0x9b, 0x8e, 0xed, 0xd9, 0xe4, 0x75, 0xa2, 0xf6, 0xb4, 0xa8, 0xfd, 0x7d,
	0x6b, 0xf6, 0x74, 0x42, 0xed, 0x69, 0x5e, 0x7b, 0x7a, 0xf3, 0xc2, 0xd1, 0x67, 0xd6, 0x4c, 0x6f,
	0xbd, 0xb5, 0x32, 0x5d, 0xb5, 0x1b, 0xe7, 0xd7, 0xec, 0x35, 0xfb, 0x3c, 0x36, 0xb2, 0xd2, 0x5a,
	0xc5, 0x7f, 0xf8, 0x07, 0x7f, 0x89, 0xc6, 0x8f, 0xea, 0x92, 0x35, 0xa3, 0x69, 0xa6, 0x31, 0x70,
	0xf4, 0xf9, 0x10, 0xa7, 0x61, 0x54, 0xd7, 0x4d, 0x8b, 0x39, 0x5b, 0xe7, 0x9b, 0x1b, 0x6b, 0x58,
	0xc9, 0x61, 0xae, 0xdd, 0x72, 0xaa, 0x2c, 0x53, 0x2d, 0xf7, 0x7c, 0x83, 0x79, 0x46, 0x12, 0xad,
	0xd7, 0xa7, 0xd5, 0x6a, 0x79, 0x66, 0xfd, 0xbc, 0x69, 0x79, 0xae, 0xe7, 0x74, 0x54, 0xfa, 0xee,
	0xbe, 0xfa, 0x37, 0x85, 0xa4, 0xfe, 0x75, 0x0d, 0x9e, 0x9b, 0xb9, 0x59, 0x59, 0xa8, 0x1b, 0xae,
	0x67, 0x56, 0x67, 0xeb, 0x76, 0x75, 0xa3, 0xe2, 0xd9, 0x0e, 0xbb, 0x61, 0xd7, 0x5b, 0x0d, 0x56,
	0xc1, 0xaf, 0x9b, 0xe1, 0xed, 0xcd, 0xa9, 0xed, 0x91, 0xb3, 0x30, 0xbe, 0x89, 0x18, 0xa5, 0xf9,
	0x29, 0xed, 0xa4, 0x76, 0x76, 0x62, 0x76, 0xcf, 0x76, 0xbb, 0x38, 0x7e, 0x43, 0xc2, 0x68, 0x50,
	0x4a, 0x74, 0x18, 0x5d, 0x75, 0x97, 0xb7, 0x9a, 0x6c, 0x2a, 0x87, 0x78, 0xb0, 0xdd, 0x2e, 0x8e,
	0x2e, 0x56, 0x38, 0x84, 0xca, 0x12, 0x72, 0x0e, 0x26, 0x9a, 0x86, 0xe3, 0x99, 0xbc, 0xe9, 0xa9,
	0xfc, 0x49, 0xed, 0xec, 0xc8, 0xec, 0xde, 0xed, 0x76, 0x71, 0xa2, 0xec, 0x03, 0x69, 0x58, 0xce,
	0x49, 0x3b, 0xcc, 0xa8, 0x5d, 0xb3, 0xea, 0x5b, 0x53, 0x85, 0x93, 0xda, 0xd9, 0x71, 0x41, 0x9a,
	0x4a, 0x18, 0x0d, 0x4a, 0xf5, 0x5f, 0xc9, 0xc3, 0xd1, 0x99, 0xd5, 0x55, 0xd3, 0x32, 0xbd, 0xad,
	0x84, 0x6f, 0x78, 0x45, 0x83, 0x3d, 0x96, 0x5d, 0x63, 0x3e, 0x0a, 0x7e, 0xc8, 0xe4, 0x73, 0x57,
	0xa6, 0xb3, 0x4c, 0xb9, 0xe9, 0x25, 0xa5, 0x85, 0x4e, 0x22, 0xb3, 0x07, 0xb6, 0xdb, 0xc5, 0x3d,
	0x2a, 0x0e, 0x8d, 0xd0, 0x24, 0xef, 0x87, 0xc9, 0xa6, 0x5d, 0x0b, 0x58, 0xc8, 0x21, 0x0b, 0x97,
	0xb3, 0xb1, 0x50, 0x0e, 0x1b, 0x48, 0xe0, 0x60, 0xff, 0x76, 0xbb, 0x38, 0xa9, 0xa0, 0x50, 0x95,
	0x20, 0xf9, 0xb8, 0x06, 0xfb, 0xf9, 0x7f, 0xcb, 0x33, 0x03, 0x26, 0xf2, 0xc8, 0xc4, 0xb5, 0xec,
	0x4c, 0x28, 0x8d, 0x24, 0x30, 0x72, 0x68, 0xbb, 0x5d, 0xdc, 0x1f, 0x43, 0xa3, 0x71, 0xe2, 0xfa,
	0xa7, 0x34, 0x38, 0x39, 0xe3, 0x79, 0x46, 0x75, 0x9d, 0xd5, 0xc4, 0x74, 0x4a, 0x18, 0xba, 0x39,
	0x28, 0x58, 0x46, 0x83, 0xc9, 0xa9, 0x77, 0x7e, 0xbb, 0x5d, 0x2c, 0x2c, 0x19, 0x0d, 0x76, 0xaf,
	0x5d, 0x7c, 0xa2, 0x73, 0x49, 0x4f, 0x5f, 0xb7, 0xcc, 0x5b, 0x2d, 0x39, 0xa3, 0x39, 0x1a, 0xc5,
	0xca, 0x64, 0x1a, 0xa0, 0xc6, 0x36, 0xcd, 0x2a, 0x2b, 0x1b, 0xde, 0xba, 0x9c, 0x9d, 0xfb, 0xb6,
	0xdb, 0x45, 0x98, 0x0f, 0xa0, 0x54, 0xc1, 0xd0, 0xff, 0x3e, 0x07, 0x4f, 0xcd, 0xdc, 0x6d, 0x39,
	0x6c, 0xde, 0x74, 0x37, 0x7a, 0xaf, 0x8f, 0x9a, 0xe9, 0x6e, 0x2c, 0x85, 0x4c, 0xe2, 0x24, 0x9d,
	0x97, 0x30, 0x1a, 0x94, 0x92, 0xa7, 0x61, 0x8c, 0xff, 0xbe, 0x4e, 0x4b, 0x92, 0x05, 0x1c, 0xaf,
	0x79, 0xc3, 0x33, 0xe6, 0x05, 0x98, 0xfa, 0xe5, 0xe4, 0xdd, 0x30, 0x59, 0xc5, 0x6d, 0x61, 0xed,
	0xaa, 0x5d, 0x63, 0x38, 0x4c, 0x13, 0xb3, 0x6f, 0xe2, 0xe8, 0x73, 0x21, 0xf8, 0x5e, 0xbb, 0x78,
	0x2e, 0xa1, 0x0f, 0x04, 0xe3, 0xb2, 0x55, 0x05, 0x9d, 0xaa, 0x4d, 0x2a, 0x8b, 0xb5, 0x90, 0xba,
	0x58, 0xd5, 0xf5, 0x37, 0xd2, 0x6d, 0xfd, 0x91, 0x79, 0x28, 0x6c, 0x98, 0x56, 0x6d, 0x6a, 0x14,
	0xdb, 0x7a, 0x96, 0x8f, 0xd2, 0x65, 0xd3, 0xaa, 0xdd, 0x6b, 0x17, 0x9f, 0xec, 0xc5, 0x21, 0xc7,
	0xa3, 0x58, 0x5b, 0xff, 0x3f, 0x1a, 0x5c, 0xc0, 0xb2, 0x45, 0xb3, 0xce, 0xca, 0xcc, 0x71, 0x4d,
	0xd7, 0x63, 0x96, 0xd7, 0x63, 0x00, 0xa6, 0x01, 0x5c, 0x56, 0x75, 0x98, 0xa7, 0x0c, 0x01, 0x0e,
	0x6e, 0x25, 0x80, 0x52, 0x05, 0x83, 0x6f, 0x41, 0xee, 0xba, 0xe1, 0xe0, 0xfc, 0x90, 0x03, 0x81,
	0x5b, 0x50, 0xc5, 0x07, 0xd2, 0xb0, 0x3c, 0xd2, 0x05, 0xf9, 0xae, 0x5d, 0xf0, 0x12, 0xec, 0x0f,
	0x89, 0xb8, 0x4d, 0xa3, 0xea, 0xf7, 0x2c, 0x2e, 0x86, 0x4a, 0xb4, 0x88, 0xc6, 0x71, 0xf5, 0x7f,
	0xa7, 0xc9, 0x29, 0xc7, 0xbf, 0xfd, 0x5b, 0xe2, 0x8b, 0xf5, 0x8f, 0x02, 0x9c, 0x9b, 0xab, 0x94,
	0xfa, 0x1e, 0x28, 0x1d, 0x46, 0x6b, 0x8e, 0xb9, 0xc9, 0x1c, 0xc9, 0x32, 0x4e, 0xb9, 0x79, 0x84,
	0x50, 0x59, 0x42, 0x9e, 0x87, 0x3d, 0xe2, 0x3c, 0xb9, 0x64, 0x58, 0xb5, 0xba, 0xcf, 0x2d, 0x6e,
	0xad, 0x37, 0x14, 0x38, 0x8d, 0x60, 0x65, 0x18, 0xa5, 0x7e, 0xa6, 0xfd, 0xaf, 0x6a, 0x70, 0x40,
	0x34, 0x3f, 0xe3, 0x79, 0x8e, 0xb9, 0xd2, 0xf2, 0x98, 0x3b, 0x35, 0x72, 0x32, 0x7f, 0x76, 0xf2,
	0x39, 0x3b, 0xdb, 0x4e, 0x99, 0xa1, 0x77, 0xa6, 0x6f, 0xc4, 0x28, 0x2e, 0x58, 0x9e, 0xb3, 0x35,
	0x3b, 0xf5, 0xe5, 0x76, 0xf1, 0x35, 0xdb, 0xed, 0xe2, 0x81, 0x78, 0x31, 0xed, 0x60, 0x91, 0xfc,
	0xb2, 0x06, 0x47, 0xab, 0xb6, 0xe5, 0x39, 0x76, 0xbd, 0xce, 0x9c, 0x72, 0x6b, 0xa5, 0x6e, 0xba,
	0xeb, 0x62, 0x4a, 0x50, 0xb6, 0x8a, 0x6b, 0x33, 0xf3, 0x5e, 0x1f, 0x54, 0x67, 0x0e, 0xb3, 0x92,
	0xf8, 0x9e, 0x3d, 0xb1, 0xdd, 0x2e, 0x1e, 0x9d, 0x4b, 0x25, 0x4b, 0xbb, 0xb0, 0x44, 0x3e, 0xa5,
	0x01, 0xe1, 0x67, 0x64, 0xc5, 0x33, 0xd6, 0x58, 0xc8, 0xe9, 0xd8, 0xce, 0x70, 0xfa, 0xe8, 0x76,
	0xbb, 0x48, 0x96, 0x3a, 0xc8, 0xd1, 0x04, 0x16, 0xc8, 0xa7, 0x35, 0x78, 0x84, 0x83, 0x3b, 0x7a,
	0x71, 0x7c, 0x67, 0x78, 0x9b, 0xda, 0x6e, 0x17, 0x1f, 0x59, 0x4a, 0x20, 0x48, 0x13, 0xd9, 0x20,
	0x5f, 0xd0, 0xe0, 0x48, 0xd8, 0xb1, 0x0b, 0x77, 0x9a, 0x86, 0x55, 0x0b, 0x99, 0x9c, 0xd8, 0x19,
	0x26, 0x8f, 0x6f, 0xb7, 0x8b, 0x47, 0xe6, 0xd2, 0xa8, 0xd2, 0x74, 0x86, 0xc8, 0x4f, 0x6b, 0x70,
	0x88, 0x7f, 0x47, 0x9c, 0x51, 0xd8, 0x19, 0x46, 0x1f, 0xdb, 0x6e, 0x17, 0x0f, 0x2d, 0x75, 0xd2,
	0xa3, 0x49, 0x4c, 0x1c, 0x9d, 0x83, 0xc3, 0x89, 0x8b, 0x8f, 0x1c, 0x80, 0xfc, 0x06, 0x13, 0xc2,
	0xe2, 0x04, 0xe5, 0x3f, 0xc9, 0x23, 0x30, 0xb2, 0x69, 0xd4, 0x5b, 0x72, 0x5f, 0xa2, 0xe2, 0xcf,
	0x8b, 0xb9, 0xef, 0xd0, 0xf4, 0x5f, 0x2c, 0xc0, 0xa9, 0xb9, 0x4a, 0x69, 0x08, 0x5b, 0xa0, 0xba,
	0x99, 0xe5, 0xfa, 0xdc, 0xcc, 0xf2, 0xa9, 0x9b, 0xd9, 0xe7, 0x93, 0x36, 0xb3, 0x02, 0x6e, 0x66,
	0x2c, 0xf3, 0x66, 0xb6, 0xe3, 0x5b, 0xd8, 0x67, 0xd2, 0x96, 0xdd, 0x08, 0x4e, 0x94, 0xe5, 0x6c,
	0x1c, 0x5f, 0xb1, 0xab, 0x46, 0xfd, 0xda, 0xca, 0x7b, 0x58, 0x75, 0x98, 0x6b, 0x6f, 0x38, 0xf3,
	0xe5, 0x67, 0x34, 0x38, 0x31, 0x67, 0x34, 0x8d, 0x15, 0xb3, 0x6e, 0x7a, 0x26, 0x73, 0x13, 0x26,
	0xcb, 0x8b, 0x90, 0x37, 0x6a, 0xb5, 0x29, 0xed, 0x64, 0xfe, 0xec, 0xc4, 0xec, 0xd9, 0xed, 0x76,
	0x31, 0x3f, 0x53, 0xe3, 0x22, 0xd5, 0xf1, 0x04, 0x91, 0x2a, 0x68, 0x6a, 0x8b, 0xf2, 0x4a, 0xe4,
	0x25, 0x28, 0xd4, 0x1c, 0xbb, 0x39, 0x95, 0xc3, 0xca, 0x4f, 0x73, 0x81, 0x6c, 0xde, 0xb1, 0x9b,
	0xbd, 0x6b, 0x63, 0x35, 0xfd, 0x6f, 0x73, 0x30, 0x3d, 0xc7, 0x9a, 0xeb, 0x8b, 0x95, 0xbe, 0x4f,
	0xf7, 0xb3, 0x30, 0xde, 0xb0, 0x2d, 0xd3, 0xb3, 0x1d, 0x57, 0xb2, 0x8c, 0xd3, 0xf6, 0xaa, 0x84,
	0xd1, 0xa0, 0x94, 0x1c, 0x83, 0x42, 0x33, 0x94, 0xc3, 0xc7, 0x39, 0x6f, 0x28, 0x81, 0x23, 0x94,
	0x97, 0xb6, 0x5c, 0xe6, 0xc8, 0x29, 0x8d, 0xa5, 0xd7, 0x5d, 0xe6, 0x50, 0x84, 0x86, 0xa2, 0x0f,
	0x17, 0x93, 0xe4, 0x19, 0xae, 0x88, 0x3e, 0x1c, 0x4a, 0x15, 0x0c, 0xf2, 0x5e, 0x98, 0x70, 0x63,
	0x93, 0x68, 0xe8, 0xbb, 0x8d, 0x90, 0xa5, 0x82, 0x49, 0x13, 0x12, 0x8c, 0x2c, 0xe5, 0xd1, 0xae,
	0xb2, 0xd4, 0xdf, 0xe4, 0xe0, 0x49, 0xd1, 0xe1, 0xdf, 0x92, 0xdd, 0xfc, 0x41, 0xad, 0xb3, 0x9f,
	0x77, 0x66, 0xb1, 0x0e, 0xa3, 0xb3, 0x3f, 0xcb, 0x67, 0xb7, 0x69, 0xd5, 0x98, 0x93, 0x65, 0x76,
	0x0f, 0x51, 0x0b, 0xd2, 0xbf, 0xbc, 0x1a, 0x99, 0xbf, 0x85, 0x07, 0x3c, 0x7f, 0xf5, 0xcf, 0xf0,
	0x59, 0x89, 0x1d, 0xf5, 0x2a, 0xed, 0x9e, 0xe8, 0xbc, 0x2b, 0x3c, 0x8c, 0x79, 0xa7, 0xff, 0x96,
	0x06, 0xc7, 0xe7, 0xea, 0x86, 0xd9, 0x48, 0xed, 0x9d, 0x39, 0x38, 0xe8, 0xab, 0x0f, 0x11, 0x51,
	0xb9, 0xb6, 0x1d, 0xde, 0x6e, 0x17, 0x0f, 0xd2, 0x78, 0x21, 0xed, 0xc4, 0x27, 0xef, 0x80, 0x23,
	0x11, 0xe0, 0x32, 0x6b, 0x34, 0xeb, 0x86, 0xa7, 0x5e, 0xea, 0x50, 0x3e, 0xa3, 0x69, 0x48, 0x34,
	0xbd, 0xbe, 0xfe, 0x2e, 0x38, 0x39, 0x87, 0xbd, 0x55, 0x2a, 0x0b, 0xd6, 0x13, 0x8f, 0xa3, 0x7d,
	0x9e, 0xd9, 0x60, 0x76, 0xcb, 0xab, 0xb0, 0xaa, 0x6d, 0xd5, 0x5c, 0xfc, 0x84, 0x91, 0x59, 0xb2,
	0xdd, 0x2e, 0xee, 0x5b, 0x8e, 0x94, 0xd0, 0x18, 0xa6, 0xfe, 0x03, 0x7c, 0x22, 0xd9, 0x8d, 0xa6,
	0x6d, 0x31, 0xcb, 0x9b, 0xb3, 0xad, 0x1a, 0x2a, 0xf8, 0x12, 0x88, 0x94, 0xa0, 0xe0, 0xf1, 0xc9,
	0x21, 0x7a, 0xe7, 0x0d, 0x7c, 0x5b, 0xe2, 0x53, 0xe2, 0x5e, 0xbb, 0xf8, 0x74, 0xd2, 0xb9, 0xd5,
	0xd1, 0x24, 0xce, 0x23, 0x6c, 0x82, 0x5c, 0x82, 0x51, 0xd7, 0x33, 0xbc, 0x96, 0x2b, 0x7b, 0xe7,
	0x59, 0x3e, 0xd3, 0x2a, 0x08, 0xb9, 0xd7, 0x2e, 0xea, 0x89, 0xcd, 0xc9, 0x56, 0x04, 0x16, 0x95,
	0xf5, 0xc9, 0x69, 0x18, 0x6b, 0x30, 0xd7, 0x35, 0xd6, 0x7c, 0x41, 0x6b, 0x72, 0xbb, 0x5d, 0x1c,
	0xbb, 0x2a, 0x40, 0xd4, 0x2f, 0x23, 0x45, 0x18, 0x61, 0x8e, 0x63, 0x3b, 0x72, 0xbf, 0x9c, 0xd8,
	0x6e, 0x17, 0x47, 0x16, 0x38, 0x80, 0x0a, 0xb8, 0xfe, 0x57, 0x79, 0x38, 0x15, 0xb0, 0x2c, 0x68,
	0x24, 0x74, 0xc1, 0x17, 0x34, 0x38, 0xca, 0x3f, 0xe0, 0x2a, 0xf3, 0x8c, 0xce, 0x62, 0xa9, 0xba,
	0xbc, 0xd4, 0xdf, 0x24, 0x6f, 0x30, 0xcf, 0xe0, 0x93, 0x7c, 0x39, 0xb5, 0xbd, 0x59, 0x5d, 0x8a,
	0x67, 0x47, 0xd3, 0x71, 0x68, 0x17, 0x7e, 0xc8, 0x47, 0x34, 0x18, 0xe7, 0x64, 0x6a, 0x86, 0x67,
	0x48, 0xa5, 0xe6, 0x5b, 0xb3, 0x31, 0x27, 0x16, 0x5f, 0x0a, 0x7b, 0x27, 0xb7, 0xdb, 0xc5, 0x63,
	0xdd, 0x30, 0x68, 0x40, 0x9d, 0x7c, 0x48, 0x03, 0xa8, 0xfa, 0x63, 0xe8, 0x4e, 0xe5, 0x51, 0xca,
	0xa5, 0x19, 0xa5, 0xdc, 0x3e, 0x66, 0xe9, 0x2c, 0x91, 0x7d, 0x06, 0x01, 0x92, 0x4b, 0x15, 0xca,
	0xfa, 0x0f, 0x8c, 0xc2, 0xe3, 0xa2, 0xc6, 0x55, 0xa3, 0xb9, 0x3b, 0xc4, 0x43, 0x1c, 0xe2, 0x73,
	0x30, 0x61, 0x36, 0x1a, 0x2d, 0xcf, 0x58, 0xa9, 0x33, 0x79, 0x36, 0xe0, 0xce, 0x5c, 0xf2, 0x81,
	0x34, 0x2c, 0x27, 0x2d, 0x28, 0x20, 0xcb, 0xe2, 0xba, 0x53, 0xc9, 0x3a, 0x11, 0x52, 0xc7, 0x6f,
	0x7a, 0xde, 0xf0, 0x0c, 0x71, 0xb9, 0xd9, 0x23, 0xbb, 0xb6, 0xc0, 0x41, 0x14, 0xc9, 0x91, 0x8f,
	0x69, 0x00, 0x2b, 0xa6, 0x65, 0x38, 0x5b, 0x1c, 0x28, 0x35, 0x47, 0x6f, 0x1f, 0x1e, 0xf5, 0xd9,
	0xa0, 0x6d, 0xc1, 0x43, 0x30, 0x1b, 0xc3, 0x02, 0xaa, 0x30, 0x70, 0xf4, 0x05, 0x98, 0x08, 0x90,
	0xb3, 0xdc, 0x51, 0x8e, 0xbe, 0x04, 0xfb, 0x63, 0xb4, 0x7a, 0x55, 0xdf, 0xa3, 0x5e, 0x71, 0x7e,
	0x19, 0x37, 0x7d, 0xf9, 0x1d, 0x0b, 0xd6, 0x66, 0xea, 0xf9, 0xf8, 0xa7, 0x1a, 0x9c, 0xa9, 0xf7,
	0x75, 0x0c, 0xcb, 0xa5, 0xb1, 0x33, 0x47, 0xfc, 0xb4, 0xec, 0xc7, 0x33, 0xfd, 0xe1, 0xd3, 0x3e,
	0x79, 0xe6, 0xe2, 0x8c, 0xdd, 0xe4, 0xbf, 0x8c, 0xba, 0x7a, 0xa1, 0xbf, 0x26, 0x61, 0x34, 0x28,
	0xd5, 0x7f, 0x2f, 0x07, 0x67, 0x82, 0x1e, 0xbb, 0xcc, 0xb6, 0x2a, 0xac, 0xce, 0xaa, 0x9e, 0xed,
	0xfc, 0xf3, 0xeb, 0xb3, 0x23, 0x62, 0x9e, 0x89, 0x93, 0x7b, 0x8c, 0xdf, 0x7d, 0x2f, 0xb3, 0x2d,
	0x31, 0xe1, 0xd4, 0xee, 0xcc, 0x77, 0xed, 0xce, 0x2f, 0xe5, 0xe0, 0x5c, 0xd0, 0x9d, 0xfc, 0x82,
	0x2f, 0xfe, 0xa4, 0xce, 0xc3, 0x73, 0x30, 0x61, 0x05, 0xca, 0x7b, 0x2d, 0xd4, 0x93, 0x87, 0x6a,
	0xfb, 0xb0, 0x9c, 0x5f, 0xa0, 0xac, 0x50, 0xf4, 0x1a, 0xf7, 0x0d, 0x53, 0xd2, 0xe2, 0xf4, 0x26,
	0xc8, 0xb7, 0xcc, 0x9a, 0x14, 0x17, 0x5e, 0xc7, 0xf9, 0xbf, 0x5e, 0x9a, 0xbf, 0xd7, 0x2e, 0x9e,
	0x4a, 0xb3, 0xfb, 0xf2, 0xed, 0xd7, 0x9d, 0xbe, 0x5e, 0x9a, 0xa7, 0xbc, 0x22, 0x79, 0x09, 0xf6,
	0xfb, 0xd2, 0xda, 0x0d, 0x7e, 0x47, 0xb1, 0x2d, 0xd5, 0x9a, 0x40, 0xa3, 0x45, 0x34, 0x8e, 0x4b,
	0xde, 0x02, 0x07, 0x36, 0x5a, 0x2b, 0xac, 0xce, 0x3c, 0xf1, 0x85, 0x97, 0x99, 0xb0, 0xe0, 0x4c,
	0xcc, 0x3e, 0xb2, 0xdd, 0x2e, 0x1e, 0xb8, 0x1c, 0x2b, 0xa3, 0x1d, 0xd8, 0xfa, 0xcf, 0xe6, 0xe1,
	0x74, 0xd0, 0x77, 0x65, 0xc7, 0xe6, 0x03, 0x96, 0x2c, 0xb2, 0x7d, 0x9b, 0xcf, 0x44, 0x0b, 0x46,
	0x4c, 0x8f, 0x35, 0x5c, 0x54, 0xa5, 0x4c, 0x3e, 0x57, 0xca, 0xc6, 0xfc, 0x65, 0xb6, 0xb5, 0x6c,
	0xf3, 0x6b, 0x77, 0xd2, 0x95, 0x42, 0x72, 0x3c, 0x52, 0xe2, 0xed, 0x53, 0x41, 0x26, 0xc3, 0xf4,
	0xfe, 0xa3, 0x3c, 0x3c, 0x15, 0x0c, 0x51, 0x8f, 0x0b, 0xda, 0xee, 0x20, 0x0d, 0x75, 0x90, 0x2e,
	0xc0, 0x64, 0x8d, 0xad, 0x1a, 0xad, 0xba, 0x17, 0xd8, 0x67, 0x47, 0xa4, 0x39, 0x37, 0x04, 0x53,
	0x15, 0x27, 0x32, 0xae, 0x85, 0xae, 0xe3, 0xfa, 0xdf, 0x0f, 0xa2, 0xf4, 0xe8, 0x19, 0x7c, 0x77,
	0x48, 0xf8, 0xd8, 0x63, 0x11, 0x93, 0x78, 0x7c, 0xe7, 0x29, 0xc2, 0x88, 0xd9, 0xe0, 0x57, 0x95,
	0x5c, 0x78, 0x0b, 0x29, 0x71, 0x00, 0x15, 0x70, 0x7e, 0x9b, 0xa9, 0xda, 0x8d, 0x86, 0x61, 0xd5,
	0x50, 0x42, 0x96, 0xb7, 0x99, 0x39, 0x01, 0xa2, 0x7e, 0x19, 0xa7, 0x62, 0x38, 0x6b, 0x42, 0x57,
	0x2c, 0xa9, 0xcc, 0x38, 0x6b, 0x2e, 0x45, 0x28, 0x99, 0x06, 0xb8, 0x6d, 0x3b, 0x1b, 0xa6, 0xb5,
	0x36, 0x6f, 0x3a, 0x72, 0x6b, 0x41, 0x05, 0xd1, 0xcd, 0x00, 0x4a, 0x15, 0x0c, 0xe2, 0xc0, 0x48,
	0xd3, 0x76, 0x3c, 0x77, 0x6a, 0x14, 0x07, 0xe8, 0x6a, 0x66, 0x69, 0x48, 0xf4, 0x46, 0xd9, 0x76,
	0xbc, 0x6e, 0x83, 0xc4, 0xcb, 0x5d, 0x2a, 0x48, 0x91, 0x3b, 0x30, 0xc6, 0xac, 0xcd, 0x45, 0xc7,
	0x6e, 0x4c, 0x8d, 0x0d, 0x42, 0x75, 0x41, 0x54, 0x4e, 0x5b, 0x53, 0xb3, 0xfb, 0x25, 0xd5, 0x31,
	0x89, 0x48, 0x7d, 0x72, 0x84, 0x41, 0x9e, 0x59, 0x9b, 0x53, 0xe3, 0x48, 0x75, 0x31, 0x33, 0xd5,
	0x1b, 0x46, 0xc2, 0xb0, 0xcf, 0x4e, 0x4a, 0x72, 0xf9, 0x05, 0x6b, 0x93, 0xf2, 0xf6, 0x51, 0xfb,
	0xe1, 0xef, 0xfc, 0xae, 0x34, 0xfa, 0x64, 0x5c, 0xb7, 0xfe, 0x49, 0x42, 0xd9, 0xad, 0x96, 0xe9,
	0xb0, 0x06, 0xb3, 0x3c, 0x37, 0x4d, 0xfb, 0xe1, 0xe3, 0xba, 0x34, 0xa4, 0x4a, 0x3e, 0xa1, 0xc1,
	0x1e, 0x87, 0xb9, 0xe6, 0x5d, 0x56, 0xb6, 0xeb, 0x66, 0x75, 0x6b, 0x0a, 0xf0, 0xa3, 0xaf, 0x0f,
	0x38, 0xc0, 0x54, 0x69, 0x2a, 0x81, 0x8f, 0x47, 0x64, 0x1f, 0xec, 0x51, 0xf1, 0x68, 0x84, 0x01,
	0x52, 0x83, 0xbd, 0x0e, 0x73, 0x3d, 0xc3, 0xf1, 0x24, 0x47, 0x93, 0x81, 0xf7, 0xc4, 0x5e, 0xaa,
	0x16, 0xa4, 0x2a, 0x15, 0x42, 0x5e, 0x42, 0x64, 0x1a, 0x6d, 0x94, 0xfc, 0x90, 0xe6, 0x5b, 0xaa,
	0xaf, 0xda, 0x2d, 0xcb, 0x73, 0xa7, 0xf6, 0xe0, 0x77, 0x67, 0xf4, 0xe7, 0xb9, 0x11, 0xb6, 0xd0,
	0xed, 0x6b, 0x15, 0x34, 0x97, 0x46, 0xc8, 0x92, 0x1f, 0xd6, 0x60, 0xaf, 0x00, 0x08, 0x5f, 0x16,
	0x77, 0x6a, 0x2f, 0x32, 0x72, 0x65, 0x10, 0x46, 0x44, 0x13, 0x09, 0x9c, 0x1c, 0x96, 0x9c, 0xec,
	0x55, 0xf1, 0x5c, 0x1a, 0xa5, 0x4c, 0xde, 0x0f, 0x7b, 0xeb, 0xe6, 0x26, 0xb3, 0x98, 0xeb, 0x96,
	0x1d, 0x7b, 0x85, 0x4d, 0xed, 0xc3, 0x29, 0xb9, 0x90, 0xd1, 0xbd, 0x88, 0x57, 0x4d, 0xe0, 0xe1,
	0x20, 0xa7, 0x7f, 0x45, 0x6d, 0x9f, 0x46, 0xc9, 0xf1, 0xf5, 0xb0, 0xcf, 0x61, 0x46, 0xcd, 0x0c,
	0x39, 0xd8, 0x3f, 0x4c, 0x0e, 0x50, 0xd3, 0x45, 0x23, 0x04, 0x68, 0x8c, 0x20, 0xf9, 0x7e, 0xd8,
	0x83, 0xd3, 0xa4, 0xd5, 0x14, 0x0c, 0x1c, 0x18, 0x26, 0x03, 0xe8, 0x07, 0x51, 0x51, 0x9a, 0xa7,
	0x11, 0x62, 0x64, 0x13, 0x26, 0xea, 0xe6, 0x2a, 0xab, 0x6e, 0x55, 0xeb, 0x6c, 0xea, 0x20, 0x52,
	0xce, 0x78, 0x14, 0x5e, 0xf1, 0xab, 0xa7, 0x6d, 0x02, 0x01, 0x02, 0x0d, 0x49, 0x11, 0x0a, 0x8f,
	0x7a, 0xcc, 0x69, 0x98, 0x16, 0x22, 0x4a, 0xc5, 0x18, 0xfa, 0x5a, 0x11, 0x5c, 0x7b, 0x47, 0xb7,
	0xdb, 0xc5, 0x47, 0x97, 0x13, 0x31, 0x68, 0x4a, 0x4d, 0xf2, 0x61, 0x0d, 0xa6, 0x12, 0x8a, 0xc4,
	0x92, 0x3e, 0x84, 0xcd, 0x5e, 0xde, 0x6e, 0x17, 0xa7, 0x96, 0x53, 0x70, 0x52, 0xbc, 0xa3, 0xd2,
	0xd0, 0x69, 0x2a, 0x31, 0xf2, 0x2e, 0xd8, 0x8f, 0x27, 0x67, 0xb9, 0x55, 0xaf, 0x4b, 0xfa, 0x8f,
	0x20, 0xfd, 0xe7, 0xb9, 0x2c, 0x5e, 0x8a, 0x16, 0xa5, 0x58, 0xd8, 0x42, 0x04, 0x1a, 0x6f, 0x0c,
	0x1d, 0xf3, 0x5c, 0x56, 0x6d, 0x39, 0xa6, 0xc7, 0x7b, 0xdc, 0x63, 0x77, 0xbc, 0xa9, 0xc3, 0x03,
	0xaa, 0xfa, 0xd5, 0x46, 0xd2, 0x1c, 0xf3, 0x62, 0x68, 0x34, 0x4e, 0x9c, 0x8b, 0x10, 0xae, 0x57,
	0x33, 0xad, 0xa9, 0x47, 0x51, 0x4e, 0x41, 0x11, 0xa2, 0xc2, 0x01, 0x54, 0xc0, 0xd1, 0xa1, 0x88,
	0xff, 0xb8, 0x66, 0x55, 0xd9, 0xd4, 0x63, 0xa1, 0x16, 0xa6, 0xe2, 0x03, 0x69, 0x58, 0xce, 0xaf,
	0x72, 0x9e, 0xb7, 0x35, 0x35, 0x85, 0x68, 0x78, 0x95, 0x5b, 0x5e, 0x7e, 0x3b, 0xe5, 0x30, 0xbd,
	0x09, 0x27, 0x83, 0xdd, 0x16, 0xfb, 0x31, 0x41, 0xda, 0x29, 0xc2, 0x08, 0x5e, 0xba, 0xa4, 0xb5,
	0x0b, 0x99, 0xc1, 0x0b, 0x19, 0x15, 0x70, 0x64, 0xc6, 0xbc, 0xcb, 0x66, 0xb7, 0x3c, 0x26, 0x54,
	0xbd, 0x79, 0xc9, 0x8c, 0x0f, 0xa4, 0x61, 0xb9, 0xfe, 0x89, 0x1c, 0x14, 0x7b, 0x48, 0x13, 0x3d,
	0xe4, 0xab, 0xb3, 0x30, 0xbe, 0x6e, 0xbb, 0x1e, 0xaf, 0x8b, 0xd4, 0x46, 0x84, 0x1c, 0x77, 0x49,
	0xc2, 0x68, 0x50, 0x4a, 0x5e, 0x80, 0xbd, 0x55, 0x95, 0x94, 0x14, 0x13, 0x71, 0x1f, 0x8b, 0xf0,
	0x40, 0xa3, 0x78, 0xe4, 0x22, 0x8c, 0xa3, 0xcb, 0x6e, 0xd5, 0xae, 0xcb, 0x5b, 0xdf, 0x39, 0x4e,
	0xa2, 0x2c, 0x61, 0xf7, 0xda, 0xc5, 0xc7, 0x93, 0xa6, 0x98, 0x2c, 0xa6, 0x41, 0x65, 0xa2, 0xc3,
	0x28, 0xe7, 0xa6, 0x54, 0x96, 0x12, 0x1a, 0x1a, 0x5b, 0x2e, 0x21, 0x84, 0xca, 0x12, 0xfd, 0x7f,
	0x6a, 0x78, 0x8b, 0xe8, 0xe7, 0xf8, 0x25, 0x37, 0xf1, 0xac, 0xc7, 0x93, 0x5f, 0xb1, 0x61, 0xbc,
	0x5e, 0x1e, 0xc8, 0x01, 0xfc, 0x5e, 0xbb, 0x58, 0x4c, 0x60, 0x50, 0x45, 0xa1, 0x91, 0x86, 0x88,
	0x19, 0x3f, 0xb3, 0x85, 0xf0, 0x3a, 0x97, 0x74, 0x66, 0x4f, 0x77, 0x69, 0x5a, 0xf0, 0xdf, 0xed,
	0xe0, 0xd6, 0xff, 0x4d, 0x5e, 0x99, 0x74, 0x15, 0xcf, 0xf0, 0x92, 0x26, 0xdd, 0x7b, 0x61, 0xec,
	0xb6, 0x61, 0x7a, 0xa6, 0xb5, 0x26, 0xaf, 0x43, 0x83, 0xca, 0x33, 0x48, 0xe0, 0xa6, 0x68, 0x2a,
	0x49, 0xa6, 0xe3, 0xe2, 0xa3, 0x2c, 0xa6, 0x3e, 0x49, 0x4e, 0xdd, 0x69, 0x59, 0x16, 0xa7, 0x9e,
	0xbb, 0x7f, 0xea, 0x54, 0x34, 0x95, 0x46, 0x5d, 0x16, 0x53, 0x9f, 0x24, 0xf9, 0x88, 0x06, 0xe0,
	0xef, 0x85, 0xac, 0x26, 0x5d, 0x84, 0xdf, 0x76, 0x3f, 0x1c, 0x2c, 0x07, 0xad, 0x25, 0x30, 0x81,
	0xb7, 0x86, 0x10, 0x83, 0x2a, 0xb4, 0xf5, 0x57, 0xd4, 0xb9, 0xd9, 0xfd, 0x63, 0xc8, 0x4d, 0xbe,
	0x27, 0x19, 0x0e, 0x27, 0xe2, 0xc9, 0x41, 0x7b, 0xad, 0xcf, 0xb4, 0xaa, 0x6d, 0x99, 0x6e, 0x6e,
	0xac, 0x71, 0x80, 0xa2, 0x39, 0x37, 0x1b, 0xcc, 0xdf, 0xbf, 0x64, 0x03, 0x34, 0x6c, 0x4b, 0xff,
	0xc5, 0x3c, 0xbc, 0xb6, 0xff, 0xef, 0xe1, 0xfb, 0x03, 0xbb, 0x63, 0x7a, 0x73, 0xfc, 0x5e, 0xa8,
	0x85, 0xfb, 0xc3, 0x82, 0x84, 0xd1, 0xa0, 0x94, 0xaf, 0x4e, 0xd7, 0x5c, 0xf3, 0xb5, 0x82, 0x23,
	0x62, 0x75, 0x56, 0x10, 0x42, 0x65, 0x09, 0xc7, 0x71, 0x98, 0xe1, 0x4a, 0x67, 0x79, 0xb9, 0x82,
	0x29, 0x42, 0xa8, 0x2c, 0x51, 0xcd, 0x53, 0x85, 0x2e, 0xe6, 0xa9, 0x48, 0x07, 0x8d, 0x0c, 0xaf,
	0x83, 0xc8, 0xf7, 0x00, 0xac, 0x9a, 0x96, 0xe9, 0xae, 0x63, 0xcb, 0xa3, 0x99, 0x5b, 0xc6, 0x19,
	0xb0, 0x18, 0xb4, 0x40, 0x95, 0xd6, 0xf8, 0x45, 0x3b, 0xd8, 0x1b, 0x4b, 0xf3, 0xe8, 0x19, 0x28,
	0xfd, 0xa6, 0xc3, 0x83, 0x63, 0x9e, 0xaa, 0x38, 0xba, 0x17, 0x9f, 0x33, 0xa9, 0xcb, 0x4f, 0xe9,
	0x5d, 0xad, 0x9f, 0xde, 0xcd, 0xa5, 0xf7, 0xae, 0xfe, 0xb9, 0x71, 0x38, 0x15, 0x21, 0x9b, 0x68,
	0xdb, 0xeb, 0x7e, 0xb4, 0xd8, 0xfc, 0xdc, 0x35, 0x3c, 0x26, 0x57, 0xfd, 0xd2, 0xfd, 0xac, 0xb9,
	0x84, 0x95, 0x26, 0xcf, 0x71, 0xbe, 0x8a, 0x04, 0x1d, 0xf2, 0x21, 0x0d, 0x26, 0xea, 0x86, 0x8b,
	0xb6, 0x48, 0x26, 0x57, 0xfa, 0xb0, 0xa9, 0xa2, 0x77, 0xd5, 0x15, 0xc3, 0xf5, 0x14, 0xc9, 0x4b,
	0x30, 0x11, 0x92, 0xe6, 0x87, 0x3c, 0x97, 0xa3, 0xfd, 0x67, 0x1e, 0xc8, 0x29, 0x17, 0xb4, 0xb7,
	0xa8, 0x80, 0x93, 0xe7, 0xf1, 0xe4, 0xe1, 0x53, 0x6e, 0x8e, 0xdf, 0x7b, 0x70, 0xfe, 0x8e, 0x08,
	0x79, 0x98, 0x2a, 0x70, 0x1a, 0xc1, 0x0a, 0x75, 0x21, 0xa3, 0xe9, 0xba, 0x10, 0xfc, 0x11, 0x4c,
	0x2d, 0x1c, 0xdc, 0x92, 0x00, 0x51, 0xbf, 0x2c, 0x3e, 0x0b, 0xc7, 0x7b, 0xcf, 0x42, 0xde, 0xb2,
	0x5c, 0x21, 0x78, 0x31, 0x1f, 0x17, 0x2d, 0xcb, 0xf5, 0x43, 0xfd, 0x32, 0xf2, 0x0f, 0x1a, 0x10,
	0xa3, 0x5e, 0xb7, 0xab, 0xb8, 0xf7, 0x05, 0x77, 0x79, 0x71, 0x89, 0x5e, 0xbb, 0x8f, 0xa1, 0x48,
	0x9a, 0x7e, 0xd3, 0x33, 0x1d, 0x94, 0x84, 0x05, 0xe9, 0x7b, 0xb7, 0xdb, 0x45, 0xd2, 0x59, 0xd8,
	0xe3, 0x1c, 0xbf, 0x62, 0xba, 0xde, 0x2b, 0x7f, 0xde, 0xfb, 0xa8, 0x4f, 0xf8, 0xc0, 0x98, 0xea,
	0x62, 0xf2, 0x61, 0xa8, 0x2e, 0x8e, 0xb6, 0xe0, 0xb1, 0x94, 0x0e, 0x49, 0x30, 0x73, 0xcd, 0xab,
	0x66, 0xae, 0xc9, 0xe7, 0xa6, 0xbb, 0xed, 0x6f, 0xd3, 0x3e, 0x8d, 0xe9, 0x97, 0x5b, 0x86, 0xe5,
	0x99, 0xde, 0x96, 0x6a, 0x16, 0x7b, 0x23, 0x9c, 0x9c, 0x37, 0x58, 0xc3, 0xb6, 0x16, 0xac, 0x5a,
	0xd3, 0x36, 0x93, 0x6e, 0xfe, 0x84, 0x40, 0x01, 0x25, 0x46, 0x3c, 0x40, 0x28, 0xfe, 0xd6, 0xff,
	0xb5, 0x06, 0x4f, 0xcd, 0xdb, 0xb7, 0xad, 0xdb, 0x86, 0x53, 0x9b, 0x29, 0x97, 0xba, 0xea, 0xe4,
	0xef, 0xfa, 0xfa, 0x50, 0x6d, 0x10, 0x6d, 0x8c, 0x42, 0x45, 0xdc, 0xf7, 0x17, 0xcd, 0xe4, 0x0b,
	0x61, 0x92, 0x6e, 0x54, 0xff, 0xbf, 0xb9, 0x08, 0x9f, 0xdd, 0x5a, 0x08, 0x7c, 0xd4, 0xb4, 0x44,
	0x1f, 0xb5, 0xf7, 0xc1, 0xf8, 0xaa, 0xc9, 0xea, 0x35, 0xca, 0x56, 0x65, 0xb7, 0x67, 0xb4, 0xe1,
	0x0a, 0xc5, 0xf1, 0x22, 0x6f, 0x23, 0xdd, 0x94, 0x26, 0xce, 0xe7, 0x45, 0x49, 0x88, 0x06, 0x24,
	0xc9, 0xa7, 0x34, 0x38, 0xe0, 0x8f, 0xa4, 0x5f, 0x2c, 0x37, 0xc9, 0xeb, 0x83, 0x4d, 0xd5, 0x5e,
	0x9c, 0xa0, 0x71, 0x86, 0xc6, 0x48, 0xd2, 0x0e, 0x26, 0x78, 0xb7, 0x35, 0xb8, 0x7c, 0x51, 0xc0,
	0x5d, 0x10, 0xbb, 0x0d, 0x15, 0xce, 0x08, 0xd5, 0xff, 0x9b, 0x06, 0x4f, 0x77, 0x0c, 0x40, 0xaa,
	0x65, 0xe0, 0x21, 0x4e, 0x95, 0xb8, 0x1a, 0x3d, 0xd7, 0x5b, 0x8d, 0xae, 0xff, 0xbe, 0x06, 0x67,
	0x16, 0x1a, 0x4d, 0x6f, 0x6b, 0xde, 0xec, 0xe5, 0x94, 0xb6, 0x08, 0xa3, 0x0d, 0x56, 0x33, 0x5b,
	0x0d, 0x39, 0xbd, 0xa6, 0xf9, 0xe9, 0x7e, 0x15, 0x21, 0xf7, 0xda, 0xc5, 0x93, 0x09, 0xdb, 0x56,
	0xc5, 0xb3, 0x1d, 0x63, 0x8d, 0x09, 0x1c, 0x2a, 0x6b, 0x93, 0x77, 0x88, 0x0b, 0xe6, 0x15, 0xb3,
	0x61, 0x7a, 0x83, 0x2d, 0xff, 0xf0, 0x42, 0x8a, 0x8d, 0xd0, 0xb0, 0x3d, 0xfd, 0x63, 0x39, 0x38,
	0x15, 0x6c, 0x04, 0xb5, 0x9a, 0xc3, 0xdc, 0x24, 0xb9, 0xe1, 0x51, 0xc8, 0x99, 0x4d, 0xf9, 0x19,
	0xa3, 0xdb, 0xed, 0x62, 0xae, 0x54, 0xa6, 0x39, 0xb3, 0xe9, 0x5f, 0x46, 0x15, 0x43, 0x64, 0x70,
	0x19, 0xb5, 0xf0, 0xf1, 0x99, 0x5f, 0xca, 0x31, 0x2d, 0xbb, 0x26, 0xae, 0x6d, 0xf9, 0x10, 0x73,
	0x49, 0xc2, 0x68, 0x50, 0x4a, 0xde, 0x0b, 0x13, 0x9e, 0xe1, 0xac, 0xdd, 0x87, 0xcb, 0x61, 0x9f,
	0xde, 0x74, 0xcb, 0x3e, 0x15, 0x1a, 0x12, 0xd4, 0xff, 0x58, 0x83, 0x13, 0x7e, 0x7f, 0x0c, 0x74,
	0x3f, 0xe7, 0x5b, 0x4a, 0x78, 0x37, 0x17, 0x5b, 0x0a, 0xbf, 0x63, 0x23, 0x34, 0x72, 0xb5, 0xce,
	0xdf, 0xcf, 0xd5, 0xfa, 0x02, 0x4c, 0x1a, 0xcd, 0x66, 0x39, 0x7a, 0x4d, 0xc7, 0xa9, 0x3b, 0x13,
	0x82, 0xa9, 0x8a, 0xa3, 0x7f, 0x31, 0x0f, 0x27, 0xfd, 0x4f, 0xab, 0xb4, 0x56, 0x5c, 0x96, 0xf4,
	0x71, 0x1f, 0xd0, 0x60, 0xc2, 0x10, 0xf3, 0x80, 0xf9, 0x6b, 0xf2, 0x5a, 0x56, 0x0b, 0x42, 0x8f,
	0xe9, 0x34, 0x7b, 0x50, 0xae, 0xc6, 0x89, 0x19, 0x9f, 0x12, 0x0d, 0x89, 0x92, 0x9f, 0xd4, 0xe0,
	0xa0, 0x65, 0x7b, 0x28, 0x7f, 0x05, 0x08, 0xd2, 0xb2, 0x36, 0x74, 0x56, 0x8e, 0x48, 0x56, 0x0e,
	0x2e, 0xc5, 0x29, 0xd2, 0x4e, 0x26, 0xc8, 0x2d, 0xdf, 0x8c, 0x94, 0x1f, 0x44, 0xc9, 0xdd, 0x7d,
	0x5e, 0x25, 0x5b, 0x91, 0xf4, 0xaf, 0xe6, 0xe1, 0x71, 0xbf, 0xe2, 0xae, 0xbb, 0xde, 0x30, 0x7d,
	0xb9, 0xb6, 0x60, 0xcc, 0xc5, 0x65, 0xe0, 0x0f, 0xe7, 0xd2, 0x60, 0xc3, 0x99, 0xb6, 0x96, 0x42,
	0x03, 0x9d, 0xc0, 0x70, 0xa9, 0x4f, 0x4f, 0xff, 0x83, 0x1c, 0x14, 0x7b, 0x98, 0xf7, 0xf8, 0xe5,
	0xb0, 0xe9, 0xb0, 0x55, 0xf3, 0x8e, 0x7a, 0x39, 0x2c, 0x23, 0x84, 0xca, 0x12, 0xde, 0x9b, 0x7b,
	0xaa, 0xbe, 0x09, 0x3e, 0x14, 0x53, 0xe8, 0x80, 0xce, 0x5e, 0x5d, 0x9c, 0xa4, 0xc4, 0x5d, 0x67,
	0x4e, 0xa1, 0x45, 0x23, 0x94, 0xa3, 0x9e, 0xe2, 0xf9, 0xc1, 0x3d, 0xc5, 0xbb, 0xf1, 0x90, 0xee,
	0x04, 0xfd, 0x35, 0x0d, 0xa6, 0xd2, 0x2c, 0x97, 0xbd, 0x0d, 0xd6, 0x8a, 0xff, 0x99, 0xb8, 0xa4,
	0xdd, 0xe0, 0x00, 0x29, 0x34, 0x93, 0x2d, 0x98, 0xc0, 0x1f, 0x68, 0xc9, 0xcd, 0x0f, 0xf2, 0x72,
	0x5f, 0x70, 0xd6, 0xfd, 0xb3, 0x6e, 0xf8, 0x24, 0x68, 0x48, 0x4d, 0xff, 0x7a, 0x81, 0x9f, 0x46,
	0xdd, 0x2a, 0x47, 0x84, 0x54, 0xed, 0x55, 0x22, 0xa4, 0xe6, 0x5e, 0x0d, 0x42, 0xea, 0x8f, 0x6b,
	0xb0, 0xbf, 0xaa, 0x38, 0xb3, 0x85, 0xf3, 0x72, 0x79, 0xc0, 0xe5, 0xd1, 0xd5, 0x23, 0x4e, 0xd8,
	0x36, 0xe6, 0xa2, 0x04, 0x69, 0x9c, 0x03, 0xf2, 0x61, 0x0d, 0xf6, 0x88, 0x69, 0x2b, 0x59, 0x12,
	0x12, 0xce, 0xcb, 0x83, 0x2c, 0x95, 0xee, 0xfc, 0x08, 0x63, 0x9d, 0x42, 0x8a, 0x46, 0x08, 0xeb,
	0xdf, 0xc8, 0xc1, 0x93, 0x0b, 0xcd, 0x75, 0xd6, 0x60, 0x8e, 0x51, 0xef, 0xe6, 0xef, 0xf1, 0x3f,
	0x34, 0x78, 0x2d, 0xeb, 0x40, 0x9c, 0xb3, 0x1b, 0x8d, 0xa4, 0xbb, 0x9f, 0x9c, 0x84, 0x19, 0x15,
	0xb6, 0x0b, 0x7d, 0xb7, 0x3f, 0xfb, 0x9c, 0xdc, 0x55, 0x5f, 0xdb, 0x7f, 0x1d, 0x9a, 0x81, 0x7f,
	0x52, 0x82, 0x43, 0x42, 0x1c, 0x0c, 0x50, 0x95, 0x27, 0x0e, 0xf8, 0xb2, 0x73, 0xb9, 0xb3, 0x98,
	0x26, 0xd5, 0xd1, 0xff, 0xf7, 0x41, 0xc8, 0xc0, 0xe5, 0xae, 0x63, 0xcd, 0xae, 0x63, 0xcd, 0xae,
	0x63, 0xcd, 0xae, 0x63, 0xcd, 0xae, 0x63, 0xcd, 0xae, 0x63, 0xcd, 0xae, 0x63, 0xcd, 0xae, 0x63,
	0xcd, 0xb7, 0xb0, 0x63, 0xcd, 0xd7, 0x34, 0x78, 0x2a, 0x10, 0x7c, 0x7a, 0xa8, 0x49, 0x7f, 0x41,
	0x83, 0x43, 0x62, 0xbb, 0x89, 0xbc, 0x0b, 0x95, 0x72, 0xe4, 0x3b, 0x33, 0x2e, 0xb0, 0xd8, 0x83,
	0xea, 0x48, 0x93, 0x69, 0x91, 0x3a, 0x12, 0x50, 0x69, 0x12, 0x4b, 0xfa, 0x67, 0x26, 0xe1, 0xb1,
	0x85, 0x4d, 0x96, 0x68, 0x32, 0xd9, 0xd5, 0xc3, 0x0c, 0xaa, 0x87, 0xf9, 0xff, 0x35, 0xd8, 0x67,
	0x5a, 0x9b, 0x76, 0x7d, 0x93, 0xd5, 0x44, 0x95, 0xc1, 0xf4, 0x07, 0xbd, 0xd5, 0xbe, 0xb8, 0xcf,
	0x97, 0x22, 0xa4, 0x68, 0x8c, 0xb4, 0x62, 0x93, 0x2f, 0xf4, 0x63, 0x93, 0x1f, 0xe9, 0xe2, 0xf1,
	0x60, 0xc3, 0xa8, 0x90, 0xa6, 0xa4, 0x53, 0x42, 0x46, 0x19, 0x02, 0x67, 0x5a, 0xaa, 0x90, 0x2a,
	0xbc, 0x35, 0x84, 0x8c, 0x27, 0xc9, 0x90, 0x55, 0xd8, 0xb7, 0x6a, 0x3a, 0xae, 0xb7, 0x6c, 0x36,
	0xb8, 0x4c, 0xd3, 0x68, 0xca, 0x50, 0x46, 0x59, 0xbc, 0x21, 0xb0, 0x8f, 0x16, 0x23, 0xad, 0xd0,
	0x58, 0xab, 0xa4, 0x0a, 0x7b, 0xeb, 0x86, 0x4a, 0x66, 0x3c, 0x33, 0x19, 0x71, 0xe8, 0xab, 0x8d,
	0xd0, 0x68, 0x9b, 0x7c, 0xb3, 0xaa, 0xa2, 0xad, 0x7d, 0x02, 0x35, 0xe9, 0xb8, 0x59, 0x09, 0x23,
	0xbb, 0x80, 0xf3, 0x8b, 0x0c, 0xbe, 0xd5, 0x86, 0xf0, 0xba, 0xa4, 0x3c, 0xbf, 0xfe, 0x5e, 0x98,
	0x60, 0xbc, 0x03, 0x79, 0x83, 0xd2, 0xc0, 0x7b, 0xbe, 0x3f, 0xfe, 0xae, 0x9a, 0x55, 0xc7, 0x0e,
	0x7d, 0x4e, 0x16, 0xfc, 0x56, 0x68, 0xd8, 0x20, 0x0e, 0x2d, 0x73, 0x4c, 0xc6, 0xc5, 0xc3, 0x81,
	0x87, 0x16, 0x1b, 0x48, 0x1d, 0x5a, 0x2c, 0xa5, 0x92, 0x0c, 0x9f, 0x96, 0x06, 0x5a, 0x5b, 0xa7,
	0xf6, 0x86, 0xd3, 0x72, 0x06, 0x21, 0x54, 0x96, 0x90, 0x4d, 0x18, 0x73, 0x58, 0x1d, 0xbd, 0xa6,
	0xf6, 0xed, 0xcc, 0x02, 0x12, 0x1e, 0x5b, 0x82, 0x06, 0xf5, 0x89, 0x91, 0x8b, 0x40, 0x1c, 0xc6,
	0xaf, 0x66, 0xa6, 0xb5, 0x16, 0xbc, 0x5f, 0x46, 0x09, 0x4d, 0x5e, 0x98, 0x69, 0x58, 0xea, 0x47,
	0x68, 0xa2, 0x09, 0x55, 0x44, 0xa0, 0x02, 0x09, 0x2d, 0x59, 0xae, 0x67, 0xf0, 0x63, 0xe8, 0x80,
	0x1a, 0xa8, 0x20, 0x56, 0x48, 0x3b, 0xf1, 0xf5, 0x2f, 0x6a, 0x70, 0xbc, 0x6b, 0xff, 0x86, 0x33,
	0x4b, 0x4b, 0x99, 0x59, 0xb7, 0xe0, 0x00, 0x9f, 0x8b, 0xd7, 0x56, 0x5c, 0xe6, 0x6c, 0xb2, 0x1a,
	0x4e, 0xa1, 0xdc, 0x60, 0x53, 0x08, 0xb5, 0x55, 0x57, 0x62, 0x8d, 0xd1, 0x8e, 0xe6, 0xf5, 0xf7,
	0xf8, 0x4c, 0x77, 0x79, 0x1c, 0x58, 0x0d, 0xfa, 0x56, 0x79, 0x1c, 0x18, 0xf4, 0x1e, 0x0d, 0xcb,
	0xf9, 0xd2, 0x58, 0xb7, 0x5d, 0x4f, 0x7d, 0x1c, 0x78, 0xc9, 0x76, 0x3d, 0x8a, 0x50, 0x7d, 0x01,
	0x8e, 0x2d, 0xdc, 0x61, 0xd5, 0x99, 0x34, 0xeb, 0xbd, 0xa2, 0x48, 0xd0, 0xd2, 0x15, 0x09, 0xfa,
	0x9f, 0x6a, 0x70, 0x72, 0x71, 0xae, 0x77, 0xac, 0x40, 0xa1, 0x19, 0xb9, 0x79, 0x73, 0xc9, 0xf7,
	0xa1, 0x15, 0x2e, 0x77, 0x01, 0x94, 0x2a, 0x18, 0x5c, 0xa8, 0xa8, 0xb7, 0x2c, 0x69, 0x3d, 0x43,
	0xa1, 0xe2, 0x4a, 0xcb, 0xa2, 0x1c, 0xd6, 0x57, 0xb8, 0xa9, 0xbe, 0x43, 0xb6, 0xf2, 0x49, 0x70,
	0xfb, 0xb6, 0x59, 0x13, 0x91, 0xf5, 0xa4, 0x3a, 0xe5, 0xe6, 0xcd, 0xd2, 0xbc, 0x4b, 0x05, 0x5c,
	0xff, 0xbb, 0x3c, 0xbc, 0x6e, 0xb1, 0xce, 0xee, 0x0c, 0x35, 0xbe, 0x60, 0x3f, 0xe1, 0x47, 0x86,
	0xa5, 0x49, 0xbf, 0xff, 0x30, 0x36, 0xdd, 0x7b, 0xf0, 0x93, 0x1a, 0x8c, 0x89, 0x47, 0x63, 0x7e,
	0x78, 0xc2, 0x8c, 0x0e, 0x43, 0x59, 0x7a, 0x77, 0x5a, 0x3c, 0x54, 0x93, 0x0e, 0x43, 0x81, 0x86,
	0x46, 0x42, 0xa9, 0xcf, 0xc8, 0xd1, 0x17, 0x61, 0x8f, 0x8a, 0x99, 0x29, 0x26, 0xd6, 0x37, 0xf3,
	0xa0, 0x73, 0x9e, 0x1e, 0xd0, 0x38, 0x47, 0x83, 0xc7, 0xe4, 0x1f, 0x7a, 0xd0, 0xa2, 0xee, 0xa3,
	0xfd, 0x91, 0x8e, 0xd1, 0x7e, 0x67, 0xf6, 0xd1, 0x7e, 0xf8, 0x63, 0xfc, 0x31, 0x0d, 0x4e, 0x2f,
	0xd6, 0xed, 0xea, 0x46, 0xcf, 0x98, 0x42, 0x17, 0x60, 0x92, 0x8b, 0xa7, 0x6e, 0x24, 0xcc, 0x69,
	0x10, 0x32, 0x57, 0x82, 0xa9, 0x8a, 0xa3, 0x54, 0xb9, 0x7e, 0xbd, 0x34, 0x1f, 0x8f, 0xb2, 0x2b,
	0xc1, 0x54, 0xc5, 0xd1, 0xbf, 0xa2, 0xc1, 0xf9, 0x8b, 0x73, 0x0b, 0xe1, 0x32, 0xe8, 0x23, 0xe4,
	0xaf, 0x0e, 0xa3, 0xcd, 0x9a, 0xc2, 0x94, 0xb0, 0x0c, 0xce, 0x23, 0x3f, 0xb2, 0xe4, 0x61, 0x06,
	0xc3, 0xae, 0xc2, 0xb1, 0x8b, 0xb4, 0x3c, 0x97, 0x7a, 0xbc, 0xf8, 0x1e, 0x12, 0x5a, 0xa2, 0x87,
	0xc4, 0x69, 0x18, 0xe3, 0xc7, 0xa2, 0x59, 0x8d, 0xf8, 0xbb, 0x56, 0x04, 0x88, 0xfa, 0x65, 0xfa,
	0x2f, 0x69, 0x70, 0xfa, 0xa2, 0xe9, 0x71, 0x89, 0xa0, 0xf7, 0x09, 0xc4, 0x85, 0x04, 0xd7, 0xf4,
	0x6c, 0x67, 0x4b, 0x8d, 0x56, 0x4b, 0x03, 0x28, 0x55, 0x30, 0xc4, 0x87, 0x6e, 0x9a, 0xf8, 0xe6,
	0x5d, 0xf1, 0x69, 0xa1, 0x12, 0x46, 0x83, 0x52, 0xde, 0x7f, 0x35, 0xd3, 0x41, 0xfb, 0xcb, 0x96,
	0x3c, 0x93, 0xb0, 0xff, 0xe6, 0x7d, 0x20, 0x0d, 0xcb, 0xf5, 0xbf, 0xd7, 0xe0, 0xc2, 0xc5, 0x7a,
	0xcb, 0xf5, 0x98, 0xb3, 0xea, 0xf6, 0x7d, 0xa6, 0x9c, 0x87, 0x09, 0xe6, 0x1b, 0xff, 0x25, 0xef,
	0x28, 0x39, 0x07, 0x1e, 0x01, 0x22, 0x7c, 0x6e, 0x80, 0xd3, 0x23, 0xea, 0x5a, 0xff, 0x91, 0xad,
	0x16, 0x81, 0x30, 0x95, 0x86, 0x1a, 0x51, 0x18, 0x03, 0x99, 0x2e, 0x74, 0x94, 0xd2, 0x84, 0x1a,
	0xfa, 0x67, 0x34, 0x78, 0x2a, 0xf8, 0xec, 0x57, 0xe9, 0xc7, 0xea, 0xff, 0x90, 0x83, 0xe2, 0xa5,
	0xe5, 0xe5, 0xf2, 0x45, 0xe6, 0x75, 0x9d, 0xb5, 0xe9, 0xae, 0x82, 0x4b, 0x8a, 0xd7, 0xcf, 0xe4,
	0x73, 0xcf, 0xa6, 0x4a, 0x89, 0x2d, 0xcf, 0xac, 0x4f, 0x8b, 0xf0, 0xfa, 0xd3, 0x25, 0xcb, 0xbb,
	0xe6, 0x54, 0x3c, 0xc7, 0xb4, 0xd6, 0x3a, 0x56, 0x81, 0x2f, 0xc0, 0xe5, 0x93, 0x04, 0x38, 0x32,
	0x0b, 0xa3, 0x6e, 0x75, 0x9d, 0x35, 0xfc, 0x01, 0x79, 0x2d, 0x5e, 0x18, 0x10, 0x72, 0xaf, 0x5d,
	0x3c, 0x96, 0x14, 0x98, 0x9c, 0x96, 0x44, 0x39, 0x95, 0x35, 0xf9, 0xe9, 0x33, 0xb9, 0xee, 0x79,
	0xcd, 0x4b, 0xcc, 0xa8, 0x31, 0xc7, 0xdf, 0xd3, 0xdf, 0x9a, 0x6d, 0x4f, 0xe7, 0x9d, 0x26, 0x1a,
	0x48, 0xd2, 0x49, 0xc9, 0x0d, 0x7c, 0x32, 0xc4, 0x72, 0xa9, 0x4a, 0x53, 0x7f, 0x27, 0x1c, 0xeb,
	0xd6, 0xc2, 0x7d, 0x1a, 0xee, 0xf5, 0x15, 0x78, 0x9c, 0x77, 0xda, 0x4c, 0xdd, 0x34, 0xb2, 0x38,
	0xb5, 0x9d, 0x83, 0x09, 0xdf, 0x6d, 0xcd, 0x95, 0x01, 0x2c, 0x71, 0x59, 0xfb, 0x5e, 0x6d, 0x2e,
	0x0d, 0xcb, 0xf5, 0xe7, 0x60, 0x4a, 0x3c, 0x68, 0xea, 0x9f, 0x80, 0xfe, 0x61, 0x0d, 0xce, 0xe0,
	0x7b, 0x2d, 0xc3, 0x5b, 0xef, 0xb1, 0x24, 0xba, 0xcf, 0xba, 0x37, 0xcb, 0x1b, 0x70, 0x2e, 0xf0,
	0x24, 0xf3, 0xa3, 0x95, 0x25, 0x39, 0x45, 0xfb, 0x24, 0xc3, 0x4b, 0xb2, 0xfe, 0xe1, 0x11, 0x78,
	0xa6, 0x54, 0xc9, 0x12, 0x44, 0xfb, 0x79, 0xd8, 0x23, 0xa4, 0x75, 0x3e, 0x59, 0x8d, 0xba, 0x64,
	0x0c, 0xf5, 0xd7, 0xcb, 0x0a, 0x9c, 0x46, 0xb0, 0xb8, 0x54, 0x6f, 0xde, 0xb2, 0xd4, 0x70, 0x2a,
	0xa5, 0x97, 0x97, 0x28, 0x87, 0xf9, 0x02, 0x7f, 0x3e, 0x41, 0xe0, 0x7f, 0x11, 0xf6, 0x99, 0x6e,
	0xd5, 0x35, 0x4b, 0x16, 0xdf, 0x3d, 0xc2, 0xfd, 0x47, 0xa8, 0x71, 0x38, 0xdb, 0x41, 0x09, 0x8d,
	0x61, 0x2a, 0xe7, 0xdf, 0x48, 0x5f, 0x97, 0x85, 0xae, 0x11, 0x1b, 0xf9, 0xa1, 0xd4, 0xc4, 0x2f,
	0x71, 0xd1, 0xe2, 0x28, 0x0f, 0x25, 0xf1, 0x71, 0x2e, 0xf5, 0xcb, 0xf8, 0xfd, 0xb5, 0xba, 0x6e,
	0x34, 0x67, 0x5a, 0xde, 0xfa, 0xbc, 0xe9, 0x56, 0xed, 0x4d, 0xe6, 0x6c, 0xa1, 0x6e, 0x64, 0x5c,
	0xdc, 0x5f, 0x03, 0xe0, 0xdc, 0xa5, 0x99, 0x32, 0xc7, 0xa2, 0x9d, 0xf8, 0xe4, 0x25, 0xd8, 0xef,
	0x03, 0x2b, 0xcc, 0xc5, 0x63, 0x48, 0x78, 0xf0, 0x4b, 0x1d, 0x2f, 0x82, 0x82, 0x06, 0xe2, 0xb8,
	0xd1, 0xdb, 0x03, 0x3c, 0xe8, 0xdb, 0xc3, 0x0b, 0xb0, 0xd7, 0xb4, 0x4c, 0xcf, 0x34, 0x3c, 0x5b,
	0x98, 0xcd, 0x27, 0xc3, 0x6d, 0xbc, 0xa4, 0x16, 0xd0, 0x28, 0x9e, 0xfe, 0x03, 0x23, 0xf0, 0x04,
	0x0e, 0xe9, 0xee, 0xfc, 0xfb, 0xd6, 0x9e, 0x7f, 0xd1, 0x5b, 0x0d, 0x3c, 0x94, 0x5b, 0xcd, 0xc0,
	0xb3, 0xd0, 0x83, 0xc7, 0xbb, 0x04, 0x63, 0xf1, 0xa3, 0x42, 0x69, 0x09, 0x51, 0xa1, 0x7a, 0x46,
	0xbb, 0x6d, 0x84, 0x81, 0x5a, 0xe2, 0x0e, 0xf3, 0x3f, 0x91, 0x83, 0xc7, 0xbb, 0xd8, 0xe7, 0xc8,
	0xfb, 0x60, 0xa2, 0x69, 0xe3, 0x53, 0x25, 0xc7, 0x7f, 0x5a, 0x58, 0x1e, 0xd0, 0xfa, 0x27, 0x12,
	0x16, 0x38, 0x69, 0xbd, 0x59, 0xf6, 0xc9, 0xd0, 0x90, 0x22, 0xb9, 0x0d, 0x63, 0x4d, 0x87, 0x55,
	0x3c, 0x0c, 0xe7, 0xbc, 0x33, 0xc4, 0xc5, 0x74, 0x16, 0x44, 0xa8, 0x4f, 0x4d, 0x7f, 0x25, 0x0f,
	0x7a, 0xef, 0xca, 0x64, 0x1d, 0x0a, 0xec, 0x0e, 0xab, 0xca, 0x9e, 0xc9, 0x28, 0xc1, 0x74, 0x53,
	0x84, 0x89, 0x81, 0xe2, 0x18, 0x14, 0x29, 0x10, 0x0f, 0xc6, 0xb8, 0xf8, 0x72, 0x91, 0xf9, 0x82,
	0xde, 0xd5, 0xec, 0xe2, 0x52, 0x17, 0x19, 0x53, 0x74, 0x83, 0x44, 0xa2, 0x3e, 0x29, 0x74, 0x88,
	0xaf, 0x36, 0x2b, 0xfc, 0xce, 0x3a, 0xa0, 0x65, 0x64, 0x79, 0xae, 0x2c, 0xaa, 0xa7, 0x52, 0x16,
	0x0e, 0xf1, 0x3e, 0x1a, 0x0d, 0x09, 0xea, 0xbf, 0x93, 0x87, 0x63, 0xe2, 0xd5, 0x80, 0x61, 0x25,
	0x3e, 0x90, 0xdf, 0x35, 0x7c, 0x0d, 0x6a, 0xf8, 0xaa, 0x43, 0xc1, 0x6d, 0xb2, 0xea, 0x60, 0x0f,
	0x1f, 0xc3, 0x31, 0xa9, 0x34, 0x59, 0x35, 0x6d, 0xf2, 0xf2, 0x32, 0x8a, 0x54, 0xf4, 0x5f, 0xde,
	0x0b, 0x27, 0xc3, 0x4a, 0x25, 0x8f, 0x35, 0x12, 0x7a, 0xe7, 0xbb, 0x23, 0xf1, 0x6f, 0xcf, 0x2a,
	0x12, 0x65, 0xd2, 0xad, 0x02, 0x9b, 0x53, 0x6c, 0x2e, 0xbf, 0xae, 0x41, 0xbe, 0x61, 0xdc, 0x91,
	0xbe, 0xfa, 0x37, 0x07, 0xfd, 0xa0, 0x64, 0xde, 0xa6, 0xaf, 0x1a, 0x77, 0x84, 0x66, 0xe8, 0x2a,
	0xdf, 0x79, 0xaf, 0x1a, 0x77, 0x86, 0xf4, 0x3e, 0x90, 0xb3, 0x2c, 0x58, 0x37, 0x2d, 0xe9, 0x09,
	0x3e, 0x74, 0xd6, 0x4d, 0x4b, 0x65, 0xdd, 0xb4, 0x86, 0xc6, 0xba, 0x69, 0x91, 0x2f, 0x6b, 0x30,
	0x26, 0x9f, 0x28, 0xc9, 0x50, 0xa3, 0xef, 0x18, 0x32, 0xfb, 0xf2, 0x35, 0x94, 0xf8, 0x84, 0x97,
	0xf9, 0x26, 0x25, 0x21, 0x43, 0xfa, 0x0c, 0x9f, 0x7d, 0xf2, 0x97, 0x1a, 0xec, 0x93, 0xbf, 0x29,
	0xbb, 0xd5, 0x62, 0xae, 0x27, 0xef, 0xa5, 0x2b, 0x3b, 0xf3, 0x45, 0x92, 0x88, 0xf8, 0xb0, 0xb7,
	0x71, 0xb1, 0x2e, 0x5a, 0x30, 0xa4, 0xef, 0x8b, 0x7d, 0x13, 0xf9, 0x27, 0x0d, 0x1e, 0x69, 0x18,
	0x77, 0x04, 0x97, 0x02, 0x46, 0x39, 0x5f, 0xd2, 0x89, 0x72, 0x7d, 0xf8, 0x0b, 0xa7, 0x83, 0x94,
	0xf8, 0xe4, 0x77, 0x6d, 0xb7, 0x8b, 0x8f, 0x24, 0x15, 0x0f, 0xe9, 0xc3, 0x13, 0xbf, 0xf2, 0xe8,
	0x2a, 0x8c, 0xfb, 0x6b, 0x79, 0x27, 0x5f, 0xba, 0x22, 0x1d, 0xb9, 0xf0, 0x76, 0x94, 0xce, 0x7b,
	0x60, 0x8f, 0xba, 0x42, 0x76, 0x94, 0xd6, 0x2d, 0x38, 0x94, 0x30, 0x77, 0x77, 0x94, 0xe4, 0x6d,
	0x38, 0x92, 0x3a, 0x83, 0x76, 0xf4, 0xa5, 0xf2, 0x4f, 0x6b, 0xea, 0x89, 0x95, 0x7c, 0xcc, 0x91,
	0x4d, 0x18, 0xad, 0x73, 0x1c, 0xff, 0xb1, 0xda, 0xd2, 0x70, 0x17, 0xcf, 0xec, 0x3e, 0x29, 0x6f,
	0x8c, 0x22, 0xa6, 0x4b, 0x25, 0x35, 0xfd, 0x73, 0x39, 0x38, 0x7d, 0xc5, 0x36, 0x6a, 0xb3, 0x46,
	0xdd, 0xb0, 0xaa, 0xcc, 0x29, 0x59, 0x6b, 0x3b, 0xf6, 0x78, 0xf2, 0x32, 0x8c, 0x9a, 0x4d, 0x25,
	0x13, 0xdf, 0xeb, 0x39, 0x3f, 0xa5, 0xb2, 0x4c, 0xc2, 0x77, 0x3a, 0xe9, 0x64, 0x56, 0x39, 0x43,
	0x44, 0x2a, 0x9b, 0x20, 0xb6, 0xef, 0xb1, 0x5d, 0x18, 0x44, 0xe3, 0xc7, 0xef, 0x9c, 0x69, 0xef,
	0xfb, 0x53, 0x5e, 0xb0, 0x7d, 0x56, 0x83, 0x27, 0x55, 0x7e, 0x52, 0xa3, 0x53, 0xbc, 0x1f, 0xc6,
	0x4c, 0xd1, 0x8b, 0x72, 0x2c, 0x2b, 0x59, 0xef, 0x8d, 0x7d, 0x0c, 0x47, 0x68, 0x57, 0x92, 0x28,
	0xd4, 0x27, 0xaa, 0x2f, 0x42, 0x9f, 0x71, 0x41, 0xbb, 0x2b, 0x26, 0xf5, 0x35, 0x78, 0x02, 0xdb,
	0xb9, 0x2f, 0xdd, 0x5e, 0x1f, 0x06, 0x1c, 0xfd, 0x13, 0x1a, 0x9c, 0x5a, 0xea, 0x99, 0xb2, 0x45,
	0x47, 0x5f, 0x95, 0x98, 0xbd, 0xb2, 0x82, 0x10, 0x2a, 0x4b, 0x86, 0xa6, 0x49, 0xff, 0x52, 0x01,
	0x1e, 0x0f, 0x94, 0xff, 0xbb, 0x97, 0x85, 0x21, 0x5e, 0x16, 0x36, 0x22, 0x97, 0x85, 0x8c, 0x17,
	0xcf, 0x60, 0x48, 0xfa, 0xbb, 0x2b, 0x10, 0x37, 0xc8, 0x5d, 0x31, 0xd0, 0x03, 0xec, 0x90, 0x5c,
	0xda, 0x4e, 0x01, 0x61, 0x32, 0x0c, 0x3f, 0xcd, 0x85, 0x7e, 0x2f, 0x07, 0x4f, 0x06, 0x35, 0x87,
	0x97, 0xa4, 0xa3, 0xb3, 0xc9, 0x1d, 0x49, 0xd2, 0xe1, 0x00, 0x41, 0xff, 0x35, 0xc7, 0xb0, 0x5c,
	0x41, 0xc5, 0x6c, 0xf8, 0x31, 0x6d, 0xb2, 0x38, 0xc6, 0xa1, 0x71, 0xed, 0x4a, 0x47, 0x4b, 0x34,
	0xa1, 0xf5, 0x21, 0xfa, 0x2a, 0xea, 0x2d, 0x28, 0xf6, 0x98, 0x24, 0x84, 0x62, 0x9c, 0x25, 0xa3,
	0x6e, 0xde, 0x65, 0x41, 0xf2, 0xa7, 0xe7, 0x64, 0xec, 0x24, 0x09, 0x4d, 0x89, 0x6b, 0x10, 0x20,
	0x88, 0xd4, 0xa0, 0x61, 0x2b, 0xfa, 0xff, 0xe2, 0x3b, 0x58, 0xaf, 0xd9, 0xc2, 0x45, 0x8a, 0xe6,
	0xba, 0xe1, 0x32, 0x25, 0x90, 0xc2, 0x48, 0x99, 0x03, 0xa2, 0x11, 0xcd, 0x3b, 0x87, 0x1c, 0x91,
	0xa8, 0xa8, 0x1c, 0x4f, 0xcf, 0x91, 0x1b, 0x24, 0x3d, 0x47, 0x3f, 0xf3, 0xb3, 0x67, 0x7a, 0x8e,
	0x8f, 0x6a, 0x70, 0x1c, 0x13, 0x35, 0xa7, 0xc6, 0x5b, 0x98, 0x8d, 0xcc, 0xf0, 0x69, 0x65, 0x86,
	0x27, 0x4d, 0x49, 0xa5, 0x2d, 0x65, 0x6a, 0x9f, 0x86, 0x31, 0xf9, 0xa6, 0x5e, 0x35, 0xa4, 0x4b,
	0x3c, 0xea, 0x97, 0xe9, 0x1f, 0x29, 0xc0, 0x89, 0xee, 0x99, 0xa5, 0xc9, 0x5f, 0x6b, 0x30, 0xed,
	0x88, 0x77, 0x44, 0xb5, 0xf9, 0x96, 0x63, 0x5a, 0x6b, 0x95, 0xea, 0x3a, 0xab, 0xb5, 0xea, 0xa6,
	0xb5, 0x56, 0x5a, 0xb3, 0xec, 0x00, 0xbc, 0x70, 0x87, 0x55, 0x5b, 0xca, 0x46, 0x3e, 0x40, 0x82,
	0xeb, 0x2e, 0x0f, 0x1a, 0xf9, 0x5c, 0x9b, 0xa6, 0x99, 0xf8, 0xa0, 0x19, 0xf9, 0x26, 0xf7, 0x34,
	0x38, 0xdf, 0x74, 0xf8, 0xc9, 0xdf, 0xff, 0xb7, 0x0e, 0xa4, 0xed, 0x28, 0xfb, 0x44, 0xc2, 0xe6,
	0x97, 0x99, 0x93, 0x24, 0x80, 0xbe, 0x20, 0x67, 0xd3, 0xf9, 0x72, 0x36, 0xbe, 0x68, 0xd6, 0x0f,
	0xd1, 0xff, 0x6d, 0x01, 0x1e, 0xc5, 0xa9, 0xb0, 0x7b, 0x6e, 0x0f, 0xef, 0xdc, 0x5e, 0x8d, 0x9c,
	0xdb, 0x97, 0x06, 0x58, 0x11, 0xfd, 0x1d, 0xd9, 0x56, 0xec, 0xc8, 0x7e, 0xeb, 0x00, 0x94, 0xb2,
	0x9c, 0xd6, 0xdf, 0xcc, 0x43, 0x51, 0xe6, 0xb4, 0x48, 0x3d, 0xa8, 0xe7, 0x23, 0xdb, 0xd8, 0xb3,
	0xca, 0x36, 0xf6, 0x64, 0xca, 0x36, 0xb6, 0xb3, 0x67, 0xb4, 0x0d, 0x07, 0xf9, 0x29, 0x7a, 0x89,
	0x19, 0x8e, 0xb7, 0xc2, 0x0c, 0x6f, 0xc0, 0x23, 0x1a, 0x6d, 0x69, 0x57, 0xe2, 0x0d, 0xd1, 0xce,
	0xb6, 0x53, 0x84, 0x82, 0xc2, 0x03, 0x12, 0x0a, 0x46, 0xfa, 0x11, 0x0a, 0x46, 0xbb, 0x08, 0x05,
	0xbf, 0xa8, 0x81, 0xde, 0x47, 0xde, 0x92, 0x0f, 0x69, 0x30, 0x11, 0xbc, 0x73, 0x97, 0x7b, 0xc1,
	0xa0, 0xf9, 0x86, 0x7a, 0x93, 0xf3, 0xdd, 0x9e, 0xfd, 0xd8, 0x13, 0x21, 0x69, 0xfd, 0x3f, 0xe7,
	0x23, 0xfc, 0xa6, 0x89, 0x13, 0x77, 0x61, 0xdc, 0x70, 0x5d, 0x73, 0xcd, 0x62, 0xb5, 0xc1, 0xcc,
	0x69, 0x7d, 0x30, 0x89, 0x17, 0xa4, 0x19, 0x49, 0x85, 0x06, 0xf4, 0x88, 0x27, 0xfc, 0xf8, 0x37,
	0xd9, 0x60, 0xb6, 0xb4, 0x3e, 0x28, 0x07, 0x2f, 0x03, 0x36, 0x19, 0x95, 0xb4, 0xf0, 0x31, 0x29,
	0x9f, 0x2a, 0x97, 0x2d, 0xfb, 0xb6, 0x75, 0xd1, 0xb6, 0xfd, 0xb0, 0xaa, 0xc3, 0xa7, 0x1e, 0xbc,
	0xeb, 0x08, 0x48, 0xd1, 0x28, 0xe5, 0xde, 0x69, 0xea, 0x7e, 0x4d, 0x83, 0xd3, 0x9c, 0x52, 0x34,
	0x4a, 0x5d, 0xd2, 0x40, 0x7e, 0x4c, 0x83, 0xfd, 0x32, 0x73, 0x8c, 0x8f, 0x26, 0x07, 0x34, 0xa3,
	0x16, 0xa8, 0x57, 0x40, 0x3c, 0x61, 0xfb, 0xbe, 0x1c, 0x25, 0x45, 0xe3, 0xb4, 0xf5, 0xdf, 0xd0,
	0x84, 0x2c, 0xd5, 0x25, 0x6f, 0xd2, 0x4f, 0x61, 0x70, 0xa3, 0x10, 0x85, 0x1f, 0xfa, 0xbe, 0xba,
	0xa3, 0x3c, 0xb8, 0xb8, 0x94, 0x22, 0x3b, 0x28, 0xd1, 0x8d, 0x62, 0x24, 0x69, 0x27, 0x17, 0xfa,
	0x6f, 0x6a, 0xf0, 0xb4, 0x8a, 0xa8, 0xbc, 0x1d, 0xcf, 0x66, 0x0c, 0xaf, 0xc0, 0xb8, 0xdd, 0x64,
	0x8e, 0xe1, 0xd9, 0x8e, 0xdc, 0xb3, 0x5f, 0x10, 0xb9, 0x46, 0x04, 0xec, 0x5e, 0xbb, 0xf8, 0x54,
	0xca, 0xfe, 0xef, 0x93, 0xf6, 0x51, 0x69, 0xd0, 0x10, 0xdf, 0xd7, 0x50, 0x35, 0xe8, 0xca, 0xe8,
	0x06, 0x38, 0xcf, 0xd1, 0xdf, 0xcb, 0xa5, 0xb2, 0x44, 0xff, 0xa3, 0x9c, 0xd8, 0x00, 0xba, 0x77,
	0x0b, 0xf9, 0xb4, 0x06, 0x07, 0x1a, 0x86, 0x57, 0x5d, 0x5f, 0xb8, 0xd3, 0x74, 0x84, 0xdf, 0x82,
	0x3f, 0x06, 0x37, 0x07, 0x1f, 0x83, 0xae, 0xdd, 0x15, 0xa6, 0xa1, 0xbe, 0x1a, 0x23, 0x4c, 0x3b,
	0x58, 0x21, 0x1f, 0xd7, 0x60, 0x12, 0x81, 0x18, 0xcc, 0xc4, 0x1d, 0x4c, 0xc2, 0xec, 0x9f, 0xb5,
	0xc0, 0x51, 0xef, 0x6a, 0x48, 0x93, 0xaa, 0x0c, 0xe8, 0x1f, 0x2a, 0xc0, 0xd1, 0x74, 0x59, 0x44,
	0xb8, 0xa7, 0xd4, 0xe6, 0x4a, 0xf3, 0x54, 0x4e, 0x07, 0xe9, 0x9e, 0x82, 0x20, 0xea, 0x97, 0x91,
	0xb3, 0x30, 0x2e, 0x7f, 0xfa, 0x7e, 0x75, 0xb8, 0x4b, 0x4a, 0x3c, 0x97, 0x06, 0xa5, 0x64, 0x1a,
	0xa0, 0xe9, 0xd8, 0x9b, 0x66, 0x0d, 0xe3, 0x9d, 0xe6, 0x43, 0x9f, 0xdd, 0x72, 0x00, 0xa5, 0x0a,
	0x06, 0x79, 0x01, 0xf6, 0xb6, 0x2c, 0x57, 0xc8, 0xb7, 0x98, 0x9a, 0x4f, 0x78, 0x28, 0xe3, 0x66,
	0x74, 0x5d, 0x2d, 0xa0, 0x51, 0x3c, 0xd2, 0x80, 0x51, 0xcf, 0x40, 0x7f, 0x53, 0x61, 0x67, 0xca,
	0xf8, 0x9e, 0x7b, 0xd9, 0x48, 0xde, 0x2e, 0x02, 0xa5, 0x31, 0x22, 0xb8, 0x54, 0x12, 0xe1, 0x27,
	0xa5, 0x8c, 0x9a, 0x54, 0x51, 0x1f, 0x06, 0x0e, 0x7f, 0x1b, 0x56, 0xa2, 0x35, 0xc9, 0x37, 0x82,
	0x11, 0xba, 0xe4, 0x8d, 0x00, 0xec, 0x8e, 0xc7, 0x1c, 0xcb, 0xa8, 0x07, 0xb1, 0x67, 0x51, 0xc8,
	0x98, 0xb7, 0x97, 0x6c, 0xef, 0xba, 0xcb, 0x16, 0x82, 0x52, 0xaa, 0x60, 0xea, 0x7f, 0xb0, 0x17,
	0x8e, 0x75, 0x13, 0x15, 0xc9, 0x97, 0x35, 0x18, 0xaf, 0x1a, 0x4d, 0xa3, 0x6a, 0x7a, 0x5b, 0x72,
	0x49, 0xbd, 0x6d, 0x78, 0x92, 0x28, 0x66, 0x0a, 0xe7, 0x4d, 0x0b, 0xf3, 0x15, 0xe5, 0xd3, 0xc7,
	0x07, 0x0d, 0xc9, 0x64, 0x15, 0x70, 0x4f, 0xbe, 0xa6, 0xc1, 0xa4, 0x0c, 0x1d, 0x8b, 0x73, 0x2a,
	0x37, 0x88, 0x6d, 0xb5, 0xeb, 0xd7, 0xcc, 0x84, 0xad, 0x8b, 0x0f, 0xba, 0x8e, 0x01, 0xfc, 0x42,
	0xe8, 0x90, 0xbe, 0x49, 0xfd, 0x0c, 0xf2, 0x66, 0x5f, 0x99, 0x22, 0x96, 0xd5, 0xd3, 0xaa, 0x32,
	0xe5, 0x58, 0xca, 0xb6, 0x1c, 0xd1, 0xa3, 0x7c, 0x30, 0xaa, 0x47, 0x29, 0x0c, 0x12, 0x82, 0xa5,
	0xc7, 0xcd, 0xa1, 0x97, 0x0a, 0x85, 0xbc, 0x57, 0x8d, 0x52, 0x38, 0x32, 0x48, 0x84, 0x8e, 0xae,
	0x0a, 0x98, 0x1e, 0x11, 0x0a, 0x3f, 0xa9, 0xc1, 0xfe, 0x5a, 0x54, 0x3a, 0x91, 0x2b, 0xb9, 0x92,
	0x9d, 0x89, 0x9e, 0x62, 0x8e, 0x10, 0x3e, 0x62, 0x68, 0x34, 0xce, 0x00, 0xb9, 0x23, 0x22, 0x6c,
	0x96, 0xac, 0x55, 0x5b, 0x3e, 0xfb, 0x5d, 0x1a, 0x60, 0xaa, 0x6e, 0xb9, 0x1e, 0x6b, 0xf0, 0x36,
	0xd2, 0x64, 0xda, 0x25, 0x49, 0x83, 0x06, 0xd4, 0xc8, 0x26, 0x8c, 0x62, 0xe8, 0x03, 0x57, 0x06,
	0xc6, 0x19, 0x34, 0x84, 0x77, 0x4a, 0x0a, 0x8e, 0x70, 0x37, 0x45, 0x04, 0x97, 0x4a, 0x6a, 0xe4,
	0x1d, 0x7e, 0xa4, 0x16, 0xb7, 0x64, 0x5d, 0x77, 0xd9, 0xd4, 0x04, 0x9e, 0x29, 0x2f, 0x84, 0x81,
	0x55, 0x04, 0xfc, 0x5e, 0xbb, 0xf8, 0x44, 0x92, 0x4b, 0xbc, 0x65, 0xde, 0x6a, 0x31, 0x81, 0x28,
	0x52, 0x42, 0xa8, 0x8d, 0x91, 0x1f, 0xd3, 0x60, 0xbf, 0x04, 0xcc, 0x78, 0x9e, 0xc1, 0xcf, 0x0c,
	0x19, 0x02, 0x27, 0xe3, 0xe7, 0xf9, 0xb5, 0x05, 0xa5, 0xa4, 0x18, 0x04, 0xf2, 0xf3, 0xf6, 0xdf,
	0x88, 0x92, 0xa3, 0x71, 0xfa, 0xfc, 0xf2, 0x20, 0x88, 0xc8, 0x07, 0xcd, 0x83, 0x9f, 0x1b, 0x5d,
	0x6f, 0xfa, 0x02, 0x44, 0x25, 0xad, 0xa3, 0x1b, 0xb0, 0x37, 0xb2, 0xed, 0xee, 0xa8, 0xb1, 0xd9,
	0x82, 0x03, 0xf1, 0x5d, 0x71, 0x47, 0x6d, 0xcc, 0xbf, 0x5f, 0x80, 0x93, 0xbd, 0x26, 0x3e, 0x39,
	0x07, 0x13, 0xb2, 0xd9, 0x20, 0xbf, 0x3c, 0x5e, 0x42, 0xaf, 0xfa, 0x40, 0x1a, 0x96, 0x73, 0xd9,
	0xc5, 0xc5, 0xc6, 0x94, 0x37, 0x60, 0x28, 0xbb, 0x54, 0x02, 0x28, 0x55, 0x30, 0xb8, 0x5c, 0xbb,
	0x62, 0xdb, 0x5e, 0x20, 0xe7, 0xe0, 0x10, 0xcc, 0x22, 0x84, 0xca, 0x12, 0x2e, 0xdf, 0x6c, 0x30,
	0xc7, 0x62, 0xf5, 0x68, 0x32, 0x4e, 0x94, 0x6f, 0x2e, 0xab, 0x05, 0x34, 0x8a, 0xc7, 0x25, 0x33,
	0xdb, 0xc5, 0x65, 0xa3, 0x6a, 0xff, 0xaf, 0x55, 0x44, 0xe0, 0x30, 0xbf, 0x8c, 0x5c, 0x87, 0xc7,
	0x82, 0xe0, 0xf1, 0xb4, 0x65, 0x79, 0x66, 0x23, 0x48, 0xfb, 0x29, 0xf4, 0x03, 0x8f, 0x6f, 0xb7,
	0x8b, 0x8f, 0xcd, 0x25, 0xa3, 0xd0, 0xb4, 0xba, 0xe4, 0x45, 0xd8, 0x27, 0xaf, 0x48, 0x7e, 0x6b,
	0x63, 0xa1, 0x03, 0xf5, 0xe5, 0x48, 0x09, 0x8d, 0x61, 0xfa, 0x29, 0x44, 0xcb, 0x8e, 0x7d, 0x67,
	0xcb, 0xaf, 0x3d, 0x1e, 0x4d, 0x21, 0xaa, 0x96, 0xd1, 0x0e, 0x6c, 0xf2, 0x12, 0xec, 0x17, 0x97,
	0x07, 0xd3, 0x5a, 0x13, 0x7d, 0x8f, 0x8e, 0xcc, 0x32, 0x87, 0xe9, 0xb5, 0x68, 0x11, 0x8d, 0xe3,
	0x92, 0xe7, 0x61, 0x8f, 0xe1, 0x54, 0xd7, 0x4d, 0x8f, 0x55, 0xbd, 0x96, 0xe3, 0x87, 0x19, 0x40,
	0xc1, 0x6a, 0x46, 0x81, 0xd3, 0x08, 0x96, 0xfe, 0x83, 0x1a, 0x9c, 0xee, 0x2b, 0xa2, 0x22, 0x9f,
	0x27, 0x46, 0xd3, 0xf4, 0x3f, 0x4d, 0x79, 0x97, 0x36, 0x53, 0x2e, 0xf9, 0x1f, 0xa5, 0x60, 0xf0,
	0x49, 0x88, 0x51, 0x17, 0xcb, 0xa1, 0x9d, 0x16, 0x27, 0xe1, 0xa2, 0x0f, 0xa4, 0x61, 0xb9, 0xfe,
	0xd7, 0x39, 0x38, 0xd5, 0x97, 0x19, 0x7b, 0xc3, 0xb4, 0x6a, 0xaa, 0x05, 0xfa, 0xb2, 0x69, 0xd5,
	0x28, 0x42, 0xa3, 0xe9, 0x68, 0x73, 0x7d, 0xa6, 0xa3, 0xcd, 0x77, 0x4b, 0x47, 0x5b, 0x18, 0x34,
	0x1d, 0x6d, 0xb4, 0xaf, 0x46, 0x7a, 0xf6, 0x55, 0x42, 0xfa, 0xda, 0xd1, 0x0c, 0xe9, 0x6b, 0x23,
	0x5d, 0x3d, 0xd6, 0xa3, 0xab, 0xff, 0xa0, 0x00, 0x7a, 0xfc, 0xf9, 0xcc, 0xae, 0x06, 0x7d, 0x88,
	0x1a, 0x74, 0x27, 0xa2, 0x41, 0x5f, 0xbe, 0xbf, 0x80, 0x40, 0x7d, 0x6a, 0xd3, 0xef, 0xc6, 0xb4,
	0xe9, 0x37, 0xee, 0x93, 0x6a, 0x16, 0xcd, 0xfa, 0x9f, 0x15, 0xe0, 0xa9, 0xc4, 0x38, 0x46, 0xbb,
	0xb3, 0x6a, 0x88, 0xb3, 0xea, 0x76, 0x64, 0x56, 0xbd, 0x7d, 0x08, 0x61, 0xa6, 0xfa, 0x9c, 0x5a,
	0xff, 0x5f, 0x6c, 0x6a, 0xbd, 0x63, 0x18, 0xa4, 0xb3, 0xcc, 0xaf, 0x7f, 0xcc, 0xc3, 0xb3, 0x89,
	0xad, 0x74, 0x33, 0xe5, 0x5c, 0x8f, 0x98, 0x72, 0x66, 0x14, 0x53, 0xce, 0x1b, 0x92, 0xa2, 0xa2,
	0x75, 0x6d, 0x7e, 0x47, 0x6c, 0x3b, 0x32, 0x26, 0x11, 0xc6, 0xcb, 0x1b, 0xd0, 0xae, 0x13, 0xe8,
	0xae, 0x83, 0x46, 0x68, 0xb4, 0xcd, 0x6f, 0x75, 0x7b, 0xce, 0x3f, 0x8e, 0xc2, 0xb9, 0x0c, 0x53,
	0x97, 0xac, 0xc0, 0xa4, 0x51, 0xad, 0x32, 0xd7, 0xbd, 0x6a, 0xd7, 0x82, 0x0c, 0x88, 0x6f, 0x41,
	0x1d, 0x45, 0x08, 0xbe, 0xd7, 0x2e, 0x3e, 0xd3, 0xc7, 0x14, 0x08, 0x6b, 0x50, 0xb5, 0x51, 0x72,
	0x1b, 0xc6, 0x5d, 0x29, 0x24, 0x65, 0x7b, 0x54, 0xe3, 0x77, 0xe8, 0x15, 0x63, 0x85, 0xd5, 0x7b,
	0x45, 0xae, 0x0e, 0x14, 0xa1, 0x01, 0xb1, 0x58, 0x90, 0xd5, 0xfc, 0x43, 0x09, 0xb2, 0x3a, 0x0d,
	0xb0, 0x19, 0x5c, 0x40, 0xa5, 0x78, 0x84, 0x72, 0x8d, 0x72, 0x2d, 0x55, 0x30, 0xb8, 0x50, 0xec,
	0x8a, 0x1c, 0x21, 0x73, 0x75, 0xc3, 0xc5, 0xf7, 0xf0, 0x6a, 0x5e, 0xfd, 0x4a, 0xac, 0x8c, 0x76,
	0x60, 0x93, 0xb7, 0xfb, 0x14, 0xd1, 0x9d, 0x54, 0x4c, 0x96, 0xef, 0x0c, 0x29, 0x4a, 0x97, 0xd2,
	0xa7, 0xfa, 0x18, 0x50, 0x1c, 0x4a, 0xa5, 0x31, 0xf2, 0xc3, 0x1a, 0x00, 0xdf, 0x5a, 0xa5, 0x6a,
	0x73, 0x6c, 0x90, 0x8d, 0x95, 0x6f, 0x0d, 0xb5, 0x3e, 0xdf, 0xff, 0x61, 0x47, 0xcd, 0x07, 0x04,
	0xa9, 0x42, 0x9c, 0x7c, 0x4c, 0x83, 0xbd, 0xe1, 0x5f, 0xca, 0x56, 0x65, 0x88, 0xb2, 0xe5, 0x01,
	0xd8, 0xe9, 0xcd, 0x09, 0x6e, 0x1c, 0xf3, 0x2a, 0x39, 0x1a, 0xa5, 0xae, 0xff, 0xda, 0x24, 0x3c,
	0x93, 0x69, 0xe7, 0x26, 0xe5, 0xa8, 0xcf, 0xd3, 0x8b, 0xaa, 0x9a, 0xee, 0x99, 0x7e, 0xb7, 0xdc,
	0x88, 0xde, 0x2e, 0xb6, 0x9a, 0x73, 0x3b, 0xb1, 0x9a, 0xbf, 0xae, 0xaa, 0x7f, 0xc5, 0x5b, 0x1a,
	0x73, 0x07, 0xcf, 0xb7, 0x07, 0xaa, 0x0f, 0xfe, 0x64, 0x92, 0xde, 0xf3, 0x5d, 0x43, 0xf8, 0xba,
	0xfb, 0x51, 0x84, 0x7e, 0x30, 0x97, 0x98, 0xc0, 0x4d, 0xa8, 0x44, 0xdd, 0x9d, 0xec, 0xfa, 0x57,
	0x4f, 0x32, 0xb7, 0x5f, 0xc8, 0xc1, 0x91, 0x0e, 0xb0, 0xe0, 0x9b, 0xf9, 0x81, 0xc9, 0xef, 0x3e,
	0xd0, 0xae, 0xf0, 0x89, 0x8b, 0x1e, 0xb1, 0xe4, 0x18, 0x1e, 0x49, 0xc5, 0xeb, 0xe3, 0xcb, 0x3f,
	0xfa, 0xe7, 0xc5, 0x33, 0x49, 0xe2, 0x10, 0x67, 0x2c, 0xda, 0x1c, 0x4d, 0xef, 0x8c, 0x07, 0xab,
	0xcb, 0x7b, 0x38, 0x09, 0xee, 0x8e, 0x5e, 0x81, 0x13, 0xdd, 0x07, 0x24, 0x53, 0xc0, 0xa8, 0x5f,
	0xcd, 0xc1, 0xf9, 0x8c, 0x51, 0x65, 0xa3, 0xd7, 0x1c, 0xed, 0x55, 0x71, 0xcd, 0xc9, 0x3d, 0xe0,
	0x6b, 0x8e, 0xfe, 0x23, 0x1a, 0xbc, 0x3e, 0xb1, 0x7e, 0x8f, 0xd7, 0x0a, 0xe7, 0x60, 0xa2, 0xca,
	0xd1, 0x94, 0xf8, 0x56, 0xc2, 0xe1, 0xc7, 0x07, 0xd2, 0xb0, 0x3c, 0xf2, 0x30, 0x21, 0xd7, 0xf5,
	0x61, 0xc2, 0xd7, 0x1e, 0x83, 0xb3, 0x7d, 0x07, 0x39, 0xf9, 0x8c, 0x06, 0x07, 0xd7, 0xaa, 0x2c,
	0x1a, 0x94, 0x6b, 0xb0, 0x80, 0xc4, 0x19, 0x63, 0x7b, 0x09, 0xdf, 0xb2, 0x8e, 0x4a, 0xb4, 0x93,
	0x1d, 0xf2, 0x4b, 0x1a, 0x3c, 0x62, 0xdc, 0x76, 0x17, 0xf8, 0x95, 0xc1, 0xac, 0xce, 0xd6, 0xed,
	0xea, 0x06, 0x97, 0xff, 0xfc, 0x05, 0xf4, 0xee, 0x8c, 0x56, 0x8a, 0x9b, 0x95, 0x8e, 0x96, 0x7a,
	0xb0, 0x8a, 0x99, 0x55, 0x93, 0xea, 0xd1, 0x44, 0xbe, 0xc8, 0xfb, 0x65, 0xe6, 0x72, 0xc3, 0x5b,
	0x1f, 0x4c, 0xdc, 0xee, 0x2f, 0x66, 0x8e, 0x92, 0x0f, 0xdd, 0xf0, 0xd6, 0x69, 0x40, 0x93, 0xfc,
	0x88, 0x06, 0x13, 0x6b, 0x7e, 0x28, 0x2a, 0x79, 0x69, 0xfb, 0xbe, 0x8c, 0xa3, 0x99, 0x35, 0x80,
	0x97, 0x98, 0xbb, 0x41, 0x35, 0x1a, 0x32, 0x40, 0xde, 0x03, 0x79, 0x6b, 0xd5, 0x95, 0x99, 0x90,
	0xb3, 0x3e, 0xb0, 0xe8, 0xf5, 0xe8, 0x47, 0x38, 0xe4, 0x2c, 0x2d, 0x56, 0x28, 0x27, 0x42, 0x3c,
	0xc8, 0x3b, 0x2b, 0x35, 0x69, 0xa3, 0xcc, 0xb8, 0x09, 0xd0, 0xd9, 0xf9, 0xbe, 0xbf, 0x16, 0xa9,
	0xd2, 0xd9, 0x79, 0xca, 0xc9, 0x91, 0xf7, 0xc2, 0x08, 0x46, 0x45, 0x91, 0x57, 0x81, 0x8c, 0x8a,
	0x8e, 0x4c, 0x71, 0x89, 0x64, 0x3a, 0x14, 0x5e, 0x85, 0x0a, 0xa2, 0xe4, 0x03, 0x1a, 0x8c, 0x56,
	0x4d, 0xab, 0xc6, 0x1c, 0x29, 0xfb, 0x7f, 0x6f, 0x46, 0xb3, 0x24, 0xd6, 0xed, 0x9b, 0x01, 0x61,
	0x39, 0xc3, 0x3a, 0x54, 0xd2, 0x15, 0x2c, 0xb0, 0xe6, 0xfa, 0xaa, 0x9f, 0xc4, 0x23, 0x2b, 0x0b,
	0xac, 0xb9, 0xbe, 0x58, 0xc9, 0xc8, 0x02, 0xd6, 0xa1, 0x92, 0x2e, 0x59, 0x85, 0xdc, 0x6a, 0x55,
	0x86, 0x61, 0xc9, 0x68, 0xb8, 0xec, 0x15, 0xdb, 0x55, 0x3c, 0x66, 0x5c, 0x9c, 0xa3, 0xb9, 0xd5,
	0x2a, 0xb9, 0x0b, 0x63, 0xab, 0x22, 0xac, 0xa2, 0xb4, 0x4d, 0x56, 0xb2, 0x46, 0x87, 0xec, 0x23,
	0x26, 0xa3, 0x50, 0x6b, 0x48, 0x54, 0xea, 0x13, 0x24, 0x1f, 0xd5, 0x00, 0x56, 0x83, 0xe8, 0x92,
	0x32, 0x22, 0xf3, 0xf7, 0xec, 0x5c, 0x2c, 0x52, 0x99, 0x31, 0x3c, 0xa0, 0x48, 0x15, 0xea, 0xb8,
	0xcb, 0x18, 0x77, 0x5b, 0x0e, 0x66, 0x22, 0xc5, 0x60, 0xcd, 0x99, 0x77, 0x99, 0x19, 0xbf, 0x7a,
	0xb6, 0x5d, 0x26, 0xa8, 0x46, 0x43, 0x06, 0xc8, 0xa7, 0x34, 0xd8, 0xbb, 0xe9, 0x36, 0xd7, 0x99,
	0xbf, 0x9d, 0xcb, 0xd0, 0xd0, 0x19, 0xef, 0x2d, 0x37, 0x64, 0x13, 0xa6, 0xe3, 0xb5, 0x8c, 0x7a,
	0x1f, 0xe7, 0x18, 0x5e, 0x89, 0x6f, 0xa8, 0x84, 0x69, 0x94, 0x0f, 0x3e, 0x63, 0x6e, 0xb5, 0xec,
	0x95, 0x2d, 0xcf, 0x4f, 0xe6, 0x91, 0x71, 0xc6, 0xbc, 0x2c, 0x2a, 0xf7, 0x33, 0x63, 0x24, 0x2a,
	0xf5, 0x09, 0x92, 0x57, 0xfc, 0x41, 0xc2, 0x83, 0xfd, 0xc0, 0x20, 0xe9, 0xca, 0x66, 0xfc, 0xea,
	0x7d, 0x0f, 0x0d, 0x1e, 0xe4, 0x21, 0x59, 0x3c, 0xc0, 0x9b, 0xeb, 0xb6, 0x67, 0x5b, 0x31, 0x41,
	0xe3, 0xe0, 0x20, 0x07, 0x78, 0x39, 0xa1, 0xa5, 0x7e, 0x0e, 0xf0, 0xa4, 0x7a, 0x34, 0x91, 0x2f,
	0xf2, 0xa3, 0x1a, 0xec, 0x6b, 0xda, 0x8e, 0x77, 0xdb, 0x76, 0xfc, 0xb5, 0x46, 0x06, 0xb2, 0xc9,
	0x44, 0xda, 0x48, 0x65, 0x0f, 0xad, 0xc4, 0x51, 0x5c, 0x1a, 0xa3, 0x4f, 0x7e, 0x50, 0x83, 0x31,
	0xb7, 0x6a, 0xd4, 0x59, 0xe9, 0x1a, 0xe6, 0x0e, 0xc9, 0x2c, 0x9f, 0x55, 0x44, 0xe5, 0xbe, 0x57,
	0x9a, 0x88, 0x46, 0x2a, 0x2a, 0x51, 0x9f, 0x34, 0x71, 0x60, 0x84, 0x5f, 0x38, 0xea, 0x98, 0x3f,
	0x24, 0x73, 0x36, 0xb7, 0x3e, 0x1e, 0x0b, 0x8b, 0xf3, 0x0d, 0x11, 0xa9, 0x20, 0x85, 0x1b, 0x8d,
	0x54, 0xef, 0xd9, 0xae, 0xcc, 0x2b, 0x92, 0x71, 0xa3, 0x91, 0xfa, 0xc2, 0x6b, 0x95, 0x6c, 0x1b,
	0x4d, 0x50, 0x8d, 0x86, 0x0c, 0x70, 0x11, 0x83, 0x1f, 0xf5, 0x8f, 0x0e, 0xe4, 0xfd, 0x9f, 0xe1,
	0xa0, 0x47, 0x11, 0x83, 0x1f, 0xf3, 0x9c, 0x9c, 0xfe, 0x05, 0x80, 0x33, 0xfd, 0x99, 0xf8, 0xc8,
	0x57, 0x3b, 0x3d, 0x13, 0x57, 0x76, 0xc2, 0x96, 0xf8, 0x40, 0x75, 0x52, 0x7f, 0xa9, 0xc1, 0xd9,
	0x66, 0x9f, 0x5d, 0x27, 0x2f, 0x06, 0xf7, 0x6b, 0xca, 0x4c, 0x1b, 0x98, 0x67, 0xa5, 0x96, 0xa3,
	0xef, 0x6b, 0x16, 0xed, 0x9b, 0xf3, 0xb8, 0xea, 0x32, 0xbf, 0x13, 0xaa, 0xcb, 0x2d, 0x18, 0xaf,
	0x0a, 0x65, 0xca, 0x8e, 0xa5, 0x9d, 0xc6, 0x9b, 0x89, 0xd4, 0xd8, 0xac, 0xd2, 0x80, 0x1c, 0xf9,
	0x19, 0x0d, 0x8e, 0xc7, 0xfb, 0x82, 0x32, 0x2c, 0x96, 0x79, 0x89, 0x84, 0x92, 0xff, 0xfa, 0x76,
	0xbb, 0x78, 0xbc, 0xdc, 0x0d, 0xf1, 0x5e, 0xbb, 0xf8, 0x6c, 0x1f, 0x7d, 0x10, 0xa9, 0x43, 0xbb,
	0xd3, 0x4e, 0x34, 0x3a, 0x8c, 0x66, 0x32, 0x3a, 0x3c, 0x0f, 0x7b, 0x1a, 0x76, 0xcb, 0xf2, 0x64,
	0xd4, 0x6e, 0x19, 0xc3, 0x10, 0x5d, 0x69, 0xae, 0x2a, 0x70, 0x1a, 0xc1, 0x8a, 0x99, 0x2a, 0xc6,
	0x87, 0x69, 0xaa, 0xf8, 0x88, 0x06, 0x7b, 0x2c, 0xe5, 0xd1, 0xab, 0x14, 0xcf, 0xe9, 0x20, 0xb9,
	0xd5, 0xba, 0x3f, 0x9e, 0x15, 0x5f, 0xa9, 0xe2, 0xd0, 0x08, 0xe5, 0x07, 0xaa, 0x91, 0xd3, 0x7f,
	0x27, 0x97, 0xa0, 0x05, 0x49, 0xb3, 0x40, 0x5c, 0x8e, 0x5a, 0x20, 0xde, 0xa0, 0x5a, 0x20, 0xce,
	0xf6, 0xd1, 0xeb, 0x11, 0xe3, 0x83, 0x62, 0xa1, 0xcc, 0x75, 0x49, 0x99, 0x13, 0x1a, 0x3b, 0xf3,
	0xa9, 0xc6, 0xce, 0x0f, 0x6a, 0xf0, 0x18, 0x9a, 0x65, 0x79, 0xc3, 0xf7, 0x6d, 0x8a, 0x45, 0xcf,
	0xb6, 0x2b, 0xc9, 0xcd, 0xd1, 0x34, 0x3a, 0xfa, 0x26, 0x3c, 0x97, 0x5d, 0xe0, 0xc2, 0x28, 0x1b,
	0xb5, 0xc0, 0x85, 0x50, 0x44, 0xd9, 0xa8, 0x95, 0xe6, 0x29, 0x42, 0xfb, 0x8a, 0xf8, 0xf1, 0xf1,
	0x02, 0x1c, 0x2f, 0xdb, 0xb5, 0x2e, 0x8f, 0xb5, 0xff, 0x6e, 0x90, 0xc7, 0xda, 0x03, 0xa4, 0x56,
	0x57, 0xb8, 0x48, 0x79, 0x7c, 0xf4, 0x46, 0x79, 0x20, 0x7c, 0xdb, 0xbc, 0xd9, 0xbe, 0xc9, 0xcc,
	0xb5, 0x75, 0x8f, 0xd5, 0x7a, 0x7f, 0xfa, 0x83, 0x7b, 0xb3, 0xfd, 0xf3, 0x79, 0x38, 0xd5, 0x93,
	0x1f, 0xf2, 0x21, 0x7c, 0xff, 0xa7, 0xd8, 0xc9, 0xa5, 0x32, 0x73, 0xc8, 0xa6, 0x76, 0xe9, 0x40,
	0xa1, 0x20, 0xd1, 0x28, 0x59, 0x32, 0x0d, 0x10, 0xf8, 0x0c, 0xfa, 0x26, 0x48, 0xbc, 0x4d, 0x07,
	0x4e, 0x85, 0x2e, 0x55, 0x30, 0xc8, 0x05, 0x98, 0xf4, 0xec, 0xa6, 0x5d, 0xb7, 0xd7, 0xb6, 0x2e,
	0x33, 0x3f, 0xc8, 0x3e, 0x66, 0x54, 0x58, 0x0e, 0xc1, 0x54, 0xc5, 0x21, 0x9f, 0xd4, 0xe0, 0x60,
	0xd0, 0x42, 0xf0, 0xbd, 0x85, 0x9d, 0xf8, 0x5e, 0x54, 0xd6, 0x2e, 0xc5, 0x69, 0xd1, 0x4e, 0xf2,
	0xfa, 0x27, 0x0b, 0x62, 0x98, 0x2c, 0xcf, 0xdc, 0x5d, 0xbb, 0xbb, 0x6b, 0x57, 0xac, 0xdd, 0xcf,
	0x15, 0xe0, 0x30, 0xe7, 0x67, 0xd7, 0xad, 0x6f, 0x78, 0xf6, 0x2e, 0x16, 0x71, 0xeb, 0xbb, 0x98,
	0x79, 0x5d, 0xf4, 0xe9, 0xc4, 0xd7, 0x88, 0x39, 0xf1, 0x95, 0xb2, 0x13, 0xca, 0xe2, 0xb2, 0xf7,
	0x87, 0x79, 0x38, 0x51, 0xb6, 0x6b, 0xdd, 0x1c, 0xf4, 0xe6, 0x22, 0x0e, 0x7a, 0xe7, 0x15, 0x07,
	0xbd, 0xa4, 0xc7, 0x2f, 0x6a, 0x63, 0xbb, 0xee, 0x78, 0x0f, 0xc9, 0x1d, 0xef, 0x9f, 0x34, 0x1c,
	0xd5, 0xf9, 0xa5, 0x8a, 0x18, 0xca, 0xe4, 0x24, 0x44, 0x78, 0x98, 0x60, 0x94, 0x36, 0xdf, 0x03,
	0x0f, 0xcf, 0xbf, 0xa5, 0x10, 0x4c, 0x55, 0x1c, 0x72, 0x16, 0xc6, 0x5d, 0x66, 0x38, 0xd5, 0x75,
	0x16, 0x79, 0x65, 0x5b, 0x91, 0x30, 0x1a, 0x94, 0x92, 0xf7, 0x85, 0x19, 0x9d, 0xf2, 0x83, 0x04,
	0x43, 0x52, 0x79, 0x17, 0x97, 0xb6, 0x6e, 0xe1, 0xf6, 0xe2, 0x69, 0x9c, 0x74, 0x06, 0x4f, 0xf6,
	0xd3, 0xc2, 0xfd, 0x66, 0x01, 0xb9, 0x00, 0x8f, 0x95, 0xed, 0x5a, 0xa6, 0x04, 0x1d, 0xcb, 0x58,
	0xe5, 0x5a, 0x25, 0xa1, 0xca, 0x77, 0x46, 0x98, 0x39, 0xed, 0x33, 0x73, 0xaf, 0x5d, 0x3c, 0x92,
	0xb0, 0x3a, 0xae, 0x55, 0x94, 0xb0, 0x80, 0x3f, 0xa8, 0x81, 0x5e, 0xb6, 0x6b, 0x41, 0x9e, 0xe9,
	0x8b, 0xc9, 0xce, 0x03, 0xef, 0x82, 0xbd, 0x55, 0x75, 0x69, 0x4a, 0x52, 0xdf, 0xc1, 0x57, 0x43,
	0x64, 0xcd, 0xf6, 0xbb, 0xb4, 0xa3, 0xcd, 0xe9, 0x5f, 0xf4, 0xd9, 0x10, 0xf7, 0xc4, 0x34, 0xcf,
	0xf2, 0xee, 0xbd, 0x1e, 0xa6, 0x36, 0xcd, 0x0d, 0x92, 0xff, 0x52, 0x38, 0x12, 0x64, 0x48, 0x6d,
	0xaa, 0x7f, 0x4c, 0x83, 0xb3, 0x71, 0xae, 0x53, 0x6f, 0xae, 0xdd, 0x79, 0xc7, 0x2c, 0x93, 0x4a,
	0x33, 0x4b, 0x61, 0x00, 0x4e, 0x99, 0x65, 0x32, 0x56, 0x48, 0x3b, 0xf1, 0xf5, 0x39, 0x78, 0x82,
	0x6f, 0xe2, 0xc1, 0x11, 0x9f, 0x32, 0x98, 0xdd, 0x03, 0x45, 0xfe, 0xee, 0x18, 0x2e, 0x81, 0x9e,
	0xe9, 0x9d, 0xc9, 0x47, 0x35, 0xd8, 0xe7, 0xb2, 0x2b, 0xa6, 0xd5, 0xba, 0xe3, 0xeb, 0x50, 0x06,
	0x8a, 0x73, 0x51, 0x59, 0x50, 0xdb, 0x48, 0xd3, 0xb9, 0x47, 0xb1, 0x68, 0x8c, 0x32, 0xf9, 0x29,
	0x0d, 0xf6, 0xdd, 0x36, 0xad, 0x9a, 0x7d, 0xdb, 0xf5, 0x99, 0xc9, 0x0d, 0xa2, 0x7a, 0xbf, 0x29,
	0xda, 0x88, 0x7d, 0x7d, 0x0f, 0xde, 0x6e, 0x46, 0x08, 0xd3, 0x18, 0x23, 0xe4, 0x1c, 0x4c, 0x38,
	0x2d, 0x6b, 0xc6, 0xbd, 0xee, 0x32, 0x07, 0x8f, 0x9c, 0xbc, 0xf4, 0xbe, 0xf5, 0x81, 0x34, 0x2c,
	0xc7, 0xcc, 0x60, 0xfc, 0xcf, 0x45, 0xc7, 0x6e, 0x35, 0xf1, 0xd8, 0xc8, 0xcb, 0xcc, 0x60, 0x01,
	0x94, 0x2a, 0x18, 0xe4, 0x79, 0xd8, 0x83, 0xff, 0x96, 0x6c, 0x8b, 0xda, 0xb6, 0x87, 0x07, 0xc0,
	0xb8, 0x50, 0xf0, 0x50, 0x05, 0x4e, 0x23, 0x58, 0x64, 0x11, 0x88, 0xdb, 0x6a, 0x36, 0xeb, 0xe8,
	0x1e, 0x6c, 0xd4, 0xb1, 0x29, 0xe1, 0x95, 0x96, 0x17, 0x07, 0x4f, 0xa5, 0xa3, 0x94, 0x26, 0xd4,
	0xe0, 0x87, 0xca, 0xaa, 0x64, 0x75, 0x0c, 0x59, 0x15, 0xc6, 0xd0, 0x8a, 0xe0, 0xd3, 0x2f, 0x23,
	0xb7, 0x60, 0xcc, 0xdd, 0x72, 0xab, 0x5e, 0xdd, 0x7f, 0x8d, 0xbb, 0x98, 0x71, 0x8a, 0x60, 0xe5,
	0x6e, 0x1b, 0xb9, 0xc0, 0x70, 0xa9, 0x4f, 0x87, 0x6c, 0xc2, 0x21, 0x49, 0x7d, 0x6e, 0xdd, 0xb0,
	0x82, 0x5c, 0xee, 0xe2, 0xb1, 0xdd, 0xfc, 0x76, 0xbb, 0x78, 0x48, 0x72, 0xa9, 0x16, 0xa7, 0x44,
	0x6b, 0x2c, 0xdb, 0xb5, 0x04, 0x64, 0x9a, 0x44, 0x40, 0xae, 0x8a, 0x6a, 0xd5, 0x6e, 0x34, 0xcb,
	0x8e, 0xbd, 0x6a, 0xd6, 0xd9, 0x60, 0x86, 0xee, 0x4a, 0xa4, 0x8d, 0xd4, 0x55, 0x11, 0xc1, 0xa2,
	0x31, 0xca, 0xfa, 0x07, 0x4e, 0xc2, 0x91, 0x54, 0xf9, 0x91, 0x8f, 0x8a, 0x7c, 0xcc, 0x2b, 0x6f,
	0x6c, 0x8b, 0x83, 0xa8, 0x1a, 0xbb, 0x8d, 0x8a, 0x7c, 0x3c, 0x4c, 0x7d, 0x3a, 0xe4, 0x87, 0x31,
	0xad, 0xb6, 0xe9, 0x05, 0xaf, 0x36, 0xfd, 0x38, 0x22, 0xa5, 0x01, 0x9f, 0x67, 0x27, 0x50, 0x7f,
	0x54, 0x52, 0xdf, 0x57, 0x8a, 0x10, 0xa2, 0x31, 0xc2, 0xe4, 0x7d, 0xe8, 0x39, 0xeb, 0xb3, 0x91,
	0x1f, 0x36, 0x1b, 0xaa, 0x93, 0xac, 0xcf, 0x82, 0x42, 0x90, 0xfc, 0x2b, 0x0d, 0x0e, 0x31, 0x3f,
	0x1d, 0xbd, 0xd2, 0x1f, 0x85, 0x41, 0xa4, 0x9e, 0x85, 0x8e, 0x86, 0x12, 0x38, 0x7a, 0x5c, 0x72,
	0x74, 0xa8, 0x13, 0xdb, 0xa5, 0x49, 0xbc, 0x90, 0x77, 0xc0, 0x5e, 0x87, 0xb9, 0x9e, 0xe1, 0x78,
	0x11, 0x95, 0xff, 0x1b, 0xf8, 0xb1, 0x4f, 0xd5, 0x82, 0x94, 0x18, 0x9b, 0x11, 0x1c, 0x1a, 0x6d,
	0x8b, 0xac, 0xc1, 0x71, 0x8f, 0x39, 0x0d, 0xd3, 0x42, 0xee, 0x2e, 0x3a, 0x06, 0x7a, 0x93, 0x99,
	0x78, 0xf4, 0xd8, 0x56, 0x4d, 0x44, 0x2f, 0xc8, 0xcf, 0x9e, 0xda, 0x6e, 0x17, 0x8f, 0x2f, 0x77,
	0x43, 0xa4, 0xdd, 0xdb, 0x21, 0xd7, 0xe0, 0xb0, 0x08, 0x39, 0x35, 0xcf, 0x8c, 0x5a, 0xdd, 0xb4,
	0x98, 0x4f, 0x40, 0x6c, 0x59, 0x47, 0xb6, 0xdb, 0xc5, 0xc3, 0x33, 0x49, 0x08, 0x34, 0xb9, 0x1e,
	0xb9, 0x0c, 0x13, 0x35, 0xcb, 0x95, 0x5d, 0x22, 0x6c, 0x00, 0xcf, 0x60, 0x8e, 0xc5, 0xa5, 0x4a,
	0xd0, 0x1d, 0x49, 0x51, 0x2b, 0x82, 0x72, 0x1a, 0xd6, 0x27, 0x3f, 0x2e, 0xd5, 0xfe, 0x81, 0x56,
	0x68, 0x02, 0x27, 0xc0, 0xdb, 0x87, 0x74, 0x4b, 0x8c, 0x84, 0xdc, 0x11, 0xd6, 0xbf, 0x47, 0xe4,
	0x3c, 0xd8, 0x13, 0x89, 0xc6, 0x13, 0x61, 0x02, 0x0f, 0x08, 0x91, 0xd5, 0x72, 0xa6, 0x8a, 0xf9,
	0xa7, 0x51, 0x20, 0x81, 0x30, 0x26, 0x4b, 0xa5, 0xa3, 0x94, 0x26, 0xd4, 0x20, 0xf3, 0x7c, 0x37,
	0x54, 0xa1, 0x32, 0xed, 0xd1, 0xb1, 0xed, 0x76, 0x71, 0x6a, 0x9e, 0x35, 0x1d, 0x86, 0x2e, 0xb1,
	0xd1, 0xd6, 0x68, 0xac, 0x0e, 0xa9, 0xc1, 0x31, 0xa3, 0xe5, 0xd9, 0x68, 0x89, 0x89, 0xa2, 0x2e,
	0xdb, 0x1b, 0xcc, 0x42, 0xef, 0x9a, 0x71, 0x71, 0x25, 0x9f, 0xe9, 0x82, 0x47, 0xbb, 0xb6, 0xc2,
	0x2f, 0x29, 0xbc, 0x0f, 0xf0, 0x4b, 0xf7, 0x86, 0xb1, 0xcf, 0x97, 0x24, 0x8c, 0x06, 0xa5, 0xfc,
	0x06, 0xb4, 0x6e, 0xbb, 0xde, 0x12, 0xf3, 0x6e, 0xdb, 0xce, 0x06, 0x7a, 0xaf, 0x8c, 0x8b, 0x1b,
	0xd0, 0xa5, 0x10, 0x4c, 0x55, 0x1c, 0x7e, 0x52, 0xa2, 0xd3, 0x5f, 0x69, 0x1e, 0x3d, 0x4b, 0xc6,
	0x65, 0x5e, 0x1d, 0x01, 0xa2, 0x7e, 0x99, 0x8f, 0x56, 0x2a, 0xcf, 0xa1, 0x07, 0x88, 0x82, 0x56,
	0x2a, 0xcf, 0x51, 0xbf, 0x8c, 0x4f, 0x69, 0x77, 0xdd, 0x70, 0x58, 0xd9, 0xb1, 0xab, 0xcc, 0x55,
	0x92, 0x61, 0x1e, 0xc4, 0x4a, 0x38, 0xa5, 0x2b, 0x49, 0x08, 0x34, 0xb9, 0x1e, 0x46, 0x96, 0x70,
	0xa3, 0x42, 0x8f, 0xf4, 0xa3, 0xc8, 0x7e, 0xff, 0xea, 0x29, 0x3a, 0xfa, 0x59, 0xbb, 0x22, 0x68,
	0x34, 0x4e, 0x9f, 0xfc, 0xb4, 0x06, 0x07, 0x30, 0xaa, 0x46, 0xb9, 0x55, 0xaf, 0x8b, 0x9c, 0x5a,
	0xee, 0xd4, 0x21, 0x5c, 0x1d, 0x3b, 0x93, 0xbc, 0x2b, 0x08, 0x87, 0x55, 0x8a, 0x51, 0xa5, 0x1d,
	0x7c, 0x44, 0x02, 0xe5, 0x3f, 0xd2, 0x35, 0x50, 0xfe, 0x39, 0x98, 0x70, 0x5b, 0x2b, 0x35, 0xbb,
	0x61, 0x98, 0x16, 0xba, 0x44, 0x48, 0xe7, 0xe1, 0x8a, 0x0f, 0xa4, 0x61, 0x39, 0x71, 0x60, 0xdc,
	0xf0, 0xed, 0x7f, 0x8f, 0x0e, 0x12, 0x9d, 0xb3, 0x8b, 0xd5, 0x4f, 0x84, 0xff, 0xf3, 0x2d, 0x7e,
	0x01, 0x1d, 0xf2, 0x02, 0xec, 0x95, 0xe1, 0xa7, 0x44, 0x30, 0xe4, 0xa9, 0xc7, 0xc2, 0x40, 0x0e,
	0x15, 0xb5, 0x80, 0x46, 0xf1, 0x30, 0x5d, 0xa7, 0x67, 0xd7, 0x99, 0xe4, 0x61, 0x6a, 0x6a, 0x90,
	0xe0, 0xfd, 0xcb, 0x41, 0x03, 0xdd, 0xa2, 0x80, 0x85, 0x58, 0x2e, 0x55, 0x69, 0x92, 0x0f, 0x68,
	0x62, 0x2d, 0x62, 0x42, 0x4d, 0xe6, 0x4e, 0x1d, 0x19, 0xe4, 0x1c, 0xef, 0x92, 0x91, 0x53, 0xc9,
	0x18, 0x1a, 0x52, 0xa1, 0x2a, 0x49, 0x7e, 0x77, 0x6b, 0x3a, 0xa6, 0x8d, 0x53, 0x37, 0x30, 0x46,
	0x1f, 0x0d, 0xef, 0x6e, 0xe5, 0x78, 0x21, 0xed, 0xc4, 0xc7, 0x38, 0x64, 0x12, 0x38, 0xf5, 0x38,
	0x66, 0x64, 0x13, 0x71, 0xc8, 0x24, 0x8c, 0x06, 0xa5, 0x64, 0x0b, 0x4f, 0x1f, 0xc1, 0xe4, 0xd4,
	0xb1, 0x41, 0x62, 0x1a, 0x77, 0xd7, 0xef, 0xc8, 0x7c, 0xc1, 0x3e, 0x02, 0x0d, 0xa9, 0xa1, 0xb3,
	0x95, 0xa3, 0xaa, 0x0a, 0xdc, 0xa9, 0xe3, 0x83, 0x44, 0x09, 0xec, 0xad, 0x71, 0x08, 0xa5, 0xb8,
	0x08, 0xa2, 0x4b, 0x63, 0xf4, 0xc9, 0x5b, 0xe0, 0x80, 0x23, 0x02, 0x7c, 0x84, 0x7d, 0x7f, 0x22,
	0x74, 0x04, 0xa0, 0xb1, 0x32, 0xda, 0x81, 0x2d, 0xb2, 0x0a, 0x1b, 0x2b, 0x75, 0x26, 0xcf, 0x84,
	0x2b, 0xa6, 0xb5, 0xe1, 0x4e, 0x15, 0x71, 0x23, 0x95, 0x59, 0x85, 0xe3, 0xa5, 0x34, 0xa1, 0x06,
	0x59, 0x83, 0x03, 0x4d, 0x87, 0xb1, 0x06, 0xde, 0xfa, 0xa4, 0x70, 0x70, 0x12, 0x39, 0xf9, 0x2e,
	0xce, 0x49, 0x39, 0x56, 0x96, 0xa6, 0x29, 0x89, 0xa1, 0xd1, 0x8e, 0x46, 0xc9, 0x6f, 0x6b, 0x30,
	0x6e, 0x6f, 0x32, 0x67, 0x9d, 0x19, 0xb5, 0xa9, 0x53, 0xd8, 0xff, 0xd7, 0x87, 0x25, 0x2d, 0x5c,
	0x93, 0xed, 0x2a, 0x7e, 0x42, 0x3e, 0x68, 0x58, 0x7e, 0x42, 0x3e, 0xeb, 0xe4, 0x4b, 0x1a, 0x1c,
	0xf1, 0x8d, 0x64, 0x95, 0x26, 0x1f, 0xd7, 0x39, 0xdb, 0x72, 0x3d, 0x47, 0xc4, 0xbe, 0xd3, 0x07,
	0x89, 0xd3, 0xb6, 0x9c, 0xd2, 0x5c, 0xc2, 0x04, 0x3b, 0xe5, 0x3f, 0x80, 0x4a, 0xab, 0xe3, 0xd2,
	0x74, 0xee, 0xf8, 0x9a, 0x77, 0x99, 0xe7, 0xef, 0xf6, 0x33, 0xee, 0xe2, 0xcb, 0xf3, 0x4b, 0x53,
	0x4f, 0x84, 0x59, 0x2d, 0x2b, 0xf1, 0x42, 0xda, 0x89, 0x4f, 0xde, 0x09, 0x39, 0xdb, 0x9d, 0x7a,
	0x12, 0x97, 0xf0, 0x42, 0xe6, 0x11, 0x4c, 0x52, 0x05, 0x0a, 0x8d, 0xe1, 0xb5, 0x0a, 0xcd, 0xd9,
	0xae, 0x9f, 0x33, 0xf8, 0xba, 0xcb, 0xaf, 0x15, 0xa7, 0x91, 0xb7, 0x20, 0x67, 0x30, 0x02, 0x69,
	0x58, 0x4e, 0xfe, 0x05, 0x17, 0x00, 0x22, 0x9a, 0x23, 0x77, 0xea, 0x0c, 0x0e, 0xc1, 0xcb, 0xd9,
	0xe7, 0x56, 0x0f, 0x0d, 0x54, 0x18, 0x5d, 0x2a, 0x8a, 0xe9, 0xd2, 0x38, 0x0b, 0x72, 0xc7, 0x51,
	0x14, 0x5d, 0xee, 0xd4, 0x53, 0x03, 0xef, 0x38, 0x5d, 0x95, 0x8b, 0xea, 0x8e, 0xa3, 0xd2, 0xa3,
	0x31, 0xfa, 0x47, 0xdf, 0x0c, 0x07, 0x3b, 0x64, 0xea, 0x2c, 0xaf, 0xb7, 0x8e, 0x6e, 0xc0, 0xde,
	0xc8, 0x32, 0xdb, 0x51, 0xef, 0x9a, 0x2f, 0xec, 0x81, 0xc7, 0xbb, 0x58, 0x76, 0xc8, 0x9b, 0xa2,
	0x0e, 0x35, 0x67, 0x55, 0x87, 0x9a, 0xc7, 0x93, 0x75, 0x21, 0x11, 0x1f, 0x9a, 0x0f, 0x24, 0x25,
	0x30, 0xc8, 0x7e, 0x1e, 0xdd, 0xcf, 0x73, 0x53, 0xc5, 0xb2, 0x91, 0xef, 0xcb, 0x8d, 0x27, 0x3d,
	0x31, 0xc5, 0x1c, 0x1c, 0xb4, 0x6c, 0xbc, 0x4a, 0xb2, 0x9a, 0x2f, 0xf7, 0xcb, 0x4b, 0xaf, 0xb0,
	0xab, 0xc7, 0x0b, 0x69, 0x27, 0x3e, 0x27, 0x24, 0xe4, 0x74, 0x69, 0x68, 0x41, 0x42, 0x42, 0x84,
	0xa7, 0xb2, 0x84, 0xdc, 0xf2, 0xe5, 0x7c, 0xe1, 0x78, 0x96, 0x59, 0xf7, 0x92, 0x96, 0xdf, 0x3b,
	0xd4, 0xbd, 0x08, 0x0c, 0xd7, 0xbf, 0x33, 0xb8, 0xa4, 0x08, 0x23, 0x4d, 0xbb, 0x56, 0x2a, 0xcb,
	0x1b, 0xeb, 0x84, 0xc8, 0x89, 0x54, 0x2b, 0x95, 0xa9, 0x80, 0x93, 0x06, 0x8c, 0xe2, 0x0f, 0x57,
	0x5e, 0x41, 0xb3, 0x6f, 0x49, 0x89, 0x1c, 0x05, 0x91, 0xf2, 0x10, 0xc1, 0xa5, 0x92, 0x08, 0xb9,
	0x09, 0x13, 0xa8, 0x0e, 0x40, 0xfb, 0x18, 0x64, 0xb6, 0x8f, 0x49, 0xaf, 0x5f, 0xd9, 0x00, 0x0d,
	0xdb, 0x22, 0x3f, 0xaf, 0xc1, 0xe1, 0x88, 0xae, 0x27, 0x78, 0x76, 0x3b, 0x39, 0x88, 0x63, 0x42,
	0xac, 0x99, 0x84, 0x2f, 0x3c, 0x2e, 0xbf, 0xf0, 0x70, 0x29, 0x89, 0x2a, 0x4d, 0x66, 0x86, 0xfc,
	0xa4, 0x06, 0x07, 0xab, 0x1d, 0x2c, 0xee, 0xd9, 0x19, 0x16, 0x83, 0xa0, 0xcb, 0x9d, 0xec, 0x75,
	0x32, 0x41, 0xde, 0x0a, 0xe3, 0xb7, 0x6c, 0x17, 0x45, 0x24, 0x79, 0x13, 0x9e, 0xe6, 0x92, 0xc0,
	0xcb, 0xd7, 0x2a, 0x08, 0xbb, 0xd7, 0x2e, 0x9e, 0x48, 0xde, 0x1a, 0x7c, 0x0c, 0x1a, 0xd4, 0x27,
	0x5f, 0xd4, 0xe0, 0x68, 0xa7, 0x6e, 0x29, 0xf8, 0xde, 0x7d, 0x3b, 0xf3, 0xbd, 0x81, 0xf7, 0xc0,
	0x42, 0x2a, 0x69, 0xda, 0x85, 0x2d, 0x72, 0x89, 0x6f, 0x16, 0xae, 0x79, 0x57, 0xbc, 0x03, 0x91,
	0x46, 0x67, 0x8a, 0x90, 0x14, 0xa3, 0xb3, 0x38, 0x61, 0xcc, 0xbb, 0xfe, 0x83, 0x67, 0x59, 0x9f,
	0x7c, 0x5e, 0x83, 0xc3, 0x4e, 0xa7, 0x85, 0x88, 0xb9, 0x53, 0x07, 0xf0, 0xd3, 0x6f, 0xdc, 0xdf,
	0x41, 0xd6, 0x7b, 0x52, 0xd2, 0x24, 0xe2, 0x34, 0x99, 0x27, 0xfd, 0x6b, 0x79, 0xf4, 0xe5, 0xeb,
	0xf2, 0x8e, 0x78, 0xd7, 0x0d, 0x64, 0x50, 0x37, 0x90, 0x2d, 0x18, 0xf7, 0x64, 0xbf, 0x0e, 0x96,
	0x32, 0x59, 0x19, 0x98, 0x14, 0x97, 0x10, 0xbc, 0x33, 0xfa, 0x38, 0x34, 0x20, 0xa7, 0xff, 0x44,
	0x0e, 0x5d, 0xbd, 0xba, 0xd7, 0x7e, 0x35, 0x3d, 0x11, 0x67, 0x91, 0x27, 0xe2, 0x3b, 0xe5, 0x32,
	0xa3, 0x7f, 0x56, 0x83, 0x63, 0xdd, 0xb2, 0x07, 0xa2, 0x77, 0xac, 0x2d, 0x33, 0x9c, 0xcb, 0x24,
	0xe9, 0x1c, 0x9f, 0x22, 0x94, 0x5c, 0xe4, 0x97, 0x76, 0xdb, 0xb3, 0xab, 0x76, 0x5d, 0x1a, 0x6b,
	0xcf, 0x89, 0x4b, 0xbb, 0x80, 0xa5, 0x89, 0x50, 0xb2, 0x98, 0x06, 0x95, 0xc3, 0xfc, 0x03, 0xf9,
	0x94, 0xfc, 0x03, 0x3f, 0xab, 0xc1, 0x99, 0xfe, 0x9e, 0x28, 0x91, 0xb3, 0x30, 0x2e, 0xcc, 0x2d,
	0x81, 0x53, 0x2f, 0xce, 0x8a, 0x1b, 0x12, 0x46, 0x83, 0xd2, 0x7e, 0x9c, 0x7b, 0x33, 0xa4, 0xd9,
	0xfb, 0xaa, 0x06, 0x4f, 0xf7, 0x9d, 0x41, 0x88, 0xd3, 0xbe, 0x8d, 0xee, 0x6f, 0xb2, 0x6b, 0x91,
	0xb6, 0x70, 0x88, 0xa3, 0xb2, 0x04, 0x65, 0x4b, 0xe1, 0xbf, 0xc6, 0xac, 0xea, 0x7d, 0x24, 0xa7,
	0xe8, 0x91, 0x90, 0x40, 0x06, 0x71, 0xf7, 0xe9, 0x50, 0x85, 0xa6, 0xfe, 0x43, 0x23, 0xf0, 0x18,
	0xfa, 0xf6, 0x24, 0x7c, 0xc2, 0x6f, 0x68, 0x70, 0xa2, 0xc9, 0xcb, 0x52, 0xd3, 0xc0, 0x0f, 0x96,
	0x72, 0xaa, 0xdc, 0xb5, 0xcd, 0xd9, 0x33, 0x72, 0x47, 0x3c, 0xd1, 0x1d, 0x8f, 0xf6, 0xe0, 0x8d,
	0x94, 0xe0, 0x10, 0x17, 0x4c, 0x4c, 0xa3, 0x3e, 0xcf, 0xea, 0xc6, 0x96, 0x6f, 0x14, 0xc9, 0xe1,
	0x70, 0x3c, 0xb6, 0xdd, 0x2e, 0x1e, 0x2a, 0x75, 0x16, 0xd3, 0xa4, 0x3a, 0xe4, 0x45, 0xd8, 0xe7,
	0x99, 0x0d, 0x66, 0xb7, 0x3c, 0xbf, 0x95, 0x3c, 0xb6, 0x82, 0x36, 0xca, 0xe5, 0x48, 0x09, 0x8d,
	0x61, 0x92, 0x17, 0x60, 0x6f, 0x33, 0x62, 0xf6, 0x29, 0x60, 0x55, 0xd4, 0x3e, 0x46, 0xcd, 0x3c,
	0x51, 0x3c, 0x7c, 0x02, 0xd2, 0xc2, 0xb7, 0x32, 0xcb, 0xeb, 0x0e, 0x73, 0xd7, 0xed, 0x7a, 0x0d,
	0x45, 0xf5, 0x11, 0xf9, 0x04, 0x24, 0x56, 0x46, 0x3b, 0xb0, 0x79, 0x0b, 0xab, 0x86, 0x59, 0x6f,
	0x39, 0x2c, 0x6c, 0x61, 0x34, 0x6c, 0x61, 0x31, 0x56, 0x46, 0x3b, 0xb0, 0x7b, 0xdb, 0xb0, 0xc6,
	0x86, 0x63, 0xc3, 0xd2, 0xff, 0x3a, 0x0f, 0x3d, 0xc6, 0x9b, 0xac, 0x43, 0x81, 0xdd, 0x61, 0xd5,
	0x6c, 0x1b, 0x77, 0x60, 0x40, 0xbc, 0xc3, 0xaa, 0xa9, 0x89, 0xf8, 0x71, 0xdb, 0xe3, 0x18, 0x14,
	0x29, 0x10, 0x0f, 0xc6, 0xd6, 0x3d, 0xaf, 0x79, 0x91, 0x79, 0xd9, 0xa2, 0xa3, 0x05, 0x97, 0x97,
	0xe5, 0xe5, 0xf2, 0xc5, 0x2e, 0x89, 0xff, 0x85, 0xcd, 0x43, 0x20, 0x51, 0x9f, 0x14, 0x79, 0x2f,
	0x4c, 0x78, 0xd5, 0x66, 0xc5, 0xae, 0x6e, 0x30, 0x6f, 0xb0, 0xf3, 0x73, 0x79, 0xae, 0x2c, 0xaa,
	0xa7, 0x52, 0xc6, 0x4b, 0x45, 0x80, 0x46, 0x43, 0x82, 0xbc, 0x77, 0xd7, 0x9c, 0x66, 0x75, 0xb0,
	0x44, 0x56, 0x17, 0x69, 0x79, 0xae, 0x7b, 0xef, 0x72, 0x0c, 0x8a, 0x14, 0xf4, 0xaf, 0x6b, 0xf0,
	0x54, 0xd9, 0xb1, 0xf9, 0x31, 0xe9, 0x07, 0xe8, 0x4e, 0xdd, 0xeb, 0xbf, 0x1f, 0xc6, 0xfc, 0xe8,
	0x4a, 0x03, 0xa5, 0x6b, 0x91, 0x8f, 0x62, 0x04, 0xb5, 0x1e, 0xbe, 0x72, 0x15, 0x19, 0x2a, 0xce,
	0xa7, 0x48, 0x2e, 0xc0, 0xa4, 0xcc, 0x21, 0x8e, 0x8f, 0xa1, 0xc4, 0xc6, 0x81, 0x56, 0xb0, 0xf9,
	0x10, 0x4c, 0x55, 0x1c, 0xfd, 0x95, 0x1c, 0x9c, 0xee, 0xeb, 0x8d, 0xb4, 0x38, 0x77, 0xd6, 0x4c,
	0xd7, 0x73, 0xb6, 0xd4, 0x53, 0x8c, 0x4a, 0x18, 0x0d, 0x4a, 0x31, 0x07, 0x8b, 0x78, 0xf8, 0xab,
	0x9c, 0x62, 0xf2, 0xcd, 0x98, 0x2c, 0xe9, 0xff, 0x14, 0xe3, 0x07, 0x7e, 0xcb, 0x65, 0x7e, 0x22,
	0x20, 0x1c, 0x1b, 0x74, 0xd1, 0x41, 0x28, 0x3f, 0xa7, 0xd7, 0xd0, 0xdb, 0x65, 0x24, 0x3c, 0xa7,
	0x85, 0xaf, 0x8b, 0x80, 0x73, 0x66, 0x3c, 0x66, 0x19, 0x96, 0xa7, 0xde, 0xfd, 0x97, 0x11, 0x42,
	0x65, 0x89, 0xfe, 0x1f, 0xf2, 0x70, 0x2e, 0x43, 0x00, 0x0b, 0xf2, 0x3a, 0x18, 0x6f, 0xd8, 0x96,
	0xe9, 0xd9, 0x81, 0xb3, 0xa5, 0xc8, 0xa4, 0xc1, 0x9a, 0xeb, 0x57, 0x25, 0x9c, 0x06, 0x18, 0x44,
	0x87, 0x11, 0x34, 0x56, 0xa9, 0xe9, 0x9b, 0xe9, 0xec, 0xbc, 0x08, 0xae, 0x2d, 0x8a, 0x94, 0x83,
	0x3f, 0x9f, 0x7a, 0xf0, 0x17, 0xb9, 0xe4, 0x63, 0xd7, 0x65, 0x47, 0xe0, 0x92, 0xe4, 0x4c, 0xdb,
	0x76, 0x9d, 0x62, 0x01, 0x39, 0x25, 0x7b, 0x6a, 0x24, 0x34, 0x69, 0x51, 0xa3, 0x66, 0xbb, 0x4a,
	0x77, 0x9d, 0x86, 0xb1, 0x0d, 0xb6, 0xe5, 0x98, 0xd6, 0x9a, 0xea, 0x73, 0x7a, 0x59, 0x80, 0xa8,
	0x5f, 0xc6, 0x57, 0xb6, 0x8b, 0x66, 0x35, 0xca, 0x56, 0x65, 0x5c, 0x8e, 0x6b, 0x99, 0xbd, 0x65,
	0x44, 0xf5, 0x54, 0xdb, 0x9e, 0x50, 0x17, 0xf8, 0x68, 0x34, 0x24, 0x18, 0x99, 0x1b, 0xe3, 0x5d,
	0x25, 0x9c, 0x5f, 0xc9, 0xc3, 0x29, 0x3a, 0x3b, 0xff, 0xcf, 0x7d, 0xb8, 0x3e, 0xa8, 0x75, 0x8e,
	0xd7, 0xce, 0x18, 0x64, 0x87, 0x31, 0x68, 0x7f, 0x56, 0x80, 0xa7, 0x28, 0x6b, 0xd6, 0xcd, 0x2a,
	0xb6, 0xc9, 0xaf, 0xfa, 0x8e, 0x5d, 0x4f, 0x3e, 0x42, 0x77, 0xef, 0xb6, 0x0f, 0x25, 0x72, 0x71,
	0xe2, 0xf0, 0x3c, 0x98, 0xc8, 0xc5, 0xc9, 0xa4, 0xb3, 0x3c, 0x83, 0xf8, 0x64, 0x1e, 0x9e, 0x4d,
	0x6c, 0x65, 0x78, 0x91, 0x8b, 0xbb, 0x37, 0xbf, 0x9b, 0x39, 0xba, 0xf3, 0x15, 0xc3, 0x5f, 0xf1,
	0x23, 0xb6, 0xff, 0x59, 0x25, 0xb6, 0x13, 0x44, 0x77, 0xe5, 0x7d, 0x54, 0x6e, 0x27, 0x02, 0x46,
	0x83, 0x52, 0xf2, 0x12, 0xec, 0x6f, 0x98, 0x16, 0xdf, 0x67, 0x62, 0x37, 0x26, 0xf4, 0x69, 0xb9,
	0x1a, 0x2d, 0xa2, 0x71, 0x5c, 0xf2, 0x13, 0x9a, 0x12, 0x5a, 0x58, 0xf8, 0x1c, 0xae, 0xed, 0xd8,
	0x62, 0x99, 0x8e, 0xfa, 0x7d, 0x1d, 0x90, 0xdb, 0x4d, 0x52, 0xe0, 0x61, 0x55, 0x37, 0x55, 0x78,
	0xa0, 0xba, 0xa9, 0xa3, 0xdf, 0x05, 0x7b, 0x07, 0xb6, 0xa5, 0xe9, 0xaf, 0x14, 0xe0, 0x99, 0x4c,
	0x6b, 0x38, 0xc3, 0x50, 0x5f, 0x81, 0x47, 0x56, 0x5b, 0xf5, 0xfa, 0x16, 0xbe, 0xb8, 0x64, 0x35,
	0x1f, 0x43, 0x8e, 0x37, 0x06, 0xaa, 0x59, 0x4c, 0x28, 0xa7, 0x89, 0xb5, 0xf8, 0x3d, 0x97, 0x9f,
	0x49, 0x5b, 0x41, 0x33, 0xf9, 0xf0, 0x9e, 0x4b, 0xd5, 0x02, 0x1a, 0xc5, 0x23, 0x73, 0x70, 0xd0,
	0xd8, 0x34, 0x4c, 0x91, 0x2a, 0xce, 0xaf, 0x2c, 0x2e, 0xc9, 0x68, 0x93, 0x9a, 0x89, 0x17, 0xd2,
	0x4e, 0x7c, 0xb2, 0x08, 0xc4, 0x5e, 0xc1, 0xd7, 0x38, 0xb5, 0x8b, 0xcc, 0x92, 0xde, 0x33, 0xb8,
	0x84, 0xa4, 0xc3, 0xf7, 0xb5, 0x8e, 0x52, 0x9a, 0x50, 0x23, 0x1e, 0x6f, 0x76, 0x74, 0x90, 0x78,
	0xb3, 0x59, 0x77, 0xcb, 0x9e, 0xb9, 0xcb, 0xdf, 0x0c, 0xc5, 0xfb, 0x7a, 0x39, 0xa2, 0xff, 0x85,
	0xc6, 0x65, 0x04, 0xd1, 0x42, 0xaf, 0x14, 0x29, 0x2f, 0xe0, 0x53, 0x18, 0x61, 0x2e, 0x50, 0xe2,
	0x41, 0x1e, 0x94, 0x4f, 0x61, 0xc2, 0x02, 0x1a, 0xc5, 0x13, 0x13, 0x4f, 0x79, 0xa0, 0x12, 0xdc,
	0x68, 0x64, 0xbc, 0xee, 0xa0, 0x94, 0x5c, 0x87, 0xb1, 0x9a, 0xb9, 0x69, 0xba, 0x52, 0x1f, 0x98,
	0xd9, 0xfe, 0x2b, 0x36, 0xc5, 0x79, 0xd1, 0x04, 0xf5, 0xdb, 0xd2, 0x7f, 0xbb, 0x10, 0xf6, 0xd3,
	0xcb, 0x2d, 0x3b, 0x51, 0xa4, 0xd8, 0x95, 0x80, 0x06, 0x95, 0x80, 0xec, 0x88, 0x04, 0xf4, 0xf2,
	0x60, 0x41, 0xdb, 0x71, 0x58, 0xfa, 0x94, 0x7c, 0x6e, 0xc7, 0x24, 0x9f, 0xca, 0xfd, 0x90, 0xcc,
	0x22, 0xf1, 0x7c, 0xb6, 0x00, 0x4f, 0xf4, 0xc1, 0x30, 0xf9, 0x4d, 0x0d, 0x0a, 0xeb, 0x86, 0x53,
	0x93, 0xaa, 0x89, 0x77, 0x0c, 0xbd, 0x4b, 0xa6, 0x2f, 0x19, 0x8e, 0xf4, 0x54, 0x5a, 0xe2, 0x9d,
	0xc3, 0xff, 0x0e, 0xc9, 0x4b, 0x09, 0x19, 0x27, 0x97, 0x61, 0xd4, 0xad, 0xda, 0xcd, 0xe0, 0xd1,
	0xe2, 0xeb, 0xb1, 0x37, 0x10, 0x72, 0xaf, 0x5d, 0x3c, 0xdd, 0xa5, 0x11, 0xc1, 0x35, 0xc7, 0xa4,
	0xb2, 0x09, 0x8c, 0x77, 0x80, 0x3f, 0x2b, 0xe1, 0xf9, 0x3f, 0x80, 0xf2, 0xac, 0xa2, 0x36, 0x91,
	0x16, 0xef, 0x20, 0x82, 0x44, 0xa3, 0x64, 0x8f, 0xae, 0xc1, 0x44, 0xd0, 0x71, 0x3b, 0xea, 0x7b,
	0xf2, 0xc1, 0x11, 0x38, 0xdd, 0xd7, 0x34, 0x23, 0xbf, 0x15, 0x9d, 0x2a, 0xef, 0xdc, 0x81, 0xa9,
	0xbc, 0xe3, 0x93, 0x85, 0x7f, 0x43, 0xcb, 0x65, 0x35, 0xe9, 0x03, 0xb3, 0x23, 0xdf, 0x70, 0xdd,
	0x65, 0xea, 0x37, 0xf0, 0xbf, 0xc3, 0xfa, 0x06, 0xce, 0xfa, 0x03, 0x9b, 0x1a, 0x9c, 0x50, 0xf0,
	0x2d, 0x3b, 0x3a, 0x07, 0x7f, 0x6a, 0x14, 0xce, 0xf4, 0x97, 0x12, 0x83, 0xfc, 0x17, 0x0d, 0x46,
	0xeb, 0x66, 0xc3, 0xf4, 0x7c, 0x65, 0xea, 0xbb, 0x77, 0x22, 0xf3, 0xc6, 0xf4, 0x15, 0x24, 0x21,
	0x46, 0xb1, 0xcc, 0x37, 0x14, 0x01, 0x18, 0xd2, 0x38, 0xca, 0x2f, 0xc0, 0xc8, 0x72, 0x0e, 0xbb,
	0xd5, 0x62, 0xae, 0xe7, 0x7b, 0x65, 0xad, 0xec, 0xc8, 0xe7, 0x50, 0x49, 0x44, 0xf1, 0x18, 0xf5,
	0x41, 0xc3, 0xf2, 0x18, 0xf5, 0xbf, 0x83, 0xb4, 0x60, 0xb4, 0x2a, 0x9c, 0x00, 0xf3, 0x83, 0x24,
	0x78, 0xed, 0xe5, 0x01, 0x18, 0x78, 0x2a, 0x49, 0xcf, 0x3f, 0x49, 0xec, 0xa8, 0x09, 0x93, 0xca,
	0xa0, 0xed, 0xe8, 0xba, 0xd8, 0x80, 0xbd, 0x91, 0x0e, 0xdd, 0xd1, 0xb5, 0xf1, 0x69, 0x0d, 0x4e,
	0xf6, 0x7a, 0x7d, 0x1b, 0x28, 0xc4, 0xb5, 0x44, 0x85, 0xf8, 0x31, 0x28, 0x38, 0x76, 0xdd, 0x17,
	0x68, 0xb1, 0x94, 0xda, 0x75, 0x46, 0x11, 0xca, 0x4b, 0xbd, 0x50, 0x6d, 0x39, 0xee, 0xab, 0x39,
	0xa4, 0xb6, 0xa2, 0x08, 0x23, 0x75, 0xb6, 0xc9, 0xea, 0x6a, 0xd2, 0xfd, 0x2b, 0x1c, 0x40, 0x05,
	0x5c, 0xff, 0x4a, 0x01, 0xce, 0x67, 0x8c, 0x85, 0x49, 0x4e, 0xc3, 0xd8, 0x9a, 0xe1, 0xb1, 0xdb,
	0xc6, 0x96, 0x9a, 0xf6, 0xfb, 0xa2, 0x00, 0x51, 0xbf, 0x8c, 0xe8, 0x30, 0x2a, 0xd2, 0x5d, 0xaa,
	0x46, 0x03, 0x99, 0x75, 0x51, 0x96, 0x44, 0xd5, 0xd2, 0xf9, 0x07, 0xad, 0x96, 0x9e, 0x06, 0x70,
	0xdd, 0xba, 0xf0, 0x3d, 0xaf, 0xc9, 0xdc, 0xe1, 0x22, 0x65, 0x67, 0xe5, 0x8a, 0x84, 0x52, 0x05,
	0x83, 0xbc, 0x05, 0x0e, 0x34, 0x1d, 0xdb, 0x13, 0x76, 0x9c, 0x79, 0xf1, 0xda, 0x44, 0x49, 0xc3,
	0x53, 0x8e, 0x95, 0xd1, 0x0e, 0x6c, 0x72, 0x01, 0x26, 0x65, 0x94, 0xbc, 0xb2, 0x6d, 0xd7, 0xa5,
	0x0a, 0x18, 0xed, 0x39, 0x95, 0x10, 0x4c, 0x55, 0x1c, 0xa5, 0x0a, 0x9a, 0x80, 0xc6, 0x3a, 0xaa,
	0x08, 0x13, 0x90, 0x82, 0x13, 0x4b, 0x2f, 0x34, 0xde, 0x33, 0xbd, 0x50, 0xa8, 0xfc, 0x9e, 0xe8,
	0xcb, 0x49, 0x01, 0xba, 0x6a, 0x83, 0x7f, 0xaf, 0x00, 0xa7, 0xe5, 0x94, 0x7a, 0x70, 0x13, 0x29,
	0xaa, 0x30, 0xcf, 0x3f, 0x14, 0x85, 0xf9, 0xee, 0x74, 0xda, 0x89, 0xe9, 0xf4, 0x5f, 0x35, 0x28,
	0xf6, 0x10, 0xc8, 0xc9, 0xe7, 0x34, 0x38, 0xd0, 0x30, 0xbc, 0xea, 0xfa, 0xc2, 0x9d, 0xa6, 0xc3,
	0x5c, 0x57, 0x46, 0x4a, 0xe0, 0xe7, 0x97, 0x31, 0x80, 0xe8, 0x1f, 0xa6, 0x0f, 0xf1, 0xc5, 0xfb,
	0xf0, 0x7c, 0xee, 0xf6, 0xa6, 0xed, 0x6a, 0x8c, 0x05, 0xda, 0xc1, 0x94, 0xfe, 0x43, 0x39, 0x78,
	0xfd, 0x00, 0x34, 0xc8, 0x32, 0x4c, 0xe0, 0x0d, 0x43, 0x51, 0x87, 0xbc, 0x11, 0x27, 0xa2, 0x0f,
	0xec, 0xff, 0xb2, 0x14, 0x36, 0x44, 0x96, 0x61, 0x5c, 0xa4, 0xbf, 0x95, 0x49, 0xd8, 0x44, 0xb8,
	0x91, 0xf1, 0x6b, 0x12, 0x96, 0x12, 0xf0, 0x31, 0x32, 0x1a, 0x3e, 0x2e, 0x0d, 0x5a, 0x42, 0x6b,
	0x31, 0x3f, 0x00, 0xfd, 0x80, 0xad, 0xc2, 0x5a, 0x8c, 0x10, 0x2a, 0x4b, 0xf4, 0xcf, 0xf3, 0x73,
	0xb1, 0xc7, 0xfb, 0x7b, 0xb2, 0x10, 0x51, 0xe1, 0x5f, 0x50, 0x54, 0xf8, 0x49, 0x9f, 0x1a, 0x6d,
	0x4e, 0x39, 0x04, 0xdf, 0x02, 0x07, 0x30, 0x74, 0x32, 0x3e, 0x00, 0x95, 0x01, 0x03, 0x72, 0xe1,
	0x3a, 0xbb, 0x12, 0x2b, 0xa3, 0x1d, 0xd8, 0xfa, 0x97, 0x46, 0x61, 0x4a, 0x2c, 0xf9, 0x5d, 0x7d,
	0xce, 0x10, 0xf5, 0x39, 0xe7, 0x60, 0xc2, 0x6c, 0x34, 0x5a, 0x98, 0xf2, 0x5b, 0xfa, 0x0c, 0xe0,
	0xee, 0x5a, 0xf2, 0x81, 0x34, 0x2c, 0x27, 0x0e, 0x14, 0x90, 0xe5, 0xc2, 0x20, 0x4e, 0x18, 0x69,
	0x83, 0x37, 0x3d, 0x6f, 0x78, 0x86, 0x10, 0xab, 0xf7, 0xc8, 0x7e, 0x2d, 0x70, 0x10, 0x45, 0x5a,
	0x98, 0x61, 0xc0, 0xf5, 0x1c, 0xd3, 0x5a, 0xe3, 0x40, 0x99, 0x5d, 0xeb, 0xc6, 0x90, 0x48, 0x57,
	0x82, 0x86, 0x05, 0x03, 0x81, 0x0a, 0x36, 0x2c, 0xa0, 0x0a, 0x75, 0xf2, 0x92, 0x5c, 0x0d, 0x62,
	0x97, 0x7f, 0x5a, 0x59, 0x0d, 0xc7, 0x93, 0x57, 0x83, 0xc3, 0xbc, 0x70, 0x15, 0x1c, 0x7d, 0x01,
	0x26, 0x02, 0x5a, 0xbd, 0xf4, 0xff, 0x7b, 0x54, 0x79, 0xf9, 0x25, 0xd8, 0x1f, 0x63, 0x35, 0x93,
	0xf9, 0xe0, 0x0b, 0x39, 0x38, 0x25, 0x98, 0x59, 0xb0, 0x36, 0x53, 0x45, 0x81, 0x3f, 0xd5, 0xe0,
	0x4c, 0xbd, 0xaf, 0x03, 0x58, 0x2e, 0xa8, 0x9d, 0x39, 0xdc, 0xa7, 0xe5, 0x18, 0x9c, 0xe9, 0x0f,
	0x9f, 0xf6, 0xc9, 0x33, 0x3f, 0xee, 0x44, 0xf8, 0x2b, 0xa3, 0xae, 0x26, 0x2c, 0xba, 0x26, 0x61,
	0x34, 0x28, 0xd5, 0x7f, 0x37, 0x07, 0x4f, 0x88, 0xee, 0xba, 0xcc, 0xb6, 0xba, 0x1c, 0x79, 0xdf,
	0xe6, 0x1d, 0x76, 0x44, 0xcc, 0x30, 0xb1, 0x4d, 0x63, 0xec, 0xf7, 0xcb, 0x6c, 0x4b, 0x4c, 0x35,
	0xb5, 0x2f, 0xf3, 0x5d, 0xfb, 0xf2, 0xd3, 0x79, 0xd0, 0x45, 0x5f, 0x76, 0x73, 0xbf, 0xfa, 0x76,
	0xef, 0x4a, 0x0b, 0x46, 0x4c, 0x8f, 0x35, 0x06, 0x0c, 0x03, 0x73, 0x99, 0x6d, 0x2d, 0xdb, 0x65,
	0xc3, 0x5b, 0x4f, 0x12, 0x85, 0x25, 0xc7, 0x23, 0x25, 0xde, 0x3e, 0x15, 0x64, 0x32, 0x8c, 0x8f,
	0xe5, 0xef, 0x0c, 0x3d, 0x92, 0xd5, 0x77, 0x09, 0xea, 0x95, 0x25, 0x59, 0xbd, 0xfe, 0x73, 0x39,
	0x78, 0x52, 0x10, 0xec, 0x71, 0x31, 0xe1, 0x92, 0x3c, 0xe2, 0x29, 0xe2, 0x96, 0x90, 0xe4, 0x03,
	0x28, 0x55, 0x30, 0x1e, 0x78, 0x17, 0xc7, 0xdc, 0x02, 0xf3, 0xbd, 0xdd, 0x02, 0x23, 0xa3, 0x52,
	0xe8, 0x3a, 0x2a, 0x3f, 0x3b, 0x8e, 0xc3, 0xd2, 0x23, 0x34, 0xd9, 0x2b, 0x1a, 0xec, 0xa9, 0x1a,
	0x4d, 0x63, 0xc5, 0xac, 0x9b, 0x9e, 0xc9, 0xdc, 0xc1, 0xfc, 0xb0, 0xe7, 0x94, 0x16, 0xd2, 0x82,
	0xa8, 0xab, 0x38, 0x34, 0x42, 0x93, 0x8f, 0x53, 0xd3, 0x31, 0x37, 0xcd, 0x3a, 0x5b, 0x43, 0xa5,
	0x70, 0x70, 0xe3, 0x2a, 0x07, 0x50, 0xaa, 0x60, 0x24, 0xc5, 0x53, 0xcb, 0xbf, 0x9a, 0xe2, 0xa9,
	0x15, 0x5e, 0x95, 0xf1, 0xd4, 0x46, 0x32, 0xc5, 0x53, 0x1b, 0xcd, 0x1c, 0x4f, 0x6d, 0xac, 0xaf,
	0x78, 0x6a, 0x14, 0x1e, 0xf5, 0xef, 0x84, 0xfc, 0xff, 0xa2, 0x59, 0x67, 0x52, 0x2b, 0x20, 0x9c,
	0xd3, 0x8e, 0x6e, 0xb7, 0x8b, 0x8f, 0xd2, 0x44, 0x0c, 0x9a, 0x52, 0x93, 0xbc, 0x0d, 0xa6, 0x8c,
	0x7a, 0xdd, 0xbe, 0x1d, 0x4c, 0x97, 0x05, 0xb7, 0x6a, 0xd4, 0xc5, 0x56, 0x3f, 0x81, 0xad, 0x62,
	0x10, 0x9d, 0x99, 0x14, 0x1c, 0x9a, 0x5a, 0x9b, 0x5c, 0x83, 0x89, 0xa6, 0x63, 0x57, 0x31, 0xcd,
	0x81, 0x8c, 0xe9, 0xc3, 0xef, 0x2f, 0x13, 0x65, 0x1f, 0x98, 0x12, 0xce, 0x29, 0x28, 0x47, 0xc9,
	0x2d, 0x6c, 0x23, 0x29, 0xe8, 0xd9, 0xe4, 0x43, 0x0b, 0x7a, 0xf6, 0x27, 0x23, 0xfc, 0xf6, 0xa6,
	0x86, 0xf7, 0xd9, 0xbd, 0x17, 0x0d, 0xf1, 0x5e, 0x74, 0x17, 0xc6, 0x5c, 0x19, 0x8b, 0x27, 0x3f,
	0xc8, 0xdb, 0xcd, 0xde, 0xb2, 0x46, 0xe8, 0x71, 0x2e, 0xa3, 0xef, 0xf8, 0x04, 0x93, 0x23, 0x02,
	0x15, 0x5e, 0x25, 0x11, 0x81, 0x7a, 0x05, 0xa9, 0x1a, 0x19, 0x46, 0x90, 0x2a, 0xfd, 0x3f, 0x69,
	0x70, 0x3e, 0x01, 0xde, 0x55, 0x86, 0x3c, 0x0b, 0xe3, 0x46, 0xab, 0x66, 0xe2, 0x23, 0x2a, 0xc5,
	0x97, 0x7e, 0x46, 0xc2, 0x68, 0x50, 0x4a, 0xe6, 0xe0, 0x20, 0xbb, 0xd3, 0x34, 0x45, 0x3d, 0xd5,
	0xbf, 0x2d, 0x2f, 0x7c, 0x8d, 0x16, 0xe2, 0x85, 0xb4, 0x13, 0x1f, 0xdf, 0xcc, 0xf9, 0xf9, 0x34,
	0xfd, 0x8c, 0x12, 0x86, 0xb7, 0x4e, 0x11, 0xaa, 0x7f, 0xb1, 0x00, 0x47, 0xfc, 0x0f, 0xd8, 0x5d,
	0x97, 0xc3, 0x5b, 0x97, 0x66, 0xc4, 0xff, 0xe4, 0x72, 0xd6, 0x8d, 0x17, 0x07, 0xa4, 0x4f, 0xcf,
	0x93, 0x5b, 0x31, 0xcf, 0x93, 0xab, 0x83, 0x11, 0xcb, 0xe2, 0x73, 0xf2, 0x17, 0x39, 0x38, 0x2e,
	0xeb, 0x95, 0x6d, 0xc7, 0xcb, 0x2c, 0x8a, 0x0f, 0xed, 0xa5, 0xe6, 0x05, 0x98, 0x34, 0x9a, 0x4d,
	0xbf, 0x40, 0x4d, 0xfe, 0x30, 0x13, 0x82, 0xa9, 0x8a, 0x13, 0xbc, 0x21, 0x2d, 0x24, 0xbe, 0x21,
	0x7d, 0x37, 0x80, 0x67, 0x38, 0x6b, 0xcc, 0xe3, 0x30, 0x99, 0x79, 0xf5, 0xd9, 0x54, 0x9b, 0x5e,
	0xcb, 0x33, 0xeb, 0xd3, 0xa6, 0xe5, 0xb9, 0x9e, 0x33, 0x5d, 0xb2, 0xbc, 0x6b, 0x8e, 0xd0, 0x7e,
	0x08, 0x91, 0x66, 0x39, 0x68, 0x87, 0x2a, 0x6d, 0xfa, 0x71, 0xed, 0xb0, 0xfd, 0xd1, 0xd0, 0xe3,
	0x71, 0x49, 0xc2, 0x68, 0x50, 0xaa, 0x7f, 0x62, 0x5f, 0xd0, 0xcb, 0x29, 0x3e, 0x3d, 0x4d, 0x18,
	0xe1, 0x5c, 0xfb, 0x0a, 0xec, 0xc1, 0xa6, 0x59, 0xf2, 0x08, 0x86, 0xd7, 0x09, 0x5e, 0xee, 0x52,
	0x41, 0x88, 0x7c, 0x58, 0xf5, 0x98, 0xcd, 0x0d, 0x12, 0x1b, 0xb1, 0xeb, 0x17, 0x65, 0xf0, 0x91,
	0xc5, 0x2c, 0xd0, 0x98, 0x29, 0xb7, 0x54, 0x96, 0x03, 0x2f, 0xb3, 0x40, 0x4b, 0x20, 0x0d, 0xcb,
	0xb9, 0xdc, 0x19, 0xfc, 0x11, 0x67, 0x94, 0xbc, 0xa5, 0x05, 0xd8, 0x2e, 0x55, 0x30, 0xc8, 0x9b,
	0xa4, 0x02, 0x4d, 0xd8, 0x58, 0x5e, 0xab, 0x28, 0xd0, 0x4e, 0x24, 0x2a, 0xd0, 0xf0, 0x93, 0x14,
	0x3d, 0xf2, 0x05, 0x98, 0x64, 0x77, 0x3c, 0xe6, 0x58, 0x46, 0x9d, 0x13, 0x1c, 0x0d, 0x83, 0xb2,
	0x2f, 0x84, 0x60, 0xaa, 0xe2, 0x90, 0x2a, 0xec, 0x77, 0x85, 0xea, 0x3f, 0x48, 0x39, 0x35, 0x16,
	0x24, 0xb4, 0xda, 0x5f, 0x89, 0x16, 0xa5, 0xf8, 0x8f, 0xfb, 0x3b, 0xb9, 0x1f, 0x55, 0x2e, 0xde,
	0x22, 0x79, 0x11, 0xf6, 0xd5, 0x6d, 0xa3, 0x36, 0x6b, 0xd4, 0x0d, 0xab, 0x8a, 0x3d, 0x27, 0x6c,
	0x34, 0x28, 0xc9, 0x5d, 0x89, 0x94, 0xd0, 0x18, 0x26, 0x97, 0x80, 0x55, 0x88, 0x8c, 0xbe, 0x6d,
	0x58, 0x6b, 0x4c, 0x84, 0x28, 0x91, 0x61, 0x24, 0xaf, 0xa4, 0xe0, 0xd0, 0xd4, 0xda, 0x5c, 0xca,
	0xf7, 0x7b, 0x42, 0x09, 0x6c, 0x89, 0x52, 0xfe, 0x82, 0x02, 0xa7, 0x11, 0x2c, 0x7e, 0xad, 0x3c,
	0xec, 0x03, 0x96, 0x1d, 0x63, 0x75, 0xd5, 0xac, 0xca, 0x38, 0x5f, 0x22, 0xa8, 0xe5, 0x95, 0xed,
	0x76, 0xf1, 0xf0, 0x42, 0x12, 0xc2, 0xbd, 0x76, 0xf1, 0x7c, 0x7a, 0xef, 0x25, 0x56, 0xa1, 0xc9,
	0xa4, 0x48, 0x09, 0x0e, 0xad, 0x33, 0xa3, 0xee, 0xad, 0xcf, 0xad, 0xb3, 0xea, 0x86, 0xbf, 0x88,
	0x31, 0x04, 0xa6, 0x7c, 0xb6, 0x7b, 0xa9, 0xb3, 0x98, 0x26, 0xd5, 0xe1, 0xfd, 0xdb, 0x6c, 0xad,
	0xd4, 0x4d, 0x77, 0x7d, 0xc9, 0xf6, 0xd0, 0x07, 0x79, 0xa6, 0x56, 0x73, 0x98, 0xeb, 0x32, 0x11,
	0xf6, 0x43, 0xde, 0x30, 0xca, 0x29, 0x38, 0x34, 0xb5, 0x36, 0xf9, 0xac, 0x06, 0x87, 0x63, 0x33,
	0x41, 0x06, 0xac, 0xdb, 0x37, 0x48, 0x5e, 0xd3, 0x4a, 0x52, 0x53, 0x49, 0x51, 0x4e, 0x30, 0xee,
	0x65, 0x12, 0x32, 0x4d, 0x66, 0x87, 0x5c, 0x05, 0x30, 0x9b, 0x8b, 0x46, 0xc3, 0xac, 0x9b, 0xcc,
	0x9d, 0xda, 0x8f, 0x93, 0xea, 0x19, 0xbe, 0x4c, 0x4b, 0x65, 0x1f, 0x9a, 0x72, 0x36, 0x48, 0x84,
	0x2d, 0xaa, 0x34, 0x40, 0xbe, 0x0f, 0xf6, 0xc9, 0x7f, 0x5b, 0x72, 0x66, 0x1c, 0xc0, 0x99, 0xf1,
	0x02, 0xc6, 0x23, 0x2e, 0xab, 0x25, 0xf7, 0xda, 0xc5, 0x53, 0x5d, 0x9a, 0x95, 0x93, 0x20, 0xd6,
	0x1c, 0x59, 0x83, 0xe3, 0xfc, 0x5a, 0x57, 0x35, 0x3c, 0xa6, 0x4e, 0x7b, 0x7f, 0x48, 0x5d, 0x19,
	0x00, 0x14, 0x1f, 0x1c, 0xcf, 0x74, 0x43, 0xa4, 0xdd, 0xdb, 0xe1, 0x92, 0xa0, 0xba, 0x7a, 0x44,
	0x2c, 0x18, 0x12, 0x46, 0x42, 0xba, 0x12, 0x2f, 0xa4, 0x9d, 0xf8, 0xb8, 0x60, 0x4c, 0x2b, 0x69,
	0xc1, 0x1c, 0x0a, 0x17, 0x4c, 0xc9, 0xca, 0xbc, 0x60, 0x12, 0xab, 0xd0, 0x64, 0x52, 0xf7, 0xf7,
	0xbe, 0xe0, 0xf3, 0x39, 0x28, 0xf6, 0x90, 0x57, 0x30, 0x71, 0x9f, 0xfa, 0xed, 0x52, 0x4a, 0xa5,
	0x59, 0x6f, 0x24, 0xca, 0x5e, 0x95, 0x26, 0x1a, 0xe1, 0x0e, 0xa5, 0x62, 0xd2, 0x08, 0x65, 0x19,
	0xd3, 0x3a, 0x1a, 0x8c, 0xab, 0x94, 0x4d, 0x20, 0xbd, 0x1f, 0x47, 0xfc, 0x9f, 0xd3, 0xe0, 0xa9,
	0x3e, 0xd7, 0x2a, 0xb9, 0x03, 0xe3, 0x82, 0xa1, 0x52, 0x79, 0xb0, 0xbc, 0x01, 0x73, 0xb2, 0x76,
	0xea, 0x6e, 0x20, 0x33, 0x5b, 0x0a, 0x2c, 0x1a, 0x50, 0xd3, 0xff, 0x36, 0x07, 0x17, 0x32, 0x67,
	0x99, 0x8d, 0x39, 0x1a, 0x68, 0x3d, 0x1d, 0x0d, 0x5e, 0x82, 0xfd, 0xe1, 0x3f, 0x55, 0x05, 0x8c,
	0x0f, 0x85, 0x6e, 0x44, 0x8b, 0x68, 0x1c, 0xb7, 0xaf, 0x37, 0x9f, 0xaa, 0x9f, 0x42, 0xa1, 0xeb,
	0xab, 0xe6, 0x88, 0x2b, 0xd3, 0xc8, 0xce, 0x24, 0x12, 0x4d, 0xf5, 0x3d, 0xd1, 0xff, 0x26, 0x07,
	0x4f, 0x05, 0x1d, 0xfe, 0xed, 0xdc, 0xcd, 0x51, 0x47, 0x9f, 0x91, 0x87, 0xe1, 0xe8, 0xa3, 0xbf,
	0x1d, 0xa6, 0xd2, 0xd2, 0x25, 0xdc, 0x6f, 0xd6, 0x9a, 0x1f, 0xd3, 0xe0, 0x54, 0xcf, 0x18, 0x0a,
	0x64, 0x49, 0x09, 0x99, 0x33, 0xc8, 0x55, 0x26, 0x7e, 0x41, 0x3a, 0x06, 0x85, 0x75, 0xdb, 0xf5,
	0x54, 0x17, 0xc3, 0x4b, 0xb6, 0xeb, 0x51, 0x84, 0xea, 0x7f, 0xaf, 0xc1, 0x63, 0xcb, 0xc9, 0x21,
	0x3e, 0x7d, 0x3b, 0x9d, 0x96, 0x60, 0xa7, 0xeb, 0xf5, 0xad, 0x64, 0x1e, 0x46, 0xd9, 0xea, 0x2a,
	0xab, 0x7a, 0x72, 0x62, 0xbc, 0x8e, 0x4f, 0x8c, 0x05, 0x84, 0xa4, 0xc8, 0xe4, 0xc8, 0x85, 0xc0,
	0xa0, 0xb2, 0x2e, 0xb9, 0x09, 0x13, 0x9e, 0xd9, 0x60, 0x33, 0xb5, 0x9a, 0x74, 0xba, 0x1a, 0x20,
	0xc6, 0xdd, 0xb2, 0xdf, 0x00, 0x0d, 0xdb, 0xd2, 0x7f, 0x3d, 0x07, 0xc7, 0xba, 0x45, 0x4e, 0xee,
	0xf6, 0xed, 0x2f, 0x77, 0x38, 0xd6, 0xbc, 0x21, 0xe6, 0x58, 0x93, 0xe4, 0xc1, 0x12, 0x52, 0x4b,
	0xf0, 0xaa, 0x09, 0xba, 0x33, 0xdf, 0xb3, 0x3b, 0x0b, 0xf7, 0xd1, 0x9d, 0x73, 0x70, 0x30, 0x8c,
	0xfd, 0xec, 0xab, 0xa7, 0x46, 0x42, 0xf5, 0xd4, 0x72, 0xbc, 0x90, 0x76, 0xe2, 0xeb, 0x2e, 0x3c,
	0x17, 0x84, 0x7c, 0x95, 0x72, 0x01, 0xbe, 0xd5, 0xeb, 0xee, 0xe3, 0xd4, 0xa5, 0x3f, 0x43, 0x97,
	0xa2, 0x5c, 0xaa, 0x4b, 0xd1, 0x37, 0x34, 0x38, 0x13, 0xa7, 0x9a, 0x12, 0x19, 0xe9, 0x57, 0x35,
	0x38, 0x8c, 0xae, 0x59, 0xc8, 0x55, 0xa7, 0xd3, 0xd8, 0xbb, 0x07, 0x0c, 0x89, 0xdb, 0xf7, 0xb7,
	0x86, 0xa1, 0xe3, 0xae, 0x26, 0xb1, 0x41, 0x93, 0xb9, 0xd3, 0xbf, 0x3a, 0x02, 0xaf, 0xed, 0x3f,
	0xfe, 0x2e, 0xbe, 0xe4, 0x35, 0xee, 0x54, 0x36, 0xd8, 0x6d, 0xf9, 0x0c, 0x53, 0xbc, 0xe4, 0x15,
	0x20, 0xea, 0x97, 0xc5, 0x93, 0x6d, 0xe6, 0xfa, 0x48, 0xb6, 0x79, 0x1b, 0x0e, 0xde, 0x5e, 0x67,
	0xd6, 0x75, 0xcb, 0x35, 0x3c, 0xd3, 0x5d, 0x35, 0x03, 0x0f, 0x9e, 0x89, 0xd9, 0x12, 0x9f, 0x25,
	0x37, 0xe3, 0x85, 0x29, 0x09, 0xaa, 0x23, 0x38, 0xca, 0xb7, 0xe0, 0xc6, 0x47, 0x3b, 0x69, 0x24,
	0x64, 0x34, 0x2d, 0x3c, 0xb4, 0x8c, 0xa6, 0x0d, 0x53, 0xfa, 0x61, 0xba, 0x32, 0x28, 0x12, 0x1e,
	0xa2, 0x57, 0x03, 0x28, 0x55, 0x30, 0x48, 0x13, 0x88, 0x9a, 0xff, 0x59, 0xca, 0xe8, 0xc2, 0x97,
	0xe7, 0x2d, 0xdb, 0xed, 0x22, 0x59, 0xea, 0x28, 0xbd, 0xd7, 0x2e, 0x9e, 0x49, 0xe8, 0x33, 0x8e,
	0x58, 0xb2, 0xaa, 0xf5, 0x96, 0x1b, 0x46, 0xb0, 0x4e, 0x68, 0x9b, 0xbc, 0x07, 0x0e, 0x70, 0x28,
	0x2e, 0x72, 0x3f, 0x93, 0x86, 0x50, 0x3e, 0xbc, 0x69, 0xbb, 0x5d, 0x3c, 0xb0, 0x14, 0x2b, 0xcb,
	0x40, 0xad, 0xa3, 0x5d, 0xf2, 0x22, 0xec, 0x0b, 0x67, 0xec, 0x65, 0xb6, 0x25, 0x92, 0x10, 0x49,
	0x15, 0xc4, 0xd5, 0x48, 0x09, 0x8d, 0x61, 0xea, 0x3f, 0xae, 0xc1, 0x39, 0x2e, 0x04, 0xd4, 0xae,
	0xf4, 0xed, 0x4b, 0x63, 0x34, 0x4d, 0x61, 0x6c, 0x54, 0x55, 0xed, 0xe5, 0x92, 0x30, 0x35, 0x06,
	0xa5, 0xfc, 0x58, 0xdb, 0x30, 0xad, 0x9a, 0x7a, 0xac, 0x5d, 0x36, 0xad, 0x1a, 0x45, 0x68, 0x70,
	0x52, 0xe7, 0x13, 0xdf, 0xab, 0xfe, 0x47, 0xbe, 0x9b, 0x70, 0xae, 0x5e, 0x25, 0x0c, 0x45, 0x3d,
	0x1d, 0x0a, 0x3d, 0x3c, 0x1d, 0xfe, 0x51, 0x83, 0xa9, 0xb4, 0xdc, 0x41, 0x3d, 0x44, 0x94, 0xdf,
	0xd0, 0xe0, 0xc4, 0x66, 0x57, 0x01, 0x52, 0x6a, 0xe1, 0xaf, 0x0c, 0x12, 0x07, 0x29, 0x35, 0xf9,
	0x5b, 0x10, 0x72, 0xad, 0x3b, 0x1e, 0xed, 0xc1, 0x9b, 0x6e, 0x81, 0x6c, 0x61, 0x9e, 0xa5, 0xd8,
	0x3f, 0xba, 0x7f, 0xfe, 0x34, 0x40, 0x0d, 0x6b, 0x96, 0x0d, 0x6f, 0x5d, 0x0e, 0x14, 0xae, 0xeb,
	0xf9, 0x00, 0x4a, 0x15, 0x0c, 0xfd, 0x4f, 0x72, 0x70, 0xdc, 0xcf, 0x36, 0x9f, 0x6c, 0x07, 0xed,
	0x4e, 0x4f, 0x95, 0x7c, 0x73, 0x5d, 0x25, 0xdf, 0x73, 0x30, 0x81, 0x26, 0xab, 0x72, 0x68, 0xf8,
	0xc1, 0x09, 0x70, 0xd5, 0x07, 0xd2, 0xb0, 0x9c, 0x6f, 0xfd, 0x6e, 0x6b, 0x05, 0x51, 0x95, 0x70,
	0x35, 0x15, 0x01, 0xa2, 0x7e, 0x19, 0xd9, 0x80, 0x03, 0xa2, 0x8e, 0x63, 0x37, 0x8d, 0xb5, 0xf0,
	0xc5, 0xfa, 0xc4, 0xec, 0x9b, 0xd1, 0xa1, 0x39, 0x56, 0x96, 0x92, 0x77, 0x3f, 0x8e, 0x86, 0xde,
	0x27, 0x1d, 0x0d, 0xa3, 0xeb, 0xb9, 0xa0, 0xcb, 0xcf, 0xb4, 0x88, 0xb7, 0x7a, 0x08, 0xa6, 0x2a,
	0x8e, 0xfe, 0x2f, 0x35, 0x78, 0xb2, 0x9f, 0x74, 0xfb, 0x64, 0x53, 0x3c, 0xc5, 0x32, 0x1d, 0x56,
	0x1b, 0xcc, 0x13, 0x45, 0x0d, 0x62, 0x98, 0x76, 0xd1, 0xf5, 0x93, 0x22, 0xd3, 0x80, 0x96, 0xfe,
	0x87, 0x05, 0xd0, 0x7b, 0x47, 0xf8, 0x22, 0x1e, 0x8c, 0x8a, 0xeb, 0x83, 0x64, 0x6e, 0x20, 0xf7,
	0xd5, 0xae, 0x31, 0xc4, 0x84, 0x45, 0x47, 0x5c, 0x51, 0x24, 0x2d, 0xf2, 0x11, 0x0d, 0x26, 0x6b,
	0xf6, 0x6d, 0xeb, 0xb6, 0xe1, 0xd4, 0x66, 0xca, 0x25, 0xb9, 0x6e, 0x33, 0x2a, 0x06, 0xe7, 0xc3,
	0x06, 0xba, 0x07, 0x31, 0x43, 0xf7, 0xa3, 0x10, 0x99, 0xaa, 0xa4, 0xc9, 0x07, 0x34, 0x98, 0x10,
	0x04, 0xae, 0x1a, 0x4d, 0x69, 0x40, 0xab, 0x64, 0x8e, 0x48, 0x2c, 0xaa, 0x77, 0x65, 0x43, 0x98,
	0x0b, 0x7c, 0x54, 0x1a, 0x12, 0x25, 0xbf, 0xa0, 0xc1, 0x21, 0x37, 0xc1, 0x68, 0x3c, 0x90, 0xd3,
	0x4d, 0x46, 0xfb, 0xb0, 0xd0, 0x1a, 0x27, 0x99, 0xa2, 0x93, 0x58, 0xd2, 0xff, 0xfd, 0x09, 0xe8,
	0xb1, 0x0f, 0x92, 0xf7, 0x8b, 0xe4, 0x38, 0xb8, 0xc2, 0x07, 0xf2, 0x4a, 0xbc, 0x24, 0x6b, 0xf7,
	0xd8, 0x97, 0x83, 0x94, 0x3b, 0xb8, 0x71, 0x04, 0x34, 0x39, 0x7d, 0xd6, 0x68, 0x7a, 0x5b, 0xf3,
	0xa6, 0x23, 0xe7, 0x55, 0x46, 0xfa, 0x0b, 0xb2, 0x76, 0x3f, 0xf4, 0x7d, 0x5c, 0x1a, 0xd0, 0x24,
	0x9f, 0xd1, 0xe0, 0xe0, 0x1a, 0x86, 0x70, 0x94, 0xba, 0xa5, 0x79, 0xd3, 0xdd, 0x90, 0x13, 0x2b,
	0xe3, 0x58, 0x5e, 0x9c, 0x5b, 0x88, 0x36, 0xd3, 0x83, 0x25, 0xbc, 0x07, 0x75, 0x54, 0xa2, 0x9d,
	0xec, 0x90, 0x5f, 0xd2, 0xe0, 0x11, 0xe3, 0xb6, 0xbb, 0x50, 0x37, 0x5c, 0xcf, 0xac, 0xce, 0xd6,
	0xed, 0xea, 0x46, 0xc5, 0xb3, 0x1d, 0x3f, 0xfe, 0x4b, 0xc6, 0x6b, 0xc6, 0xcc, 0xcd, 0x4a, 0x47,
	0x4b, 0x3d, 0x58, 0xc5, 0x08, 0x2a, 0x49, 0xf5, 0x68, 0x22, 0x5f, 0xe4, 0x2e, 0x8c, 0xad, 0x99,
	0x1e, 0x65, 0x4d, 0x5b, 0xaa, 0x56, 0x32, 0xae, 0xd1, 0x8b, 0xa2, 0x72, 0x0f, 0xae, 0xc4, 0x33,
	0x2f, 0x81, 0x4a, 0x7d, 0x82, 0x64, 0x33, 0xd8, 0x23, 0x47, 0x07, 0x51, 0xee, 0xf6, 0xe3, 0xd8,
	0x99, 0xb8, 0x4b, 0xbe, 0x07, 0xf2, 0xd6, 0xaa, 0x3b, 0x58, 0x50, 0xbc, 0xa5, 0xc5, 0x1e, 0xca,
	0x36, 0x71, 0x8f, 0x5d, 0x5a, 0xac, 0x50, 0x4e, 0x84, 0x38, 0x30, 0x62, 0xba, 0x55, 0xd7, 0x44,
	0x0b, 0x5d, 0xe6, 0x10, 0x16, 0xa5, 0xca, 0x5c, 0xa5, 0xd4, 0x83, 0x1e, 0xea, 0x05, 0x10, 0x91,
	0x0a, 0x52, 0xe4, 0x15, 0x0d, 0x26, 0xd6, 0x84, 0x15, 0x74, 0xd5, 0x45, 0xb7, 0xb6, 0xcc, 0x67,
	0xc0, 0x45, 0xbf, 0x7a, 0x0f, 0xe2, 0xb8, 0xf9, 0x06, 0xc8, 0x34, 0x24, 0x4b, 0x7e, 0x45, 0x83,
	0xc3, 0xcd, 0x98, 0x1e, 0x18, 0x9f, 0x00, 0xcb, 0xb4, 0x04, 0x19, 0x9f, 0x69, 0x95, 0x93, 0x9a,
	0xea, 0xc1, 0x1c, 0x5a, 0xae, 0x12, 0x2b, 0xd2, 0x64, 0xd6, 0xf8, 0xcc, 0x70, 0x56, 0x6a, 0xd2,
	0xcf, 0x2e, 0xe3, 0xcc, 0xe8, 0x19, 0xc4, 0x50, 0xcc, 0x0c, 0x3a, 0x3b, 0x4f, 0x39, 0x11, 0x0c,
	0xc4, 0xbc, 0x5a, 0x67, 0x32, 0xf2, 0x34, 0xda, 0x1a, 0x33, 0x8b, 0x09, 0x8b, 0x41, 0xfd, 0x54,
	0xa2, 0x28, 0xca, 0x86, 0x78, 0x54, 0xa1, 0xc9, 0x17, 0x60, 0xd5, 0xb4, 0x6a, 0xcc, 0x41, 0xcb,
	0x64, 0xe6, 0x05, 0x38, 0x87, 0x75, 0xfb, 0x59, 0x80, 0x02, 0x93, 0x4a, 0x6a, 0x48, 0x97, 0x35,
	0xd7, 0x57, 0x5d, 0x69, 0xb9, 0xcc, 0x4a, 0x97, 0x35, 0xd7, 0x7b, 0x2e, 0x43, 0x41, 0x17, 0x31,
	0xa9, 0xa4, 0xc6, 0x37, 0xbb, 0x55, 0xbe, 0xf5, 0x31, 0x07, 0x33, 0x10, 0x64, 0xde, 0xec, 0x16,
	0x45, 0xe5, 0x7e, 0x36, 0x3b, 0x89, 0x4a, 0x7d, 0x82, 0xe4, 0xa3, 0x31, 0xd1, 0xec, 0x00, 0x32,
	0x70, 0x73, 0x60, 0xd1, 0xac, 0x07, 0x13, 0xdd, 0x85, 0xb3, 0x55, 0xc8, 0xad, 0x56, 0xd1, 0xac,
	0x99, 0xd9, 0x42, 0xb4, 0x38, 0xd7, 0x83, 0x32, 0x66, 0x4b, 0x5a, 0x9c, 0xa3, 0xb9, 0xd5, 0x2a,
	0xee, 0x44, 0xc6, 0xdd, 0x96, 0xc3, 0x16, 0xcd, 0x3a, 0x93, 0xb9, 0x0f, 0x33, 0xee, 0x44, 0x33,
	0x7e, 0xf5, 0x7e, 0x76, 0xa2, 0x00, 0x99, 0x86, 0x64, 0x91, 0x89, 0x50, 0x12, 0x3d, 0x34, 0x08,
	0x13, 0x81, 0x78, 0xd9, 0x0f, 0x13, 0x89, 0xb2, 0xe8, 0xa7, 0x34, 0xd8, 0xbb, 0xe9, 0x36, 0xd7,
	0x99, 0x7f, 0x82, 0x63, 0x82, 0xc3, 0xcc, 0x61, 0xbe, 0x6e, 0xc8, 0x26, 0x4c, 0xc7, 0x6b, 0x19,
	0xf5, 0x3e, 0x44, 0x17, 0xd4, 0x6b, 0xdd, 0x50, 0x09, 0xd3, 0x28, 0x1f, 0x7c, 0x51, 0xdc, 0x12,
	0xd1, 0x83, 0x31, 0x91, 0x62, 0xe6, 0x45, 0xd1, 0x57, 0xe8, 0x61, 0xb1, 0x28, 0x24, 0x2a, 0xf5,
	0x09, 0x86, 0xf3, 0x03, 0x65, 0xb9, 0x47, 0x07, 0x9e, 0x1f, 0x7d, 0x74, 0x44, 0x38, 0x3f, 0x50,
	0x76, 0x0b, 0xc9, 0xa2, 0xcc, 0xd6, 0x5c, 0xb7, 0x3d, 0xdb, 0x8a, 0xc9, 0x96, 0x8f, 0x0d, 0x22,
	0xb3, 0x95, 0x13, 0x5a, 0xea, 0x47, 0x66, 0x4b, 0xaa, 0x47, 0x13, 0xf9, 0xc2, 0x5e, 0x6b, 0xfa,
	0xc1, 0xac, 0xa7, 0xa6, 0x06, 0xe9, 0xb5, 0x3e, 0x63, 0x61, 0x8b, 0x5e, 0x0b, 0x90, 0x69, 0x48,
	0x16, 0x93, 0x88, 0x35, 0x23, 0xc9, 0x13, 0xa6, 0x8e, 0x0c, 0x72, 0x2b, 0xe8, 0x2f, 0x01, 0x83,
	0xd0, 0x2b, 0x46, 0x71, 0x69, 0x8c, 0x3e, 0x7a, 0x51, 0x8b, 0x30, 0x04, 0x98, 0x29, 0x32, 0xf3,
	0x4c, 0xee, 0x2b, 0x86, 0x81, 0xd4, 0xab, 0x08, 0x54, 0xea, 0x13, 0xc4, 0x31, 0x91, 0x4f, 0xe8,
	0x6d, 0x17, 0x93, 0x4d, 0x66, 0x77, 0xc8, 0xe9, 0xcf, 0x9a, 0xeb, 0x27, 0x69, 0x92, 0xc8, 0x34,
	0x24, 0xcb, 0xc5, 0x17, 0x2e, 0x6a, 0x1e, 0x1b, 0x44, 0x7c, 0xe9, 0x2d, 0x68, 0xa2, 0xf8, 0xc2,
	0xc5, 0xcc, 0xbc, 0x2f, 0x64, 0x06, 0xb9, 0x7e, 0xa6, 0x8e, 0x0f, 0xf2, 0xc1, 0x41, 0x1a, 0xa1,
	0x7e, 0x3e, 0x38, 0x40, 0xa6, 0x21, 0x59, 0xfd, 0xa3, 0x39, 0x78, 0x36, 0xeb, 0x96, 0x18, 0x5a,
	0xc3, 0x83, 0xab, 0x74, 0xc4, 0x1a, 0x2e, 0x14, 0x7e, 0x21, 0x46, 0x5f, 0x19, 0x3d, 0xe6, 0xe0,
	0x60, 0x10, 0x73, 0xa1, 0x6e, 0x56, 0xb7, 0x96, 0x42, 0xb5, 0xae, 0x48, 0x5d, 0x18, 0x2f, 0xa4,
	0x9d, 0xf8, 0xe4, 0x25, 0xd8, 0x1f, 0x01, 0x96, 0xe6, 0xa5, 0x2a, 0x4f, 0xa4, 0xf6, 0x8d, 0x16,
	0xd1, 0x38, 0xae, 0xfe, 0x0d, 0x0d, 0x9e, 0x16, 0xc9, 0x3e, 0x58, 0xad, 0x6c, 0xd7, 0x7c, 0xdd,
	0xd9, 0x7d, 0xe4, 0x0a, 0xf9, 0xb8, 0x06, 0xfb, 0x9b, 0xd1, 0x96, 0xe4, 0xd5, 0x3f, 0x7b, 0x20,
	0xd3, 0xee, 0xec, 0x88, 0x4f, 0x8c, 0xa1, 0xd1, 0x38, 0x71, 0xfd, 0x4b, 0x39, 0x38, 0x9f, 0xf1,
	0xf5, 0x13, 0xa1, 0xf0, 0xe8, 0x5a, 0xc3, 0x35, 0xe6, 0x1c, 0x56, 0x63, 0x96, 0x67, 0x1a, 0xf5,
	0x4a, 0x93, 0x55, 0x15, 0x47, 0x08, 0x7c, 0x46, 0x74, 0xf1, 0x6a, 0x65, 0xa6, 0x13, 0x83, 0xa6,
	0xd4, 0x24, 0x8b, 0x40, 0x3a, 0x4b, 0xe4, 0xf4, 0xc0, 0xc8, 0x9f, 0x9d, 0xed, 0xd1, 0x84, 0x1a,
	0x18, 0xbf, 0xd4, 0x7f, 0x55, 0xa5, 0x4c, 0x19, 0x11, 0xbf, 0x54, 0x2d, 0xa0, 0x51, 0x3c, 0x3f,
	0x59, 0xb6, 0x4c, 0x39, 0x2d, 0x3d, 0x28, 0x82, 0x64, 0xd9, 0x12, 0x4c, 0x55, 0x9c, 0x59, 0xfa,
	0xe5, 0x6f, 0x9e, 0x78, 0xcd, 0x57, 0xbe, 0x79, 0xe2, 0x35, 0x7f, 0xfc, 0xcd, 0x13, 0xaf, 0xf9,
	0xc0, 0xf6, 0x09, 0xed, 0xcb, 0xdb, 0x27, 0xb4, 0xaf, 0x6c, 0x9f, 0xd0, 0xfe, 0x78, 0xfb, 0x84,
	0xf6, 0x8d, 0xed, 0x13, 0xda, 0x8f, 0xfe, 0xc5, 0x89, 0xd7, 0x7c, 0xcf, 0xeb, 0xa4, 0xb6, 0x57,
	0x8c, 0xeb, 0x33, 0x6b, 0xf6, 0xf9, 0x84, 0x71, 0xf5, 0xf5, 0xc0, 0xff, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xce, 0xc8, 0xf1, 0x20, 0xa2, 0x4d, 0x01, 0x00,
}

func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Partition != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Partition))
		i--
		dAtA[i] = 0x18
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumeID != nil {
		i -= len(*m.VolumeID)
		copy(dAtA[i:], *m.VolumeID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AffinityApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffinityApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffinityApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodAntiAffinity != nil {
		{
			size, err := m.PodAntiAffinity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PodAffinity != nil {
		{
			size, err := m.PodAffinity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NodeAffinity != nil {
		{
			size, err := m.NodeAffinity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttachedVolumeApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttachedVolumeApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttachedVolumeApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DevicePath != nil {
		i -= len(*m.DevicePath)
		copy(dAtA[i:], *m.DevicePath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DevicePath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureDiskVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureDiskVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureDiskVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		i -= len(*m.Kind)
		copy(dAtA[i:], *m.Kind)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x22
	}
	if m.CachingMode != nil {
		i -= len(*m.CachingMode)
		copy(dAtA[i:], *m.CachingMode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.CachingMode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DataDiskURI != nil {
		i -= len(*m.DataDiskURI)
		copy(dAtA[i:], *m.DataDiskURI)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DataDiskURI)))
		i--
		dAtA[i] = 0x12
	}
	if m.DiskName != nil {
		i -= len(*m.DiskName)
		copy(dAtA[i:], *m.DiskName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DiskName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureFilePersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureFilePersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureFilePersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretNamespace != nil {
		i -= len(*m.SecretNamespace)
		copy(dAtA[i:], *m.SecretNamespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SecretNamespace)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ShareName != nil {
		i -= len(*m.ShareName)
		copy(dAtA[i:], *m.ShareName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ShareName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SecretName != nil {
		i -= len(*m.SecretName)
		copy(dAtA[i:], *m.SecretName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SecretName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureFileVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureFileVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureFileVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ShareName != nil {
		i -= len(*m.ShareName)
		copy(dAtA[i:], *m.ShareName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ShareName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SecretName != nil {
		i -= len(*m.SecretName)
		copy(dAtA[i:], *m.SecretName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SecretName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSIPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSIPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSIPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeExpandSecretRef != nil {
		{
			size, err := m.NodeExpandSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ControllerExpandSecretRef != nil {
		{
			size, err := m.ControllerExpandSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.NodePublishSecretRef != nil {
		{
			size, err := m.NodePublishSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NodeStageSecretRef != nil {
		{
			size, err := m.NodeStageSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ControllerPublishSecretRef != nil {
		{
			size, err := m.ControllerPublishSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.VolumeAttributes) > 0 {
		keysForVolumeAttributes := make([]string, 0, len(m.VolumeAttributes))
		for k := range m.VolumeAttributes {
			keysForVolumeAttributes = append(keysForVolumeAttributes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForVolumeAttributes)
		for iNdEx := len(keysForVolumeAttributes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.VolumeAttributes[string(keysForVolumeAttributes[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForVolumeAttributes[iNdEx])
			copy(dAtA[i:], keysForVolumeAttributes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForVolumeAttributes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VolumeHandle != nil {
		i -= len(*m.VolumeHandle)
		copy(dAtA[i:], *m.VolumeHandle)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeHandle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Driver != nil {
		i -= len(*m.Driver)
		copy(dAtA[i:], *m.Driver)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSIVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSIVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSIVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodePublishSecretRef != nil {
		{
			size, err := m.NodePublishSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolumeAttributes) > 0 {
		keysForVolumeAttributes := make([]string, 0, len(m.VolumeAttributes))
		for k := range m.VolumeAttributes {
			keysForVolumeAttributes = append(keysForVolumeAttributes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForVolumeAttributes)
		for iNdEx := len(keysForVolumeAttributes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.VolumeAttributes[string(keysForVolumeAttributes[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForVolumeAttributes[iNdEx])
			copy(dAtA[i:], keysForVolumeAttributes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForVolumeAttributes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Driver != nil {
		i -= len(*m.Driver)
		copy(dAtA[i:], *m.Driver)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CapabilitiesApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapabilitiesApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CapabilitiesApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Drop) > 0 {
		for iNdEx := len(m.Drop) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Drop[iNdEx])
			copy(dAtA[i:], m.Drop[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Drop[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Add) > 0 {
		for iNdEx := len(m.Add) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Add[iNdEx])
			copy(dAtA[i:], m.Add[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Add[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CephFSPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CephFSPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CephFSPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SecretFile != nil {
		i -= len(*m.SecretFile)
		copy(dAtA[i:], *m.SecretFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SecretFile)))
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		i -= len(*m.User)
		copy(dAtA[i:], *m.User)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Monitors) > 0 {
		for iNdEx := len(m.Monitors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Monitors[iNdEx])
			copy(dAtA[i:], m.Monitors[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Monitors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CephFSVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CephFSVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CephFSVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SecretFile != nil {
		i -= len(*m.SecretFile)
		copy(dAtA[i:], *m.SecretFile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SecretFile)))
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		i -= len(*m.User)
		copy(dAtA[i:], *m.User)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Monitors) > 0 {
		for iNdEx := len(m.Monitors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Monitors[iNdEx])
			copy(dAtA[i:], m.Monitors[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Monitors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CinderPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CinderPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CinderPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumeID != nil {
		i -= len(*m.VolumeID)
		copy(dAtA[i:], *m.VolumeID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CinderVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CinderVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CinderVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumeID != nil {
		i -= len(*m.VolumeID)
		copy(dAtA[i:], *m.VolumeID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResourceClaimTemplateName != nil {
		i -= len(*m.ResourceClaimTemplateName)
		copy(dAtA[i:], *m.ResourceClaimTemplateName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ResourceClaimTemplateName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceClaimName != nil {
		i -= len(*m.ResourceClaimName)
		copy(dAtA[i:], *m.ResourceClaimName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ResourceClaimName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientIPConfigApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientIPConfigApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientIPConfigApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TimeoutSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentConditionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentConditionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentConditionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		i -= len(*m.Error)
		copy(dAtA[i:], *m.Error)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComponentStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigMapApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryData) > 0 {
		keysForBinaryData := make([]string, 0, len(m.BinaryData))
		for k := range m.BinaryData {
			keysForBinaryData = append(keysForBinaryData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForBinaryData)
		for iNdEx := len(keysForBinaryData) - 1; iNdEx >= 0; iNdEx-- {
			v := m.BinaryData[string(keysForBinaryData[iNdEx])]
			baseI := i
			if v != nil {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForBinaryData[iNdEx])
			copy(dAtA[i:], keysForBinaryData[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForBinaryData[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Data) > 0 {
		keysForData := make([]string, 0, len(m.Data))
		for k := range m.Data {
			keysForData = append(keysForData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForData)
		for iNdEx := len(keysForData) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Data[string(keysForData[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForData[iNdEx])
			copy(dAtA[i:], keysForData[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForData[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Immutable != nil {
		i--
		if *m.Immutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigMapEnvSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapEnvSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapEnvSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigMapKeySelectorApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapKeySelectorApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapKeySelectorApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigMapNodeConfigSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapNodeConfigSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapNodeConfigSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubeletConfigKey != nil {
		i -= len(*m.KubeletConfigKey)
		copy(dAtA[i:], *m.KubeletConfigKey)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.KubeletConfigKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ResourceVersion != nil {
		i -= len(*m.ResourceVersion)
		copy(dAtA[i:], *m.ResourceVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.UID != nil {
		i -= len(*m.UID)
		copy(dAtA[i:], *m.UID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.UID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Namespace != nil {
		i -= len(*m.Namespace)
		copy(dAtA[i:], *m.Namespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigMapProjectionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapProjectionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapProjectionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigMapVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DefaultMode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.DefaultMode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContainerApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TTY != nil {
		i--
		if *m.TTY {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.StdinOnce != nil {
		i--
		if *m.StdinOnce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Stdin != nil {
		i--
		if *m.Stdin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.SecurityContext != nil {
		{
			size, err := m.SecurityContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ImagePullPolicy != nil {
		i -= len(*m.ImagePullPolicy)
		copy(dAtA[i:], *m.ImagePullPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ImagePullPolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TerminationMessagePolicy != nil {
		i -= len(*m.TerminationMessagePolicy)
		copy(dAtA[i:], *m.TerminationMessagePolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TerminationMessagePolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.TerminationMessagePath != nil {
		i -= len(*m.TerminationMessagePath)
		copy(dAtA[i:], *m.TerminationMessagePath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TerminationMessagePath)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Lifecycle != nil {
		{
			size, err := m.Lifecycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.StartupProbe != nil {
		{
			size, err := m.StartupProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ReadinessProbe != nil {
		{
			size, err := m.ReadinessProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.LivenessProbe != nil {
		{
			size, err := m.LivenessProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.VolumeDevices) > 0 {
		for iNdEx := len(m.VolumeDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolumeDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.VolumeMounts) > 0 {
		for iNdEx := len(m.VolumeMounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolumeMounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.RestartPolicy != nil {
		i -= len(*m.RestartPolicy)
		copy(dAtA[i:], *m.RestartPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RestartPolicy)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ResizePolicy) > 0 {
		for iNdEx := len(m.ResizePolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResizePolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Env) > 0 {
		for iNdEx := len(m.Env) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Env[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.EnvFrom) > 0 {
		for iNdEx := len(m.EnvFrom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnvFrom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.WorkingDir != nil {
		i -= len(*m.WorkingDir)
		copy(dAtA[i:], *m.WorkingDir)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WorkingDir)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Command) > 0 {
		for iNdEx := len(m.Command) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Command[iNdEx])
			copy(dAtA[i:], m.Command[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Command[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Image != nil {
		i -= len(*m.Image)
		copy(dAtA[i:], *m.Image)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerImageApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerImageApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerImageApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SizeBytes != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.SizeBytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContainerPortApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerPortApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerPortApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostIP != nil {
		i -= len(*m.HostIP)
		copy(dAtA[i:], *m.HostIP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.HostIP)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Protocol != nil {
		i -= len(*m.Protocol)
		copy(dAtA[i:], *m.Protocol)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Protocol)))
		i--
		dAtA[i] = 0x22
	}
	if m.ContainerPort != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ContainerPort))
		i--
		dAtA[i] = 0x18
	}
	if m.HostPort != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.HostPort))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerResizePolicyApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerResizePolicyApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerResizePolicyApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestartPolicy != nil {
		i -= len(*m.RestartPolicy)
		copy(dAtA[i:], *m.RestartPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RestartPolicy)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceName != nil {
		i -= len(*m.ResourceName)
		copy(dAtA[i:], *m.ResourceName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ResourceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStateApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStateApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStateApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Terminated != nil {
		{
			size, err := m.Terminated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Running != nil {
		{
			size, err := m.Running.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Waiting != nil {
		{
			size, err := m.Waiting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStateRunningApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStateRunningApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStateRunningApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedAt != nil {
		{
			size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStateTerminatedApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStateTerminatedApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStateTerminatedApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContainerID != nil {
		i -= len(*m.ContainerID)
		copy(dAtA[i:], *m.ContainerID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ContainerID)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FinishedAt != nil {
		{
			size, err := m.FinishedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StartedAt != nil {
		{
			size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Signal != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Signal))
		i--
		dAtA[i] = 0x10
	}
	if m.ExitCode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ExitCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStateWaitingApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStateWaitingApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStateWaitingApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *DaemonEndpointApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaemonEndpointApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaemonEndpointApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownwardAPIProjectionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownwardAPIProjectionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownwardAPIProjectionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DownwardAPIVolumeFileApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownwardAPIVolumeFileApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownwardAPIVolumeFileApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Mode))
		i--
		dAtA[i] = 0x20
	}
	if m.ResourceFieldRef != nil {
		{
			size, err := m.ResourceFieldRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FieldRef != nil {
		{
			size, err := m.FieldRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownwardAPIVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownwardAPIVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownwardAPIVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultMode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.DefaultMode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EmptyDirVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyDirVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyDirVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SizeLimit != nil {
		{
			size, err := m.SizeLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Medium != nil {
		i -= len(*m.Medium)
		copy(dAtA[i:], *m.Medium)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Medium)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointAddressApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointAddressApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointAddressApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetRef != nil {
		{
			size, err := m.TargetRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NodeName != nil {
		i -= len(*m.NodeName)
		copy(dAtA[i:], *m.NodeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NodeName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Hostname != nil {
		i -= len(*m.Hostname)
		copy(dAtA[i:], *m.Hostname)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if m.IP != nil {
		i -= len(*m.IP)
		copy(dAtA[i:], *m.IP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointPortApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointPortApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointPortApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppProtocol != nil {
		i -= len(*m.AppProtocol)
		copy(dAtA[i:], *m.AppProtocol)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.AppProtocol)))
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != nil {
		i -= len(*m.Protocol)
		copy(dAtA[i:], *m.Protocol)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointSubsetApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSubsetApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointSubsetApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NotReadyAddresses) > 0 {
		for iNdEx := len(m.NotReadyAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotReadyAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndpointsApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointsApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointsApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subsets) > 0 {
		for iNdEx := len(m.Subsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EnvFromSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvFromSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvFromSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ConfigMapRef != nil {
		{
			size, err := m.ConfigMapRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Prefix != nil {
		i -= len(*m.Prefix)
		copy(dAtA[i:], *m.Prefix)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvVarApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvVarApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvVarApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueFrom != nil {
		{
			size, err := m.ValueFrom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvVarSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvVarSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvVarSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretKeyRef != nil {
		{
			size, err := m.SecretKeyRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ConfigMapKeyRef != nil {
		{
			size, err := m.ConfigMapKeyRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResourceFieldRef != nil {
		{
			size, err := m.ResourceFieldRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FieldRef != nil {
		{
			size, err := m.FieldRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralContainerApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralContainerApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralContainerApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetContainerName != nil {
		i -= len(*m.TargetContainerName)
		copy(dAtA[i:], *m.TargetContainerName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TargetContainerName)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.EphemeralContainerCommonApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EphemeralContainerCommonApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralContainerCommonApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralContainerCommonApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TTY != nil {
		i--
		if *m.TTY {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.StdinOnce != nil {
		i--
		if *m.StdinOnce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Stdin != nil {
		i--
		if *m.Stdin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.SecurityContext != nil {
		{
			size, err := m.SecurityContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ImagePullPolicy != nil {
		i -= len(*m.ImagePullPolicy)
		copy(dAtA[i:], *m.ImagePullPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ImagePullPolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TerminationMessagePolicy != nil {
		i -= len(*m.TerminationMessagePolicy)
		copy(dAtA[i:], *m.TerminationMessagePolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TerminationMessagePolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.TerminationMessagePath != nil {
		i -= len(*m.TerminationMessagePath)
		copy(dAtA[i:], *m.TerminationMessagePath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TerminationMessagePath)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Lifecycle != nil {
		{
			size, err := m.Lifecycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.StartupProbe != nil {
		{
			size, err := m.StartupProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ReadinessProbe != nil {
		{
			size, err := m.ReadinessProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.LivenessProbe != nil {
		{
			size, err := m.LivenessProbe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.VolumeDevices) > 0 {
		for iNdEx := len(m.VolumeDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolumeDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.VolumeMounts) > 0 {
		for iNdEx := len(m.VolumeMounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolumeMounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.RestartPolicy != nil {
		i -= len(*m.RestartPolicy)
		copy(dAtA[i:], *m.RestartPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RestartPolicy)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ResizePolicy) > 0 {
		for iNdEx := len(m.ResizePolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResizePolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Env) > 0 {
		for iNdEx := len(m.Env) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Env[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.EnvFrom) > 0 {
		for iNdEx := len(m.EnvFrom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnvFrom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.WorkingDir != nil {
		i -= len(*m.WorkingDir)
		copy(dAtA[i:], *m.WorkingDir)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WorkingDir)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Command) > 0 {
		for iNdEx := len(m.Command) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Command[iNdEx])
			copy(dAtA[i:], m.Command[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Command[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Image != nil {
		i -= len(*m.Image)
		copy(dAtA[i:], *m.Image)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolumeClaimTemplate != nil {
		{
			size, err := m.VolumeClaimTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportingInstance != nil {
		i -= len(*m.ReportingInstance)
		copy(dAtA[i:], *m.ReportingInstance)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ReportingInstance)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ReportingController != nil {
		i -= len(*m.ReportingController)
		copy(dAtA[i:], *m.ReportingController)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ReportingController)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Related != nil {
		{
			size, err := m.Related.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Action != nil {
		i -= len(*m.Action)
		copy(dAtA[i:], *m.Action)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Action)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Series != nil {
		{
			size, err := m.Series.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.EventTime != nil {
		{
			size, err := m.EventTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x52
	}
	if m.Count != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x48
	}
	if m.LastTimestamp != nil {
		{
			size, err := m.LastTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FirstTimestamp != nil {
		{
			size, err := m.FirstTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if m.InvolvedObject != nil {
		{
			size, err := m.InvolvedObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventSeriesApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSeriesApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSeriesApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObservedTime != nil {
		{
			size, err := m.LastObservedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Count != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Host != nil {
		i -= len(*m.Host)
		copy(dAtA[i:], *m.Host)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if m.Component != nil {
		i -= len(*m.Component)
		copy(dAtA[i:], *m.Component)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Component)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecActionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecActionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecActionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		for iNdEx := len(m.Command) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Command[iNdEx])
			copy(dAtA[i:], m.Command[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Command[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FCVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FCVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WWIDs) > 0 {
		for iNdEx := len(m.WWIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WWIDs[iNdEx])
			copy(dAtA[i:], m.WWIDs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.WWIDs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lun != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Lun))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TargetWWNs) > 0 {
		for iNdEx := len(m.TargetWWNs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TargetWWNs[iNdEx])
			copy(dAtA[i:], m.TargetWWNs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.TargetWWNs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlexPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlexPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlexPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Driver != nil {
		i -= len(*m.Driver)
		copy(dAtA[i:], *m.Driver)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlexVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlexVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlexVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		keysForOptions := make([]string, 0, len(m.Options))
		for k := range m.Options {
			keysForOptions = append(keysForOptions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
		for iNdEx := len(keysForOptions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Options[string(keysForOptions[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOptions[iNdEx])
			copy(dAtA[i:], keysForOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Driver != nil {
		i -= len(*m.Driver)
		copy(dAtA[i:], *m.Driver)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Driver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlockerVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlockerVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlockerVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DatasetUUID != nil {
		i -= len(*m.DatasetUUID)
		copy(dAtA[i:], *m.DatasetUUID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DatasetUUID)))
		i--
		dAtA[i] = 0x12
	}
	if m.DatasetName != nil {
		i -= len(*m.DatasetName)
		copy(dAtA[i:], *m.DatasetName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DatasetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Partition != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Partition))
		i--
		dAtA[i] = 0x18
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.PDName != nil {
		i -= len(*m.PDName)
		copy(dAtA[i:], *m.PDName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PDName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GRPCActionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCActionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCActionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		i -= len(*m.Service)
		copy(dAtA[i:], *m.Service)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Service)))
		i--
		dAtA[i] = 0x12
	}
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GitRepoVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitRepoVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitRepoVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Directory != nil {
		i -= len(*m.Directory)
		copy(dAtA[i:], *m.Directory)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Directory)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Revision != nil {
		i -= len(*m.Revision)
		copy(dAtA[i:], *m.Revision)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Revision)))
		i--
		dAtA[i] = 0x12
	}
	if m.Repository != nil {
		i -= len(*m.Repository)
		copy(dAtA[i:], *m.Repository)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Repository)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndpointsNamespace != nil {
		i -= len(*m.EndpointsNamespace)
		copy(dAtA[i:], *m.EndpointsNamespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.EndpointsNamespace)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.EndpointsName != nil {
		i -= len(*m.EndpointsName)
		copy(dAtA[i:], *m.EndpointsName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.EndpointsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlusterfsVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlusterfsVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlusterfsVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.EndpointsName != nil {
		i -= len(*m.EndpointsName)
		copy(dAtA[i:], *m.EndpointsName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.EndpointsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPGetActionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPGetActionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPGetActionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HTTPHeaders) > 0 {
		for iNdEx := len(m.HTTPHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HTTPHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Scheme != nil {
		i -= len(*m.Scheme)
		copy(dAtA[i:], *m.Scheme)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Scheme)))
		i--
		dAtA[i] = 0x22
	}
	if m.Host != nil {
		i -= len(*m.Host)
		copy(dAtA[i:], *m.Host)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != nil {
		{
			size, err := m.Port.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPHeaderApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPHeaderApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPHeaderApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostAliasApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostAliasApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostAliasApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostnames) > 0 {
		for iNdEx := len(m.Hostnames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hostnames[iNdEx])
			copy(dAtA[i:], m.Hostnames[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Hostnames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IP != nil {
		i -= len(*m.IP)
		copy(dAtA[i:], *m.IP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostIPApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostIPApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostIPApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IP != nil {
		i -= len(*m.IP)
		copy(dAtA[i:], *m.IP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostPathVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostPathVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostPathVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ISCSIPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ISCSIPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ISCSIPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatorName != nil {
		i -= len(*m.InitiatorName)
		copy(dAtA[i:], *m.InitiatorName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.InitiatorName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SessionCHAPAuth != nil {
		i--
		if *m.SessionCHAPAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DiscoveryCHAPAuth != nil {
		i--
		if *m.DiscoveryCHAPAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Portals) > 0 {
		for iNdEx := len(m.Portals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Portals[iNdEx])
			copy(dAtA[i:], m.Portals[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Portals[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ISCSIInterface != nil {
		i -= len(*m.ISCSIInterface)
		copy(dAtA[i:], *m.ISCSIInterface)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ISCSIInterface)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lun != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Lun))
		i--
		dAtA[i] = 0x18
	}
	if m.IQN != nil {
		i -= len(*m.IQN)
		copy(dAtA[i:], *m.IQN)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IQN)))
		i--
		dAtA[i] = 0x12
	}
	if m.TargetPortal != nil {
		i -= len(*m.TargetPortal)
		copy(dAtA[i:], *m.TargetPortal)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TargetPortal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ISCSIVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ISCSIVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ISCSIVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatorName != nil {
		i -= len(*m.InitiatorName)
		copy(dAtA[i:], *m.InitiatorName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.InitiatorName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SessionCHAPAuth != nil {
		i--
		if *m.SessionCHAPAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DiscoveryCHAPAuth != nil {
		i--
		if *m.DiscoveryCHAPAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Portals) > 0 {
		for iNdEx := len(m.Portals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Portals[iNdEx])
			copy(dAtA[i:], m.Portals[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Portals[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ISCSIInterface != nil {
		i -= len(*m.ISCSIInterface)
		copy(dAtA[i:], *m.ISCSIInterface)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ISCSIInterface)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lun != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Lun))
		i--
		dAtA[i] = 0x18
	}
	if m.IQN != nil {
		i -= len(*m.IQN)
		copy(dAtA[i:], *m.IQN)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IQN)))
		i--
		dAtA[i] = 0x12
	}
	if m.TargetPortal != nil {
		i -= len(*m.TargetPortal)
		copy(dAtA[i:], *m.TargetPortal)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TargetPortal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyToPathApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyToPathApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyToPathApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LifecycleApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifecycleApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LifecycleApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreStop != nil {
		{
			size, err := m.PreStop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PostStart != nil {
		{
			size, err := m.PostStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LifecycleHandlerApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifecycleHandlerApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LifecycleHandlerApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TCPSocket != nil {
		{
			size, err := m.TCPSocket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HTTPGet != nil {
		{
			size, err := m.HTTPGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Exec != nil {
		{
			size, err := m.Exec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LimitRangeApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitRangeApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitRangeApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LimitRangeItemApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitRangeItemApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitRangeItemApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *LimitRangeSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitRangeSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitRangeSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoadBalancerIngressApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadBalancerIngressApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadBalancerIngressApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IPMode != nil {
		i -= len(*m.IPMode)
		copy(dAtA[i:], *m.IPMode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IPMode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Hostname != nil {
		i -= len(*m.Hostname)
		copy(dAtA[i:], *m.Hostname)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if m.IP != nil {
		i -= len(*m.IP)
		copy(dAtA[i:], *m.IP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadBalancerStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadBalancerStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadBalancerStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ingress) > 0 {
		for iNdEx := len(m.Ingress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ingress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LocalObjectReferenceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalObjectReferenceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalObjectReferenceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NFSVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFSVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFSVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Server != nil {
		i -= len(*m.Server)
		copy(dAtA[i:], *m.Server)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Server)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NamespaceConditionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceConditionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceConditionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Finalizers) > 0 {
		for iNdEx := len(m.Finalizers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Finalizers[iNdEx])
			copy(dAtA[i:], m.Finalizers[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Finalizers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Phase != nil {
		i -= len(*m.Phase)
		copy(dAtA[i:], *m.Phase)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Phase)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeAddressApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeAddressApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeAddressApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		i -= len(*m.Address)
		copy(dAtA[i:], *m.Address)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeAffinityApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeAffinityApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeAffinityApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredDuringSchedulingIgnoredDuringExecution) > 0 {
		for iNdEx := len(m.PreferredDuringSchedulingIgnoredDuringExecution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreferredDuringSchedulingIgnoredDuringExecution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		{
			size, err := m.RequiredDuringSchedulingIgnoredDuringExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeConditionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConditionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeConditionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastHeartbeatTime != nil {
		{
			size, err := m.LastHeartbeatTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeConfigSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConfigSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeConfigSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigMap != nil {
		{
			size, err := m.ConfigMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeConfigStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConfigStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeConfigStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		i -= len(*m.Error)
		copy(dAtA[i:], *m.Error)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastKnownGood != nil {
		{
			size, err := m.LastKnownGood.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Active != nil {
		{
			size, err := m.Active.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Assigned != nil {
		{
			size, err := m.Assigned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeDaemonEndpointsApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDaemonEndpointsApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDaemonEndpointsApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubeletEndpoint != nil {
		{
			size, err := m.KubeletEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSelectorApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSelectorApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSelectorApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeSelectorTerms) > 0 {
		for iNdEx := len(m.NodeSelectorTerms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeSelectorTerms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeSelectorRequirementApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSelectorRequirementApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSelectorRequirementApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSelectorTermApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSelectorTermApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSelectorTermApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchFields) > 0 {
		for iNdEx := len(m.MatchFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MatchExpressions) > 0 {
		for iNdEx := len(m.MatchExpressions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchExpressions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoNotUseExternalID != nil {
		i -= len(*m.DoNotUseExternalID)
		copy(dAtA[i:], *m.DoNotUseExternalID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DoNotUseExternalID)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ConfigSource != nil {
		{
			size, err := m.ConfigSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Taints) > 0 {
		for iNdEx := len(m.Taints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Taints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Unschedulable != nil {
		i--
		if *m.Unschedulable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ProviderID != nil {
		i -= len(*m.ProviderID)
		copy(dAtA[i:], *m.ProviderID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ProviderID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PodCIDRs) > 0 {
		for iNdEx := len(m.PodCIDRs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PodCIDRs[iNdEx])
			copy(dAtA[i:], m.PodCIDRs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.PodCIDRs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PodCIDR != nil {
		i -= len(*m.PodCIDR)
		copy(dAtA[i:], *m.PodCIDR)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PodCIDR)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *NodeSystemInfoApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSystemInfoApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSystemInfoApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Architecture != nil {
		i -= len(*m.Architecture)
		copy(dAtA[i:], *m.Architecture)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Architecture)))
		i--
		dAtA[i] = 0x52
	}
	if m.OperatingSystem != nil {
		i -= len(*m.OperatingSystem)
		copy(dAtA[i:], *m.OperatingSystem)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.OperatingSystem)))
		i--
		dAtA[i] = 0x4a
	}
	if m.KubeProxyVersion != nil {
		i -= len(*m.KubeProxyVersion)
		copy(dAtA[i:], *m.KubeProxyVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.KubeProxyVersion)))
		i--
		dAtA[i] = 0x42
	}
	if m.KubeletVersion != nil {
		i -= len(*m.KubeletVersion)
		copy(dAtA[i:], *m.KubeletVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.KubeletVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ContainerRuntimeVersion != nil {
		i -= len(*m.ContainerRuntimeVersion)
		copy(dAtA[i:], *m.ContainerRuntimeVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ContainerRuntimeVersion)))
		i--
		dAtA[i] = 0x32
	}
	if m.OSImage != nil {
		i -= len(*m.OSImage)
		copy(dAtA[i:], *m.OSImage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.OSImage)))
		i--
		dAtA[i] = 0x2a
	}
	if m.KernelVersion != nil {
		i -= len(*m.KernelVersion)
		copy(dAtA[i:], *m.KernelVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.KernelVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.BootID != nil {
		i -= len(*m.BootID)
		copy(dAtA[i:], *m.BootID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.BootID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemUUID != nil {
		i -= len(*m.SystemUUID)
		copy(dAtA[i:], *m.SystemUUID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SystemUUID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MachineID != nil {
		i -= len(*m.MachineID)
		copy(dAtA[i:], *m.MachineID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.MachineID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectFieldSelectorApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectFieldSelectorApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectFieldSelectorApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldPath != nil {
		i -= len(*m.FieldPath)
		copy(dAtA[i:], *m.FieldPath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FieldPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.APIVersion != nil {
		i -= len(*m.APIVersion)
		copy(dAtA[i:], *m.APIVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.APIVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectReferenceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectReferenceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectReferenceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldPath != nil {
		i -= len(*m.FieldPath)
		copy(dAtA[i:], *m.FieldPath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FieldPath)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ResourceVersion != nil {
		i -= len(*m.ResourceVersion)
		copy(dAtA[i:], *m.ResourceVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ResourceVersion)))
		i--
		dAtA[i] = 0x32
	}
	if m.APIVersion != nil {
		i -= len(*m.APIVersion)
		copy(dAtA[i:], *m.APIVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.APIVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UID != nil {
		i -= len(*m.UID)
		copy(dAtA[i:], *m.UID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.UID)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Namespace != nil {
		i -= len(*m.Namespace)
		copy(dAtA[i:], *m.Namespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != nil {
		i -= len(*m.Kind)
		copy(dAtA[i:], *m.Kind)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeClaimApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeClaimConditionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimConditionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimConditionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastProbeTime != nil {
		{
			size, err := m.LastProbeTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeClaimSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSourceRef != nil {
		{
			size, err := m.DataSourceRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DataSource != nil {
		{
			size, err := m.DataSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.VolumeMode != nil {
		i -= len(*m.VolumeMode)
		copy(dAtA[i:], *m.VolumeMode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeMode)))
		i--
		dAtA[i] = 0x32
	}
	if m.StorageClassName != nil {
		i -= len(*m.StorageClassName)
		copy(dAtA[i:], *m.StorageClassName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StorageClassName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VolumeName != nil {
		i -= len(*m.VolumeName)
		copy(dAtA[i:], *m.VolumeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessModes) > 0 {
		for iNdEx := len(m.AccessModes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccessModes[iNdEx])
			copy(dAtA[i:], m.AccessModes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.AccessModes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeClaimStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *PersistentVolumeClaimTemplateApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimTemplateApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimTemplateApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ClaimName != nil {
		i -= len(*m.ClaimName)
		copy(dAtA[i:], *m.ClaimName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ClaimName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CSI != nil {
		{
			size, err := m.CSI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.StorageOS != nil {
		{
			size, err := m.StorageOS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Local != nil {
		{
			size, err := m.Local.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ScaleIO != nil {
		{
			size, err := m.ScaleIO.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PortworxVolume != nil {
		{
			size, err := m.PortworxVolume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.PhotonPersistentDisk != nil {
		{
			size, err := m.PhotonPersistentDisk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.AzureDisk != nil {
		{
			size, err := m.AzureDisk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Quobyte != nil {
		{
			size, err := m.Quobyte.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.VsphereVolume != nil {
		{
			size, err := m.VsphereVolume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.AzureFile != nil {
		{
			size, err := m.AzureFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.FlexVolume != nil {
		{
			size, err := m.FlexVolume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Flocker != nil {
		{
			size, err := m.Flocker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.FC != nil {
		{
			size, err := m.FC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CephFS != nil {
		{
			size, err := m.CephFS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Cinder != nil {
		{
			size, err := m.Cinder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ISCSI != nil {
		{
			size, err := m.ISCSI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RBD != nil {
		{
			size, err := m.RBD.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.NFS != nil {
		{
			size, err := m.NFS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Glusterfs != nil {
		{
			size, err := m.Glusterfs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HostPath != nil {
		{
			size, err := m.HostPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AWSElasticBlockStore != nil {
		{
			size, err := m.AWSElasticBlockStore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GCEPersistentDisk != nil {
		{
			size, err := m.GCEPersistentDisk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *PersistentVolumeStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastPhaseTransitionTime != nil {
		{
			size, err := m.LastPhaseTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Phase != nil {
		i -= len(*m.Phase)
		copy(dAtA[i:], *m.Phase)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Phase)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.PdID != nil {
		i -= len(*m.PdID)
		copy(dAtA[i:], *m.PdID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PdID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodAffinityApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodAffinityApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodAffinityApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredDuringSchedulingIgnoredDuringExecution) > 0 {
		for iNdEx := len(m.PreferredDuringSchedulingIgnoredDuringExecution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreferredDuringSchedulingIgnoredDuringExecution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequiredDuringSchedulingIgnoredDuringExecution) > 0 {
		for iNdEx := len(m.RequiredDuringSchedulingIgnoredDuringExecution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredDuringSchedulingIgnoredDuringExecution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodAffinityTermApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodAffinityTermApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodAffinityTermApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NamespaceSelector != nil {
		{
			size, err := m.NamespaceSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TopologyKey != nil {
		i -= len(*m.TopologyKey)
		copy(dAtA[i:], *m.TopologyKey)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TopologyKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LabelSelector != nil {
		{
			size, err := m.LabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodAntiAffinityApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodAntiAffinityApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodAntiAffinityApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredDuringSchedulingIgnoredDuringExecution) > 0 {
		for iNdEx := len(m.PreferredDuringSchedulingIgnoredDuringExecution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreferredDuringSchedulingIgnoredDuringExecution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequiredDuringSchedulingIgnoredDuringExecution) > 0 {
		for iNdEx := len(m.RequiredDuringSchedulingIgnoredDuringExecution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredDuringSchedulingIgnoredDuringExecution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PodConditionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodConditionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodConditionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastProbeTime != nil {
		{
			size, err := m.LastProbeTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodDNSConfigApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodDNSConfigApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodDNSConfigApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Searches) > 0 {
		for iNdEx := len(m.Searches) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Searches[iNdEx])
			copy(dAtA[i:], m.Searches[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Searches[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Nameservers) > 0 {
		for iNdEx := len(m.Nameservers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nameservers[iNdEx])
			copy(dAtA[i:], m.Nameservers[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Nameservers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodDNSConfigOptionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodDNSConfigOptionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodDNSConfigOptionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodIPApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodIPApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodIPApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IP != nil {
		i -= len(*m.IP)
		copy(dAtA[i:], *m.IP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodOSApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodOSApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodOSApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodReadinessGateApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodReadinessGateApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodReadinessGateApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConditionType != nil {
		i -= len(*m.ConditionType)
		copy(dAtA[i:], *m.ConditionType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ConditionType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodResourceClaimApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodResourceClaimApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodResourceClaimApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodResourceClaimStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodResourceClaimStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodResourceClaimStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResourceClaimName != nil {
		i -= len(*m.ResourceClaimName)
		copy(dAtA[i:], *m.ResourceClaimName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ResourceClaimName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodSchedulingGateApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodSchedulingGateApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSchedulingGateApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodSecurityContextApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodSecurityContextApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityContextApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeccompProfile != nil {
		{
			size, err := m.SeccompProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.FSGroupChangePolicy != nil {
		i -= len(*m.FSGroupChangePolicy)
		copy(dAtA[i:], *m.FSGroupChangePolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSGroupChangePolicy)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Sysctls) > 0 {
		for iNdEx := len(m.Sysctls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sysctls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FSGroup != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.FSGroup))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SupplementalGroups) > 0 {
		for iNdEx := len(m.SupplementalGroups) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGenerated(dAtA, i, uint64(m.SupplementalGroups[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.RunAsNonRoot != nil {
		i--
		if *m.RunAsNonRoot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.RunAsGroup != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RunAsGroup))
		i--
		dAtA[i] = 0x20
	}
	if m.RunAsUser != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RunAsUser))
		i--
		dAtA[i] = 0x18
	}
	if m.WindowsOptions != nil {
		{
			size, err := m.WindowsOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SELinuxOptions != nil {
		{
			size, err := m.SELinuxOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *PodStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceClaimStatuses) > 0 {
		for iNdEx := len(m.ResourceClaimStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceClaimStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Resize != nil {
		i -= len(*m.Resize)
		copy(dAtA[i:], *m.Resize)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Resize)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.EphemeralContainerStatuses) > 0 {
		for iNdEx := len(m.EphemeralContainerStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EphemeralContainerStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.QOSClass != nil {
		i -= len(*m.QOSClass)
		copy(dAtA[i:], *m.QOSClass)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.QOSClass)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ContainerStatuses) > 0 {
		for iNdEx := len(m.ContainerStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContainerStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.InitContainerStatuses) > 0 {
		for iNdEx := len(m.InitContainerStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitContainerStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.PodIPs) > 0 {
		for iNdEx := len(m.PodIPs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodIPs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.PodIP != nil {
		i -= len(*m.PodIP)
		copy(dAtA[i:], *m.PodIP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.PodIP)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HostIPs) > 0 {
		for iNdEx := len(m.HostIPs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostIPs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.HostIP != nil {
		i -= len(*m.HostIP)
		copy(dAtA[i:], *m.HostIP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.HostIP)))
		i--
		dAtA[i] = 0x32
	}
	if m.NominatedNodeName != nil {
		i -= len(*m.NominatedNodeName)
		copy(dAtA[i:], *m.NominatedNodeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NominatedNodeName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Phase != nil {
		i -= len(*m.Phase)
		copy(dAtA[i:], *m.Phase)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Phase)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodTemplateApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodTemplateApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodTemplateApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Template != nil {
		{
			size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PodTemplateSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodTemplateSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodTemplateSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PortStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		i -= len(*m.Error)
		copy(dAtA[i:], *m.Error)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Protocol != nil {
		i -= len(*m.Protocol)
		copy(dAtA[i:], *m.Protocol)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Protocol)))
		i--
		dAtA[i] = 0x12
	}
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PortworxVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortworxVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortworxVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumeID != nil {
		i -= len(*m.VolumeID)
		copy(dAtA[i:], *m.VolumeID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreferredSchedulingTermApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreferredSchedulingTermApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreferredSchedulingTermApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Preference != nil {
		{
			size, err := m.Preference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Weight != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProbeApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProbeApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TerminationGracePeriodSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TerminationGracePeriodSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.FailureThreshold != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.FailureThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.SuccessThreshold != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.SuccessThreshold))
		i--
		dAtA[i] = 0x28
	}
	if m.PeriodSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.PeriodSeconds))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TimeoutSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.InitialDelaySeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.InitialDelaySeconds))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProbeHandlerApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProbeHandlerApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeHandlerApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProbeHandlerApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GRPC != nil {
		{
			size, err := m.GRPC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TCPSocket != nil {
		{
			size, err := m.TCPSocket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HTTPGet != nil {
		{
			size, err := m.HTTPGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Exec != nil {
		{
			size, err := m.Exec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectedVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectedVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectedVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultMode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.DefaultMode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sources) > 0 {
		for iNdEx := len(m.Sources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuobyteVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuobyteVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuobyteVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tenant != nil {
		i -= len(*m.Tenant)
		copy(dAtA[i:], *m.Tenant)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Tenant)))
		i--
		dAtA[i] = 0x32
	}
	if m.Group != nil {
		i -= len(*m.Group)
		copy(dAtA[i:], *m.Group)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if m.User != nil {
		i -= len(*m.User)
		copy(dAtA[i:], *m.User)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.User)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Volume != nil {
		i -= len(*m.Volume)
		copy(dAtA[i:], *m.Volume)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Volume)))
		i--
		dAtA[i] = 0x12
	}
	if m.Registry != nil {
		i -= len(*m.Registry)
		copy(dAtA[i:], *m.Registry)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Registry)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RBDPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBDPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBDPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Keyring != nil {
		i -= len(*m.Keyring)
		copy(dAtA[i:], *m.Keyring)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Keyring)))
		i--
		dAtA[i] = 0x32
	}
	if m.RadosUser != nil {
		i -= len(*m.RadosUser)
		copy(dAtA[i:], *m.RadosUser)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RadosUser)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RBDPool != nil {
		i -= len(*m.RBDPool)
		copy(dAtA[i:], *m.RBDPool)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RBDPool)))
		i--
		dAtA[i] = 0x22
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RBDImage != nil {
		i -= len(*m.RBDImage)
		copy(dAtA[i:], *m.RBDImage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RBDImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CephMonitors) > 0 {
		for iNdEx := len(m.CephMonitors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CephMonitors[iNdEx])
			copy(dAtA[i:], m.CephMonitors[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.CephMonitors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RBDVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBDVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBDVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Keyring != nil {
		i -= len(*m.Keyring)
		copy(dAtA[i:], *m.Keyring)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Keyring)))
		i--
		dAtA[i] = 0x32
	}
	if m.RadosUser != nil {
		i -= len(*m.RadosUser)
		copy(dAtA[i:], *m.RadosUser)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RadosUser)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RBDPool != nil {
		i -= len(*m.RBDPool)
		copy(dAtA[i:], *m.RBDPool)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RBDPool)))
		i--
		dAtA[i] = 0x22
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RBDImage != nil {
		i -= len(*m.RBDImage)
		copy(dAtA[i:], *m.RBDImage)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RBDImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CephMonitors) > 0 {
		for iNdEx := len(m.CephMonitors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CephMonitors[iNdEx])
			copy(dAtA[i:], m.CephMonitors[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.CephMonitors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationControllerApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationControllerApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationControllerApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReplicationControllerConditionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationControllerConditionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationControllerConditionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationControllerSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationControllerSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationControllerSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Template != nil {
		{
			size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Selector) > 0 {
		keysForSelector := make([]string, 0, len(m.Selector))
		for k := range m.Selector {
			keysForSelector = append(keysForSelector, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSelector)
		for iNdEx := len(keysForSelector) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Selector[string(keysForSelector[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForSelector[iNdEx])
			copy(dAtA[i:], keysForSelector[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForSelector[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinReadySeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinReadySeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Replicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Replicas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationControllerStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationControllerStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationControllerStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ObservedGeneration != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ObservedGeneration))
		i--
		dAtA[i] = 0x28
	}
	if m.AvailableReplicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.AvailableReplicas))
		i--
		dAtA[i] = 0x20
	}
	if m.ReadyReplicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ReadyReplicas))
		i--
		dAtA[i] = 0x18
	}
	if m.FullyLabeledReplicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.FullyLabeledReplicas))
		i--
		dAtA[i] = 0x10
	}
	if m.Replicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Replicas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResourceClaimApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceClaimApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceClaimApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceFieldSelectorApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceFieldSelectorApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceFieldSelectorApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Divisor != nil {
		{
			size, err := m.Divisor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Resource != nil {
		i -= len(*m.Resource)
		copy(dAtA[i:], *m.Resource)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Resource)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContainerName != nil {
		i -= len(*m.ContainerName)
		copy(dAtA[i:], *m.ContainerName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ContainerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceQuotaApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceQuotaApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceQuotaApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ResourceQuotaSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceQuotaSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceQuotaSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *ResourceQuotaStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceQuotaStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceQuotaStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *ResourceRequirementsApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceRequirementsApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceRequirementsApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	return 0, errors.New("foo")
}

func (m *SELinuxOptionsApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SELinuxOptionsApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SELinuxOptionsApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != nil {
		i -= len(*m.Level)
		copy(dAtA[i:], *m.Level)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Level)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Role != nil {
		i -= len(*m.Role)
		copy(dAtA[i:], *m.Role)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if m.User != nil {
		i -= len(*m.User)
		copy(dAtA[i:], *m.User)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.VolumeName != nil {
		i -= len(*m.VolumeName)
		copy(dAtA[i:], *m.VolumeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeName)))
		i--
		dAtA[i] = 0x42
	}
	if m.StorageMode != nil {
		i -= len(*m.StorageMode)
		copy(dAtA[i:], *m.StorageMode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StorageMode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StoragePool != nil {
		i -= len(*m.StoragePool)
		copy(dAtA[i:], *m.StoragePool)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StoragePool)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProtectionDomain != nil {
		i -= len(*m.ProtectionDomain)
		copy(dAtA[i:], *m.ProtectionDomain)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ProtectionDomain)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SSLEnabled != nil {
		i--
		if *m.SSLEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.System != nil {
		i -= len(*m.System)
		copy(dAtA[i:], *m.System)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.System)))
		i--
		dAtA[i] = 0x12
	}
	if m.Gateway != nil {
		i -= len(*m.Gateway)
		copy(dAtA[i:], *m.Gateway)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Gateway)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScaleIOVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScaleIOVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScaleIOVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.VolumeName != nil {
		i -= len(*m.VolumeName)
		copy(dAtA[i:], *m.VolumeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeName)))
		i--
		dAtA[i] = 0x42
	}
	if m.StorageMode != nil {
		i -= len(*m.StorageMode)
		copy(dAtA[i:], *m.StorageMode)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StorageMode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StoragePool != nil {
		i -= len(*m.StoragePool)
		copy(dAtA[i:], *m.StoragePool)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StoragePool)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProtectionDomain != nil {
		i -= len(*m.ProtectionDomain)
		copy(dAtA[i:], *m.ProtectionDomain)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ProtectionDomain)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SSLEnabled != nil {
		i--
		if *m.SSLEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.System != nil {
		i -= len(*m.System)
		copy(dAtA[i:], *m.System)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.System)))
		i--
		dAtA[i] = 0x12
	}
	if m.Gateway != nil {
		i -= len(*m.Gateway)
		copy(dAtA[i:], *m.Gateway)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Gateway)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSelectorApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSelectorApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSelectorApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchExpressions) > 0 {
		for iNdEx := len(m.MatchExpressions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchExpressions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScopedResourceSelectorRequirementApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopedResourceSelectorRequirementApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopedResourceSelectorRequirementApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScopeName != nil {
		i -= len(*m.ScopeName)
		copy(dAtA[i:], *m.ScopeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ScopeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeccompProfileApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeccompProfileApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeccompProfileApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalhostProfile != nil {
		i -= len(*m.LocalhostProfile)
		copy(dAtA[i:], *m.LocalhostProfile)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LocalhostProfile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StringData) > 0 {
		keysForStringData := make([]string, 0, len(m.StringData))
		for k := range m.StringData {
			keysForStringData = append(keysForStringData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringData)
		for iNdEx := len(keysForStringData) - 1; iNdEx >= 0; iNdEx-- {
			v := m.StringData[string(keysForStringData[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForStringData[iNdEx])
			copy(dAtA[i:], keysForStringData[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForStringData[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Data) > 0 {
		keysForData := make([]string, 0, len(m.Data))
		for k := range m.Data {
			keysForData = append(keysForData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForData)
		for iNdEx := len(keysForData) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Data[string(keysForData[iNdEx])]
			baseI := i
			if v != nil {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForData[iNdEx])
			copy(dAtA[i:], keysForData[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForData[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Immutable != nil {
		i--
		if *m.Immutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SecretEnvSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretEnvSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretEnvSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SecretKeySelectorApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretKeySelectorApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretKeySelectorApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SecretProjectionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretProjectionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretProjectionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LocalObjectReferenceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SecretReferenceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretReferenceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretReferenceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Namespace != nil {
		i -= len(*m.Namespace)
		copy(dAtA[i:], *m.Namespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Optional != nil {
		i--
		if *m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DefaultMode != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.DefaultMode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SecretName != nil {
		i -= len(*m.SecretName)
		copy(dAtA[i:], *m.SecretName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SecretName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityContextApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityContextApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityContextApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeccompProfile != nil {
		{
			size, err := m.SeccompProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ProcMount != nil {
		i -= len(*m.ProcMount)
		copy(dAtA[i:], *m.ProcMount)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ProcMount)))
		i--
		dAtA[i] = 0x52
	}
	if m.AllowPrivilegeEscalation != nil {
		i--
		if *m.AllowPrivilegeEscalation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.ReadOnlyRootFilesystem != nil {
		i--
		if *m.ReadOnlyRootFilesystem {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.RunAsNonRoot != nil {
		i--
		if *m.RunAsNonRoot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RunAsGroup != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RunAsGroup))
		i--
		dAtA[i] = 0x30
	}
	if m.RunAsUser != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RunAsUser))
		i--
		dAtA[i] = 0x28
	}
	if m.WindowsOptions != nil {
		{
			size, err := m.WindowsOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SELinuxOptions != nil {
		{
			size, err := m.SELinuxOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Privileged != nil {
		i--
		if *m.Privileged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Capabilities != nil {
		{
			size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceAccountApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutomountServiceAccountToken != nil {
		i--
		if *m.AutomountServiceAccountToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ImagePullSecrets) > 0 {
		for iNdEx := len(m.ImagePullSecrets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImagePullSecrets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Secrets) > 0 {
		for iNdEx := len(m.Secrets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Secrets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceAccountTokenProjectionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountTokenProjectionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountTokenProjectionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpirationSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ExpirationSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Audience != nil {
		i -= len(*m.Audience)
		copy(dAtA[i:], *m.Audience)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Audience)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectMetaApplyConfiguration != nil {
		{
			size, err := m.ObjectMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TypeMetaApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServicePortApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePortApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePortApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodePort != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.NodePort))
		i--
		dAtA[i] = 0x30
	}
	if m.TargetPort != nil {
		{
			size, err := m.TargetPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.AppProtocol != nil {
		i -= len(*m.AppProtocol)
		copy(dAtA[i:], *m.AppProtocol)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.AppProtocol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Protocol != nil {
		i -= len(*m.Protocol)
		copy(dAtA[i:], *m.Protocol)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Protocol)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceSpecApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSpecApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSpecApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InternalTrafficPolicy != nil {
		i -= len(*m.InternalTrafficPolicy)
		copy(dAtA[i:], *m.InternalTrafficPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.InternalTrafficPolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.LoadBalancerClass != nil {
		i -= len(*m.LoadBalancerClass)
		copy(dAtA[i:], *m.LoadBalancerClass)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LoadBalancerClass)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.AllocateLoadBalancerNodePorts != nil {
		i--
		if *m.AllocateLoadBalancerNodePorts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IPFamilyPolicy != nil {
		i -= len(*m.IPFamilyPolicy)
		copy(dAtA[i:], *m.IPFamilyPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.IPFamilyPolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.IPFamilies) > 0 {
		for iNdEx := len(m.IPFamilies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IPFamilies[iNdEx])
			copy(dAtA[i:], m.IPFamilies[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPFamilies[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.SessionAffinityConfig != nil {
		{
			size, err := m.SessionAffinityConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.PublishNotReadyAddresses != nil {
		i--
		if *m.PublishNotReadyAddresses {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.HealthCheckNodePort != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.HealthCheckNodePort))
		i--
		dAtA[i] = 0x60
	}
	if m.ExternalTrafficPolicy != nil {
		i -= len(*m.ExternalTrafficPolicy)
		copy(dAtA[i:], *m.ExternalTrafficPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ExternalTrafficPolicy)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ExternalName != nil {
		i -= len(*m.ExternalName)
		copy(dAtA[i:], *m.ExternalName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ExternalName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LoadBalancerSourceRanges) > 0 {
		for iNdEx := len(m.LoadBalancerSourceRanges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoadBalancerSourceRanges[iNdEx])
			copy(dAtA[i:], m.LoadBalancerSourceRanges[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.LoadBalancerSourceRanges[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.LoadBalancerIP != nil {
		i -= len(*m.LoadBalancerIP)
		copy(dAtA[i:], *m.LoadBalancerIP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.LoadBalancerIP)))
		i--
		dAtA[i] = 0x42
	}
	if m.SessionAffinity != nil {
		i -= len(*m.SessionAffinity)
		copy(dAtA[i:], *m.SessionAffinity)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SessionAffinity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalIPs) > 0 {
		for iNdEx := len(m.ExternalIPs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalIPs[iNdEx])
			copy(dAtA[i:], m.ExternalIPs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalIPs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterIPs) > 0 {
		for iNdEx := len(m.ClusterIPs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterIPs[iNdEx])
			copy(dAtA[i:], m.ClusterIPs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterIPs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ClusterIP != nil {
		i -= len(*m.ClusterIP)
		copy(dAtA[i:], *m.ClusterIP)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.ClusterIP)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Selector) > 0 {
		keysForSelector := make([]string, 0, len(m.Selector))
		for k := range m.Selector {
			keysForSelector = append(keysForSelector, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSelector)
		for iNdEx := len(keysForSelector) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Selector[string(keysForSelector[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForSelector[iNdEx])
			copy(dAtA[i:], keysForSelector[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForSelector[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatusApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LoadBalancer != nil {
		{
			size, err := m.LoadBalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionAffinityConfigApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionAffinityConfigApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionAffinityConfigApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientIP != nil {
		{
			size, err := m.ClientIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageOSPersistentVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageOSPersistentVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageOSPersistentVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VolumeNamespace != nil {
		i -= len(*m.VolumeNamespace)
		copy(dAtA[i:], *m.VolumeNamespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumeName != nil {
		i -= len(*m.VolumeName)
		copy(dAtA[i:], *m.VolumeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageOSVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageOSVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageOSVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VolumeNamespace != nil {
		i -= len(*m.VolumeNamespace)
		copy(dAtA[i:], *m.VolumeNamespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumeName != nil {
		i -= len(*m.VolumeName)
		copy(dAtA[i:], *m.VolumeName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SysctlApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysctlApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysctlApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TCPSocketActionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPSocketActionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPSocketActionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Host != nil {
		i -= len(*m.Host)
		copy(dAtA[i:], *m.Host)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if m.Port != nil {
		{
			size, err := m.Port.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaintApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaintApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaintApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeAdded != nil {
		{
			size, err := m.TimeAdded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Effect != nil {
		i -= len(*m.Effect)
		copy(dAtA[i:], *m.Effect)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Effect)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TolerationApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TolerationApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TolerationApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TolerationSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.TolerationSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.Effect != nil {
		i -= len(*m.Effect)
		copy(dAtA[i:], *m.Effect)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Effect)))
		i--
		dAtA[i] = 0x22
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopologySelectorLabelRequirementApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopologySelectorLabelRequirementApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopologySelectorLabelRequirementApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopologySelectorTermApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopologySelectorTermApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopologySelectorTermApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchLabelExpressions) > 0 {
		for iNdEx := len(m.MatchLabelExpressions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchLabelExpressions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopologySpreadConstraintApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopologySpreadConstraintApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopologySpreadConstraintApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchLabelKeys) > 0 {
		for iNdEx := len(m.MatchLabelKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MatchLabelKeys[iNdEx])
			copy(dAtA[i:], m.MatchLabelKeys[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.MatchLabelKeys[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.NodeTaintsPolicy != nil {
		i -= len(*m.NodeTaintsPolicy)
		copy(dAtA[i:], *m.NodeTaintsPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NodeTaintsPolicy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NodeAffinityPolicy != nil {
		i -= len(*m.NodeAffinityPolicy)
		copy(dAtA[i:], *m.NodeAffinityPolicy)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NodeAffinityPolicy)))
		i--
		dAtA[i] = 0x32
	}
	if m.MinDomains != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MinDomains))
		i--
		dAtA[i] = 0x28
	}
	if m.LabelSelector != nil {
		{
			size, err := m.LabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WhenUnsatisfiable != nil {
		i -= len(*m.WhenUnsatisfiable)
		copy(dAtA[i:], *m.WhenUnsatisfiable)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.WhenUnsatisfiable)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TopologyKey != nil {
		i -= len(*m.TopologyKey)
		copy(dAtA[i:], *m.TopologyKey)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.TopologyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.MaxSkew != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.MaxSkew))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TypedLocalObjectReferenceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypedLocalObjectReferenceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypedLocalObjectReferenceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Kind != nil {
		i -= len(*m.Kind)
		copy(dAtA[i:], *m.Kind)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Kind)))
		i--
		dAtA[i] = 0x12
	}
	if m.APIGroup != nil {
		i -= len(*m.APIGroup)
		copy(dAtA[i:], *m.APIGroup)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.APIGroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TypedObjectReferenceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypedObjectReferenceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypedObjectReferenceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Namespace != nil {
		i -= len(*m.Namespace)
		copy(dAtA[i:], *m.Namespace)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Kind != nil {
		i -= len(*m.Kind)
		copy(dAtA[i:], *m.Kind)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Kind)))
		i--
		dAtA[i] = 0x12
	}
	if m.APIGroup != nil {
		i -= len(*m.APIGroup)
		copy(dAtA[i:], *m.APIGroup)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.APIGroup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VolumeSourceApplyConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeDeviceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeDeviceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeDeviceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DevicePath != nil {
		i -= len(*m.DevicePath)
		copy(dAtA[i:], *m.DevicePath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.DevicePath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeMountApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeMountApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeMountApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubPathExpr != nil {
		i -= len(*m.SubPathExpr)
		copy(dAtA[i:], *m.SubPathExpr)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SubPathExpr)))
		i--
		dAtA[i] = 0x32
	}
	if m.MountPropagation != nil {
		i -= len(*m.MountPropagation)
		copy(dAtA[i:], *m.MountPropagation)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.MountPropagation)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SubPath != nil {
		i -= len(*m.SubPath)
		copy(dAtA[i:], *m.SubPath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.SubPath)))
		i--
		dAtA[i] = 0x22
	}
	if m.MountPath != nil {
		i -= len(*m.MountPath)
		copy(dAtA[i:], *m.MountPath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.MountPath)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReadOnly != nil {
		i--
		if *m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeNodeAffinityApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeNodeAffinityApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeNodeAffinityApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Required != nil {
		{
			size, err := m.Required.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeProjectionApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeProjectionApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeProjectionApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceAccountToken != nil {
		{
			size, err := m.ServiceAccountToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ConfigMap != nil {
		{
			size, err := m.ConfigMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DownwardAPI != nil {
		{
			size, err := m.DownwardAPI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Secret != nil {
		{
			size, err := m.Secret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ephemeral != nil {
		{
			size, err := m.Ephemeral.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.CSI != nil {
		{
			size, err := m.CSI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.StorageOS != nil {
		{
			size, err := m.StorageOS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.ScaleIO != nil {
		{
			size, err := m.ScaleIO.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.PortworxVolume != nil {
		{
			size, err := m.PortworxVolume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.Projected != nil {
		{
			size, err := m.Projected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.PhotonPersistentDisk != nil {
		{
			size, err := m.PhotonPersistentDisk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.AzureDisk != nil {
		{
			size, err := m.AzureDisk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Quobyte != nil {
		{
			size, err := m.Quobyte.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.VsphereVolume != nil {
		{
			size, err := m.VsphereVolume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ConfigMap != nil {
		{
			size, err := m.ConfigMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AzureFile != nil {
		{
			size, err := m.AzureFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.FC != nil {
		{
			size, err := m.FC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.DownwardAPI != nil {
		{
			size, err := m.DownwardAPI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Flocker != nil {
		{
			size, err := m.Flocker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.CephFS != nil {
		{
			size, err := m.CephFS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Cinder != nil {
		{
			size, err := m.Cinder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.FlexVolume != nil {
		{
			size, err := m.FlexVolume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RBD != nil {
		{
			size, err := m.RBD.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.PersistentVolumeClaim != nil {
		{
			size, err := m.PersistentVolumeClaim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Glusterfs != nil {
		{
			size, err := m.Glusterfs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ISCSI != nil {
		{
			size, err := m.ISCSI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NFS != nil {
		{
			size, err := m.NFS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Secret != nil {
		{
			size, err := m.Secret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.GitRepo != nil {
		{
			size, err := m.GitRepo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AWSElasticBlockStore != nil {
		{
			size, err := m.AWSElasticBlockStore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GCEPersistentDisk != nil {
		{
			size, err := m.GCEPersistentDisk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EmptyDir != nil {
		{
			size, err := m.EmptyDir.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HostPath != nil {
		{
			size, err := m.HostPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoragePolicyID != nil {
		i -= len(*m.StoragePolicyID)
		copy(dAtA[i:], *m.StoragePolicyID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StoragePolicyID)))
		i--
		dAtA[i] = 0x22
	}
	if m.StoragePolicyName != nil {
		i -= len(*m.StoragePolicyName)
		copy(dAtA[i:], *m.StoragePolicyName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.StoragePolicyName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FSType != nil {
		i -= len(*m.FSType)
		copy(dAtA[i:], *m.FSType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.FSType)))
		i--
		dAtA[i] = 0x12
	}
	if m.VolumePath != nil {
		i -= len(*m.VolumePath)
		copy(dAtA[i:], *m.VolumePath)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.VolumePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeightedPodAffinityTermApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedPodAffinityTermApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedPodAffinityTermApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodAffinityTerm != nil {
		{
			size, err := m.PodAffinityTerm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Weight != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WindowsSecurityContextOptionsApplyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowsSecurityContextOptionsApplyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WindowsSecurityContextOptionsApplyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostProcess != nil {
		i--
		if *m.HostProcess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RunAsUserName != nil {
		i -= len(*m.RunAsUserName)
		copy(dAtA[i:], *m.RunAsUserName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.RunAsUserName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GMSACredentialSpec != nil {
		i -= len(*m.GMSACredentialSpec)
		copy(dAtA[i:], *m.GMSACredentialSpec)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.GMSACredentialSpec)))
		i--
		dAtA[i] = 0x12
	}
	if m.GMSACredentialSpecName != nil {
		i -= len(*m.GMSACredentialSpecName)
		copy(dAtA[i:], *m.GMSACredentialSpecName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.GMSACredentialSpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeID != nil {
		l = len(*m.VolumeID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Partition != nil {
		n += 1 + sovGenerated(uint64(*m.Partition))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *AffinityApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeAffinity != nil {
		l = m.NodeAffinity.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PodAffinity != nil {
		l = m.PodAffinity.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PodAntiAffinity != nil {
		l = m.PodAntiAffinity.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AttachedVolumeApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DevicePath != nil {
		l = len(*m.DevicePath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AzureDiskVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiskName != nil {
		l = len(*m.DiskName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DataDiskURI != nil {
		l = len(*m.DataDiskURI)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CachingMode != nil {
		l = len(*m.CachingMode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.Kind != nil {
		l = len(*m.Kind)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AzureFilePersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretName != nil {
		l = len(*m.SecretName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ShareName != nil {
		l = len(*m.ShareName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.SecretNamespace != nil {
		l = len(*m.SecretNamespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AzureFileVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretName != nil {
		l = len(*m.SecretName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ShareName != nil {
		l = len(*m.ShareName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *CSIPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Driver != nil {
		l = len(*m.Driver)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeHandle != nil {
		l = len(*m.VolumeHandle)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.VolumeAttributes) > 0 {
		for k, v := range m.VolumeAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.ControllerPublishSecretRef != nil {
		l = m.ControllerPublishSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodeStageSecretRef != nil {
		l = m.NodeStageSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodePublishSecretRef != nil {
		l = m.NodePublishSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ControllerExpandSecretRef != nil {
		l = m.ControllerExpandSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodeExpandSecretRef != nil {
		l = m.NodeExpandSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *CSIVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Driver != nil {
		l = len(*m.Driver)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.VolumeAttributes) > 0 {
		for k, v := range m.VolumeAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.NodePublishSecretRef != nil {
		l = m.NodePublishSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *CapabilitiesApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Add) > 0 {
		for _, s := range m.Add {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Drop) > 0 {
		for _, s := range m.Drop {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *CephFSPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Monitors) > 0 {
		for _, s := range m.Monitors {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretFile != nil {
		l = len(*m.SecretFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *CephFSVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Monitors) > 0 {
		for _, s := range m.Monitors {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretFile != nil {
		l = len(*m.SecretFile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *CinderPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeID != nil {
		l = len(*m.VolumeID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *CinderVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeID != nil {
		l = len(*m.VolumeID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ClaimSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceClaimName != nil {
		l = len(*m.ResourceClaimName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ResourceClaimTemplateName != nil {
		l = len(*m.ResourceClaimTemplateName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ClientIPConfigApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.TimeoutSeconds))
	}
	return n
}

func (m *ComponentConditionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Error != nil {
		l = len(*m.Error)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ComponentStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ConfigMapApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Immutable != nil {
		n += 2
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.BinaryData) > 0 {
		for k, v := range m.BinaryData {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovGenerated(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ConfigMapEnvSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *ConfigMapKeySelectorApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *ConfigMapNodeConfigSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.UID != nil {
		l = len(*m.UID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ResourceVersion != nil {
		l = len(*m.ResourceVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KubeletConfigKey != nil {
		l = len(*m.KubeletConfigKey)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ConfigMapProjectionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *ConfigMapVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DefaultMode != nil {
		n += 1 + sovGenerated(uint64(*m.DefaultMode))
	}
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *ContainerApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.WorkingDir != nil {
		l = len(*m.WorkingDir)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.EnvFrom) > 0 {
		for _, e := range m.EnvFrom {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for _, e := range m.Env {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.ResizePolicy) > 0 {
		for _, e := range m.ResizePolicy {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.RestartPolicy != nil {
		l = len(*m.RestartPolicy)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.VolumeMounts) > 0 {
		for _, e := range m.VolumeMounts {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.VolumeDevices) > 0 {
		for _, e := range m.VolumeDevices {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.LivenessProbe != nil {
		l = m.LivenessProbe.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadinessProbe != nil {
		l = m.ReadinessProbe.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StartupProbe != nil {
		l = m.StartupProbe.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Lifecycle != nil {
		l = m.Lifecycle.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TerminationMessagePath != nil {
		l = len(*m.TerminationMessagePath)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TerminationMessagePolicy != nil {
		l = len(*m.TerminationMessagePolicy)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ImagePullPolicy != nil {
		l = len(*m.ImagePullPolicy)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.SecurityContext != nil {
		l = m.SecurityContext.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Stdin != nil {
		n += 3
	}
	if m.StdinOnce != nil {
		n += 3
	}
	if m.TTY != nil {
		n += 3
	}
	return n
}

func (m *ContainerImageApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.SizeBytes != nil {
		n += 1 + sovGenerated(uint64(*m.SizeBytes))
	}
	return n
}

func (m *ContainerPortApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HostPort != nil {
		n += 1 + sovGenerated(uint64(*m.HostPort))
	}
	if m.ContainerPort != nil {
		n += 1 + sovGenerated(uint64(*m.ContainerPort))
	}
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HostIP != nil {
		l = len(*m.HostIP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerResizePolicyApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceName != nil {
		l = len(*m.ResourceName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RestartPolicy != nil {
		l = len(*m.RestartPolicy)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerStateApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waiting != nil {
		l = m.Waiting.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Running != nil {
		l = m.Running.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Terminated != nil {
		l = m.Terminated.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerStateRunningApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartedAt != nil {
		l = m.StartedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerStateTerminatedApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExitCode != nil {
		n += 1 + sovGenerated(uint64(*m.ExitCode))
	}
	if m.Signal != nil {
		n += 1 + sovGenerated(uint64(*m.Signal))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StartedAt != nil {
		l = m.StartedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FinishedAt != nil {
		l = m.FinishedAt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ContainerID != nil {
		l = len(*m.ContainerID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerStateWaitingApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerStatusApplyConfiguration) Size() (n int) {
	return 0
}

func (m *DaemonEndpointApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	return n
}

func (m *DownwardAPIProjectionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *DownwardAPIVolumeFileApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FieldRef != nil {
		l = m.FieldRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ResourceFieldRef != nil {
		l = m.ResourceFieldRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Mode != nil {
		n += 1 + sovGenerated(uint64(*m.Mode))
	}
	return n
}

func (m *DownwardAPIVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DefaultMode != nil {
		n += 1 + sovGenerated(uint64(*m.DefaultMode))
	}
	return n
}

func (m *EmptyDirVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Medium != nil {
		l = len(*m.Medium)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SizeLimit != nil {
		l = m.SizeLimit.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EndpointAddressApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(*m.IP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodeName != nil {
		l = len(*m.NodeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TargetRef != nil {
		l = m.TargetRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EndpointPortApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AppProtocol != nil {
		l = len(*m.AppProtocol)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EndpointSubsetApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.NotReadyAddresses) > 0 {
		for _, e := range m.NotReadyAddresses {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *EndpointsApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Subsets) > 0 {
		for _, e := range m.Subsets {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *EnvFromSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = len(*m.Prefix)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ConfigMapRef != nil {
		l = m.ConfigMapRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EnvVarApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ValueFrom != nil {
		l = m.ValueFrom.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EnvVarSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldRef != nil {
		l = m.FieldRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ResourceFieldRef != nil {
		l = m.ResourceFieldRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ConfigMapKeyRef != nil {
		l = m.ConfigMapKeyRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretKeyRef != nil {
		l = m.SecretKeyRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EphemeralContainerApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EphemeralContainerCommonApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.TargetContainerName != nil {
		l = len(*m.TargetContainerName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EphemeralContainerCommonApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.WorkingDir != nil {
		l = len(*m.WorkingDir)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.EnvFrom) > 0 {
		for _, e := range m.EnvFrom {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for _, e := range m.Env {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.ResizePolicy) > 0 {
		for _, e := range m.ResizePolicy {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.RestartPolicy != nil {
		l = len(*m.RestartPolicy)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.VolumeMounts) > 0 {
		for _, e := range m.VolumeMounts {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.VolumeDevices) > 0 {
		for _, e := range m.VolumeDevices {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.LivenessProbe != nil {
		l = m.LivenessProbe.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadinessProbe != nil {
		l = m.ReadinessProbe.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StartupProbe != nil {
		l = m.StartupProbe.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Lifecycle != nil {
		l = m.Lifecycle.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TerminationMessagePath != nil {
		l = len(*m.TerminationMessagePath)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.TerminationMessagePolicy != nil {
		l = len(*m.TerminationMessagePolicy)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ImagePullPolicy != nil {
		l = len(*m.ImagePullPolicy)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.SecurityContext != nil {
		l = m.SecurityContext.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Stdin != nil {
		n += 3
	}
	if m.StdinOnce != nil {
		n += 3
	}
	if m.TTY != nil {
		n += 3
	}
	return n
}

func (m *EphemeralVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeClaimTemplate != nil {
		l = m.VolumeClaimTemplate.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EventApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.InvolvedObject != nil {
		l = m.InvolvedObject.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FirstTimestamp != nil {
		l = m.FirstTimestamp.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastTimestamp != nil {
		l = m.LastTimestamp.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovGenerated(uint64(*m.Count))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EventTime != nil {
		l = m.EventTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Series != nil {
		l = m.Series.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Action != nil {
		l = len(*m.Action)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Related != nil {
		l = m.Related.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReportingController != nil {
		l = len(*m.ReportingController)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReportingInstance != nil {
		l = len(*m.ReportingInstance)
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EventSeriesApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != nil {
		n += 1 + sovGenerated(uint64(*m.Count))
	}
	if m.LastObservedTime != nil {
		l = m.LastObservedTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *EventSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Component != nil {
		l = len(*m.Component)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Host != nil {
		l = len(*m.Host)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ExecActionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Command) > 0 {
		for _, s := range m.Command {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *FCVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TargetWWNs) > 0 {
		for _, s := range m.TargetWWNs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Lun != nil {
		n += 1 + sovGenerated(uint64(*m.Lun))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if len(m.WWIDs) > 0 {
		for _, s := range m.WWIDs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *FlexPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Driver != nil {
		l = len(*m.Driver)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FlexVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Driver != nil {
		l = len(*m.Driver)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FlockerVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DatasetName != nil {
		l = len(*m.DatasetName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DatasetUUID != nil {
		l = len(*m.DatasetUUID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PDName != nil {
		l = len(*m.PDName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Partition != nil {
		n += 1 + sovGenerated(uint64(*m.Partition))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *GRPCActionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	if m.Service != nil {
		l = len(*m.Service)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *GitRepoVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repository != nil {
		l = len(*m.Repository)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Revision != nil {
		l = len(*m.Revision)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Directory != nil {
		l = len(*m.Directory)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndpointsName != nil {
		l = len(*m.EndpointsName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.EndpointsNamespace != nil {
		l = len(*m.EndpointsNamespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *GlusterfsVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndpointsName != nil {
		l = len(*m.EndpointsName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *HTTPGetActionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Port != nil {
		l = m.Port.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Host != nil {
		l = len(*m.Host)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Scheme != nil {
		l = len(*m.Scheme)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.HTTPHeaders) > 0 {
		for _, e := range m.HTTPHeaders {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *HTTPHeaderApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *HostAliasApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(*m.IP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Hostnames) > 0 {
		for _, s := range m.Hostnames {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *HostIPApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(*m.IP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *HostPathVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ISCSIPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetPortal != nil {
		l = len(*m.TargetPortal)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.IQN != nil {
		l = len(*m.IQN)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Lun != nil {
		n += 1 + sovGenerated(uint64(*m.Lun))
	}
	if m.ISCSIInterface != nil {
		l = len(*m.ISCSIInterface)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if len(m.Portals) > 0 {
		for _, s := range m.Portals {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DiscoveryCHAPAuth != nil {
		n += 2
	}
	if m.SessionCHAPAuth != nil {
		n += 2
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.InitiatorName != nil {
		l = len(*m.InitiatorName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ISCSIVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetPortal != nil {
		l = len(*m.TargetPortal)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.IQN != nil {
		l = len(*m.IQN)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Lun != nil {
		n += 1 + sovGenerated(uint64(*m.Lun))
	}
	if m.ISCSIInterface != nil {
		l = len(*m.ISCSIInterface)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if len(m.Portals) > 0 {
		for _, s := range m.Portals {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DiscoveryCHAPAuth != nil {
		n += 2
	}
	if m.SessionCHAPAuth != nil {
		n += 2
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.InitiatorName != nil {
		l = len(*m.InitiatorName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *KeyToPathApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Mode != nil {
		n += 1 + sovGenerated(uint64(*m.Mode))
	}
	return n
}

func (m *LifecycleApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostStart != nil {
		l = m.PostStart.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PreStop != nil {
		l = m.PreStop.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LifecycleHandlerApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exec != nil {
		l = m.Exec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HTTPGet != nil {
		l = m.HTTPGet.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TCPSocket != nil {
		l = m.TCPSocket.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LimitRangeApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LimitRangeItemApplyConfiguration) Size() (n int) {
	return 0
}

func (m *LimitRangeSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LoadBalancerIngressApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(*m.IP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.IPMode != nil {
		l = len(*m.IPMode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LoadBalancerStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ingress) > 0 {
		for _, e := range m.Ingress {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LocalObjectReferenceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LocalVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NFSVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = len(*m.Server)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *NamespaceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NamespaceConditionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NamespaceSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NamespaceStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != nil {
		l = len(*m.Phase)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodeAddressApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeAffinityApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		l = m.RequiredDuringSchedulingIgnoredDuringExecution.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.PreferredDuringSchedulingIgnoredDuringExecution) > 0 {
		for _, e := range m.PreferredDuringSchedulingIgnoredDuringExecution {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodeApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeConditionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastHeartbeatTime != nil {
		l = m.LastHeartbeatTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeConfigSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigMap != nil {
		l = m.ConfigMap.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeConfigStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assigned != nil {
		l = m.Assigned.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Active != nil {
		l = m.Active.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastKnownGood != nil {
		l = m.LastKnownGood.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Error != nil {
		l = len(*m.Error)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeDaemonEndpointsApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KubeletEndpoint != nil {
		l = m.KubeletEndpoint.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeSelectorApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeSelectorTerms) > 0 {
		for _, e := range m.NodeSelectorTerms {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodeSelectorRequirementApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodeSelectorTermApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchExpressions) > 0 {
		for _, e := range m.MatchExpressions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.MatchFields) > 0 {
		for _, e := range m.MatchFields {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodeSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodCIDR != nil {
		l = len(*m.PodCIDR)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.PodCIDRs) > 0 {
		for _, s := range m.PodCIDRs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.ProviderID != nil {
		l = len(*m.ProviderID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Unschedulable != nil {
		n += 2
	}
	if len(m.Taints) > 0 {
		for _, e := range m.Taints {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.ConfigSource != nil {
		l = m.ConfigSource.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DoNotUseExternalID != nil {
		l = len(*m.DoNotUseExternalID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeStatusApplyConfiguration) Size() (n int) {
	return 0
}

func (m *NodeSystemInfoApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MachineID != nil {
		l = len(*m.MachineID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SystemUUID != nil {
		l = len(*m.SystemUUID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.BootID != nil {
		l = len(*m.BootID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KernelVersion != nil {
		l = len(*m.KernelVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.OSImage != nil {
		l = len(*m.OSImage)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ContainerRuntimeVersion != nil {
		l = len(*m.ContainerRuntimeVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KubeletVersion != nil {
		l = len(*m.KubeletVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KubeProxyVersion != nil {
		l = len(*m.KubeProxyVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.OperatingSystem != nil {
		l = len(*m.OperatingSystem)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Architecture != nil {
		l = len(*m.Architecture)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ObjectFieldSelectorApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.APIVersion != nil {
		l = len(*m.APIVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FieldPath != nil {
		l = len(*m.FieldPath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ObjectReferenceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != nil {
		l = len(*m.Kind)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.UID != nil {
		l = len(*m.UID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.APIVersion != nil {
		l = len(*m.APIVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ResourceVersion != nil {
		l = len(*m.ResourceVersion)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FieldPath != nil {
		l = len(*m.FieldPath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimConditionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastProbeTime != nil {
		l = m.LastProbeTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessModes) > 0 {
		for _, s := range m.AccessModes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeName != nil {
		l = len(*m.VolumeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StorageClassName != nil {
		l = len(*m.StorageClassName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeMode != nil {
		l = len(*m.VolumeMode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DataSource != nil {
		l = m.DataSource.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DataSourceRef != nil {
		l = m.DataSourceRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimStatusApplyConfiguration) Size() (n int) {
	return 0
}

func (m *PersistentVolumeClaimTemplateApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimName != nil {
		l = len(*m.ClaimName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *PersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GCEPersistentDisk != nil {
		l = m.GCEPersistentDisk.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AWSElasticBlockStore != nil {
		l = m.AWSElasticBlockStore.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HostPath != nil {
		l = m.HostPath.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Glusterfs != nil {
		l = m.Glusterfs.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NFS != nil {
		l = m.NFS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RBD != nil {
		l = m.RBD.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ISCSI != nil {
		l = m.ISCSI.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Cinder != nil {
		l = m.Cinder.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CephFS != nil {
		l = m.CephFS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FC != nil {
		l = m.FC.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Flocker != nil {
		l = m.Flocker.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FlexVolume != nil {
		l = m.FlexVolume.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AzureFile != nil {
		l = m.AzureFile.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VsphereVolume != nil {
		l = m.VsphereVolume.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Quobyte != nil {
		l = m.Quobyte.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AzureDisk != nil {
		l = m.AzureDisk.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.PhotonPersistentDisk != nil {
		l = m.PhotonPersistentDisk.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.PortworxVolume != nil {
		l = m.PortworxVolume.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ScaleIO != nil {
		l = m.ScaleIO.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Local != nil {
		l = m.Local.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.StorageOS != nil {
		l = m.StorageOS.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.CSI != nil {
		l = m.CSI.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PersistentVolumeSpecApplyConfiguration) Size() (n int) {
	return 0
}

func (m *PersistentVolumeStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != nil {
		l = len(*m.Phase)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastPhaseTransitionTime != nil {
		l = m.LastPhaseTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PdID != nil {
		l = len(*m.PdID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodAffinityApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequiredDuringSchedulingIgnoredDuringExecution) > 0 {
		for _, e := range m.RequiredDuringSchedulingIgnoredDuringExecution {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.PreferredDuringSchedulingIgnoredDuringExecution) > 0 {
		for _, e := range m.PreferredDuringSchedulingIgnoredDuringExecution {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PodAffinityTermApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelSelector != nil {
		l = m.LabelSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.TopologyKey != nil {
		l = len(*m.TopologyKey)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NamespaceSelector != nil {
		l = m.NamespaceSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodAntiAffinityApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequiredDuringSchedulingIgnoredDuringExecution) > 0 {
		for _, e := range m.RequiredDuringSchedulingIgnoredDuringExecution {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.PreferredDuringSchedulingIgnoredDuringExecution) > 0 {
		for _, e := range m.PreferredDuringSchedulingIgnoredDuringExecution {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PodApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodConditionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastProbeTime != nil {
		l = m.LastProbeTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodDNSConfigApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nameservers) > 0 {
		for _, s := range m.Nameservers {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Searches) > 0 {
		for _, s := range m.Searches {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PodDNSConfigOptionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodIPApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IP != nil {
		l = len(*m.IP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodOSApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodReadinessGateApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConditionType != nil {
		l = len(*m.ConditionType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodResourceClaimApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodResourceClaimStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ResourceClaimName != nil {
		l = len(*m.ResourceClaimName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodSchedulingGateApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodSecurityContextApplyConfiguration) Size() (n int) {
	return 0
}

func (m *PodSpecApplyConfiguration) Size() (n int) {
	return 0
}

func (m *PodStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != nil {
		l = len(*m.Phase)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NominatedNodeName != nil {
		l = len(*m.NominatedNodeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HostIP != nil {
		l = len(*m.HostIP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.HostIPs) > 0 {
		for _, e := range m.HostIPs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.PodIP != nil {
		l = len(*m.PodIP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.PodIPs) > 0 {
		for _, e := range m.PodIPs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.InitContainerStatuses) > 0 {
		for _, e := range m.InitContainerStatuses {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ContainerStatuses) > 0 {
		for _, e := range m.ContainerStatuses {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.QOSClass != nil {
		l = len(*m.QOSClass)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.EphemeralContainerStatuses) > 0 {
		for _, e := range m.EphemeralContainerStatuses {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Resize != nil {
		l = len(*m.Resize)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.ResourceClaimStatuses) > 0 {
		for _, e := range m.ResourceClaimStatuses {
			l = e.Size()
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PodTemplateApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PodTemplateSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PortStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Error != nil {
		l = len(*m.Error)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PortworxVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeID != nil {
		l = len(*m.VolumeID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *PreferredSchedulingTermApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != nil {
		n += 1 + sovGenerated(uint64(*m.Weight))
	}
	if m.Preference != nil {
		l = m.Preference.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ProbeApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProbeHandlerApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.InitialDelaySeconds != nil {
		n += 1 + sovGenerated(uint64(*m.InitialDelaySeconds))
	}
	if m.TimeoutSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.TimeoutSeconds))
	}
	if m.PeriodSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.PeriodSeconds))
	}
	if m.SuccessThreshold != nil {
		n += 1 + sovGenerated(uint64(*m.SuccessThreshold))
	}
	if m.FailureThreshold != nil {
		n += 1 + sovGenerated(uint64(*m.FailureThreshold))
	}
	if m.TerminationGracePeriodSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.TerminationGracePeriodSeconds))
	}
	return n
}

func (m *ProbeHandlerApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exec != nil {
		l = m.Exec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HTTPGet != nil {
		l = m.HTTPGet.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TCPSocket != nil {
		l = m.TCPSocket.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GRPC != nil {
		l = m.GRPC.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ProjectedVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sources) > 0 {
		for _, e := range m.Sources {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DefaultMode != nil {
		n += 1 + sovGenerated(uint64(*m.DefaultMode))
	}
	return n
}

func (m *QuobyteVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Registry != nil {
		l = len(*m.Registry)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Volume != nil {
		l = len(*m.Volume)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Group != nil {
		l = len(*m.Group)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Tenant != nil {
		l = len(*m.Tenant)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *RBDPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CephMonitors) > 0 {
		for _, s := range m.CephMonitors {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.RBDImage != nil {
		l = len(*m.RBDImage)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RBDPool != nil {
		l = len(*m.RBDPool)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RadosUser != nil {
		l = len(*m.RadosUser)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Keyring != nil {
		l = len(*m.Keyring)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *RBDVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CephMonitors) > 0 {
		for _, s := range m.CephMonitors {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.RBDImage != nil {
		l = len(*m.RBDImage)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RBDPool != nil {
		l = len(*m.RBDPool)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RadosUser != nil {
		l = len(*m.RadosUser)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Keyring != nil {
		l = len(*m.Keyring)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *ReplicationControllerApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ReplicationControllerConditionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ReplicationControllerSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replicas != nil {
		n += 1 + sovGenerated(uint64(*m.Replicas))
	}
	if m.MinReadySeconds != nil {
		n += 1 + sovGenerated(uint64(*m.MinReadySeconds))
	}
	if len(m.Selector) > 0 {
		for k, v := range m.Selector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ReplicationControllerStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replicas != nil {
		n += 1 + sovGenerated(uint64(*m.Replicas))
	}
	if m.FullyLabeledReplicas != nil {
		n += 1 + sovGenerated(uint64(*m.FullyLabeledReplicas))
	}
	if m.ReadyReplicas != nil {
		n += 1 + sovGenerated(uint64(*m.ReadyReplicas))
	}
	if m.AvailableReplicas != nil {
		n += 1 + sovGenerated(uint64(*m.AvailableReplicas))
	}
	if m.ObservedGeneration != nil {
		n += 1 + sovGenerated(uint64(*m.ObservedGeneration))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ResourceClaimApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ResourceFieldSelectorApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainerName != nil {
		l = len(*m.ContainerName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Resource != nil {
		l = len(*m.Resource)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Divisor != nil {
		l = m.Divisor.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ResourceQuotaApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ResourceQuotaSpecApplyConfiguration) Size() (n int) {
	return 0
}

func (m *ResourceQuotaStatusApplyConfiguration) Size() (n int) {
	return 0
}

func (m *ResourceRequirementsApplyConfiguration) Size() (n int) {
	return 0
}

func (m *SELinuxOptionsApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Role != nil {
		l = len(*m.Role)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Level != nil {
		l = len(*m.Level)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gateway != nil {
		l = len(*m.Gateway)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.System != nil {
		l = len(*m.System)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SSLEnabled != nil {
		n += 2
	}
	if m.ProtectionDomain != nil {
		l = len(*m.ProtectionDomain)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StoragePool != nil {
		l = len(*m.StoragePool)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StorageMode != nil {
		l = len(*m.StorageMode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeName != nil {
		l = len(*m.VolumeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *ScaleIOVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gateway != nil {
		l = len(*m.Gateway)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.System != nil {
		l = len(*m.System)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SSLEnabled != nil {
		n += 2
	}
	if m.ProtectionDomain != nil {
		l = len(*m.ProtectionDomain)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StoragePool != nil {
		l = len(*m.StoragePool)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StorageMode != nil {
		l = len(*m.StorageMode)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeName != nil {
		l = len(*m.VolumeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	return n
}

func (m *ScopeSelectorApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchExpressions) > 0 {
		for _, e := range m.MatchExpressions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ScopedResourceSelectorRequirementApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeName != nil {
		l = len(*m.ScopeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *SeccompProfileApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LocalhostProfile != nil {
		l = len(*m.LocalhostProfile)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SecretApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Immutable != nil {
		n += 2
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovGenerated(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.StringData) > 0 {
		for k, v := range m.StringData {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SecretEnvSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *SecretKeySelectorApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *SecretProjectionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LocalObjectReferenceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *SecretReferenceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SecretVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretName != nil {
		l = len(*m.SecretName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.DefaultMode != nil {
		n += 1 + sovGenerated(uint64(*m.DefaultMode))
	}
	if m.Optional != nil {
		n += 2
	}
	return n
}

func (m *SecurityContextApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Privileged != nil {
		n += 2
	}
	if m.SELinuxOptions != nil {
		l = m.SELinuxOptions.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.WindowsOptions != nil {
		l = m.WindowsOptions.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RunAsUser != nil {
		n += 1 + sovGenerated(uint64(*m.RunAsUser))
	}
	if m.RunAsGroup != nil {
		n += 1 + sovGenerated(uint64(*m.RunAsGroup))
	}
	if m.RunAsNonRoot != nil {
		n += 2
	}
	if m.ReadOnlyRootFilesystem != nil {
		n += 2
	}
	if m.AllowPrivilegeEscalation != nil {
		n += 2
	}
	if m.ProcMount != nil {
		l = len(*m.ProcMount)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SeccompProfile != nil {
		l = m.SeccompProfile.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ServiceAccountApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Secrets) > 0 {
		for _, e := range m.Secrets {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ImagePullSecrets) > 0 {
		for _, e := range m.ImagePullSecrets {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.AutomountServiceAccountToken != nil {
		n += 2
	}
	return n
}

func (m *ServiceAccountTokenProjectionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Audience != nil {
		l = len(*m.Audience)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ExpirationSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.ExpirationSeconds))
	}
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ServiceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TypeMetaApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ObjectMetaApplyConfiguration != nil {
		l = m.ObjectMetaApplyConfiguration.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ServicePortApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AppProtocol != nil {
		l = len(*m.AppProtocol)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	if m.TargetPort != nil {
		l = m.TargetPort.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodePort != nil {
		n += 1 + sovGenerated(uint64(*m.NodePort))
	}
	return n
}

func (m *ServiceSpecApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Selector) > 0 {
		for k, v := range m.Selector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.ClusterIP != nil {
		l = len(*m.ClusterIP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.ClusterIPs) > 0 {
		for _, s := range m.ClusterIPs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.ExternalIPs) > 0 {
		for _, s := range m.ExternalIPs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.SessionAffinity != nil {
		l = len(*m.SessionAffinity)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LoadBalancerIP != nil {
		l = len(*m.LoadBalancerIP)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.LoadBalancerSourceRanges) > 0 {
		for _, s := range m.LoadBalancerSourceRanges {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.ExternalName != nil {
		l = len(*m.ExternalName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ExternalTrafficPolicy != nil {
		l = len(*m.ExternalTrafficPolicy)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HealthCheckNodePort != nil {
		n += 1 + sovGenerated(uint64(*m.HealthCheckNodePort))
	}
	if m.PublishNotReadyAddresses != nil {
		n += 2
	}
	if m.SessionAffinityConfig != nil {
		l = m.SessionAffinityConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.IPFamilies) > 0 {
		for _, s := range m.IPFamilies {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.IPFamilyPolicy != nil {
		l = len(*m.IPFamilyPolicy)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.AllocateLoadBalancerNodePorts != nil {
		n += 3
	}
	if m.LoadBalancerClass != nil {
		l = len(*m.LoadBalancerClass)
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.InternalTrafficPolicy != nil {
		l = len(*m.InternalTrafficPolicy)
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ServiceStatusApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoadBalancer != nil {
		l = m.LoadBalancer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *SessionAffinityConfigApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientIP != nil {
		l = m.ClientIP.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *StorageOSPersistentVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeName != nil {
		l = len(*m.VolumeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeNamespace != nil {
		l = len(*m.VolumeNamespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *StorageOSVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeName != nil {
		l = len(*m.VolumeName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.VolumeNamespace != nil {
		l = len(*m.VolumeNamespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SysctlApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TCPSocketActionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != nil {
		l = m.Port.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Host != nil {
		l = len(*m.Host)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TaintApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Effect != nil {
		l = len(*m.Effect)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TimeAdded != nil {
		l = m.TimeAdded.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TolerationApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Effect != nil {
		l = len(*m.Effect)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.TolerationSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.TolerationSeconds))
	}
	return n
}

func (m *TopologySelectorLabelRequirementApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *TopologySelectorTermApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchLabelExpressions) > 0 {
		for _, e := range m.MatchLabelExpressions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *TopologySpreadConstraintApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxSkew != nil {
		n += 1 + sovGenerated(uint64(*m.MaxSkew))
	}
	if m.TopologyKey != nil {
		l = len(*m.TopologyKey)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.WhenUnsatisfiable != nil {
		l = len(*m.WhenUnsatisfiable)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LabelSelector != nil {
		l = m.LabelSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MinDomains != nil {
		n += 1 + sovGenerated(uint64(*m.MinDomains))
	}
	if m.NodeAffinityPolicy != nil {
		l = len(*m.NodeAffinityPolicy)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodeTaintsPolicy != nil {
		l = len(*m.NodeTaintsPolicy)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.MatchLabelKeys) > 0 {
		for _, s := range m.MatchLabelKeys {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *TypedLocalObjectReferenceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.APIGroup != nil {
		l = len(*m.APIGroup)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Kind != nil {
		l = len(*m.Kind)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *TypedObjectReferenceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.APIGroup != nil {
		l = len(*m.APIGroup)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Kind != nil {
		l = len(*m.Kind)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VolumeApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.VolumeSourceApplyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VolumeDeviceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DevicePath != nil {
		l = len(*m.DevicePath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VolumeMountApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ReadOnly != nil {
		n += 2
	}
	if m.MountPath != nil {
		l = len(*m.MountPath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SubPath != nil {
		l = len(*m.SubPath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MountPropagation != nil {
		l = len(*m.MountPropagation)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.SubPathExpr != nil {
		l = len(*m.SubPathExpr)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VolumeNodeAffinityApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Required != nil {
		l = m.Required.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VolumeProjectionApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DownwardAPI != nil {
		l = m.DownwardAPI.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ConfigMap != nil {
		l = m.ConfigMap.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ServiceAccountToken != nil {
		l = m.ServiceAccountToken.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostPath != nil {
		l = m.HostPath.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EmptyDir != nil {
		l = m.EmptyDir.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GCEPersistentDisk != nil {
		l = m.GCEPersistentDisk.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AWSElasticBlockStore != nil {
		l = m.AWSElasticBlockStore.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GitRepo != nil {
		l = m.GitRepo.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NFS != nil {
		l = m.NFS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ISCSI != nil {
		l = m.ISCSI.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Glusterfs != nil {
		l = m.Glusterfs.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PersistentVolumeClaim != nil {
		l = m.PersistentVolumeClaim.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RBD != nil {
		l = m.RBD.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FlexVolume != nil {
		l = m.FlexVolume.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Cinder != nil {
		l = m.Cinder.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CephFS != nil {
		l = m.CephFS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Flocker != nil {
		l = m.Flocker.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DownwardAPI != nil {
		l = m.DownwardAPI.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.FC != nil {
		l = m.FC.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.AzureFile != nil {
		l = m.AzureFile.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ConfigMap != nil {
		l = m.ConfigMap.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.VsphereVolume != nil {
		l = m.VsphereVolume.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Quobyte != nil {
		l = m.Quobyte.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.AzureDisk != nil {
		l = m.AzureDisk.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.PhotonPersistentDisk != nil {
		l = m.PhotonPersistentDisk.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Projected != nil {
		l = m.Projected.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.PortworxVolume != nil {
		l = m.PortworxVolume.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ScaleIO != nil {
		l = m.ScaleIO.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.StorageOS != nil {
		l = m.StorageOS.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.CSI != nil {
		l = m.CSI.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.Ephemeral != nil {
		l = m.Ephemeral.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumePath != nil {
		l = len(*m.VolumePath)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.FSType != nil {
		l = len(*m.FSType)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StoragePolicyName != nil {
		l = len(*m.StoragePolicyName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.StoragePolicyID != nil {
		l = len(*m.StoragePolicyID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *WeightedPodAffinityTermApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != nil {
		n += 1 + sovGenerated(uint64(*m.Weight))
	}
	if m.PodAffinityTerm != nil {
		l = m.PodAffinityTerm.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *WindowsSecurityContextOptionsApplyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GMSACredentialSpecName != nil {
		l = len(*m.GMSACredentialSpecName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GMSACredentialSpec != nil {
		l = len(*m.GMSACredentialSpec)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RunAsUserName != nil {
		l = len(*m.RunAsUserName)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HostProcess != nil {
		n += 2
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSElasticBlockStoreVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSElasticBlockStoreVolumeSourceApplyConfiguration{`,
		`VolumeID:` + valueToStringGenerated(this.VolumeID) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`Partition:` + valueToStringGenerated(this.Partition) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AffinityApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AffinityApplyConfiguration{`,
		`NodeAffinity:` + strings.Replace(this.NodeAffinity.String(), "NodeAffinityApplyConfiguration", "NodeAffinityApplyConfiguration", 1) + `,`,
		`PodAffinity:` + strings.Replace(this.PodAffinity.String(), "PodAffinityApplyConfiguration", "PodAffinityApplyConfiguration", 1) + `,`,
		`PodAntiAffinity:` + strings.Replace(this.PodAntiAffinity.String(), "PodAntiAffinityApplyConfiguration", "PodAntiAffinityApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttachedVolumeApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttachedVolumeApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`DevicePath:` + valueToStringGenerated(this.DevicePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureDiskVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureDiskVolumeSourceApplyConfiguration{`,
		`DiskName:` + valueToStringGenerated(this.DiskName) + `,`,
		`DataDiskURI:` + valueToStringGenerated(this.DataDiskURI) + `,`,
		`CachingMode:` + valueToStringGenerated(this.CachingMode) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`Kind:` + valueToStringGenerated(this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureFilePersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureFilePersistentVolumeSourceApplyConfiguration{`,
		`SecretName:` + valueToStringGenerated(this.SecretName) + `,`,
		`ShareName:` + valueToStringGenerated(this.ShareName) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`SecretNamespace:` + valueToStringGenerated(this.SecretNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureFileVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureFileVolumeSourceApplyConfiguration{`,
		`SecretName:` + valueToStringGenerated(this.SecretName) + `,`,
		`ShareName:` + valueToStringGenerated(this.ShareName) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSIPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForVolumeAttributes := make([]string, 0, len(this.VolumeAttributes))
	for k := range this.VolumeAttributes {
		keysForVolumeAttributes = append(keysForVolumeAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVolumeAttributes)
	mapStringForVolumeAttributes := "map[string]string{"
	for _, k := range keysForVolumeAttributes {
		mapStringForVolumeAttributes += fmt.Sprintf("%v: %v,", k, this.VolumeAttributes[k])
	}
	mapStringForVolumeAttributes += "}"
	s := strings.Join([]string{`&CSIPersistentVolumeSourceApplyConfiguration{`,
		`Driver:` + valueToStringGenerated(this.Driver) + `,`,
		`VolumeHandle:` + valueToStringGenerated(this.VolumeHandle) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`VolumeAttributes:` + mapStringForVolumeAttributes + `,`,
		`ControllerPublishSecretRef:` + strings.Replace(this.ControllerPublishSecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`NodeStageSecretRef:` + strings.Replace(this.NodeStageSecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`NodePublishSecretRef:` + strings.Replace(this.NodePublishSecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`ControllerExpandSecretRef:` + strings.Replace(this.ControllerExpandSecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`NodeExpandSecretRef:` + strings.Replace(this.NodeExpandSecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSIVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForVolumeAttributes := make([]string, 0, len(this.VolumeAttributes))
	for k := range this.VolumeAttributes {
		keysForVolumeAttributes = append(keysForVolumeAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVolumeAttributes)
	mapStringForVolumeAttributes := "map[string]string{"
	for _, k := range keysForVolumeAttributes {
		mapStringForVolumeAttributes += fmt.Sprintf("%v: %v,", k, this.VolumeAttributes[k])
	}
	mapStringForVolumeAttributes += "}"
	s := strings.Join([]string{`&CSIVolumeSourceApplyConfiguration{`,
		`Driver:` + valueToStringGenerated(this.Driver) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`VolumeAttributes:` + mapStringForVolumeAttributes + `,`,
		`NodePublishSecretRef:` + strings.Replace(this.NodePublishSecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CapabilitiesApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CapabilitiesApplyConfiguration{`,
		`Add:` + fmt.Sprintf("%v", this.Add) + `,`,
		`Drop:` + fmt.Sprintf("%v", this.Drop) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CephFSPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CephFSPersistentVolumeSourceApplyConfiguration{`,
		`Monitors:` + fmt.Sprintf("%v", this.Monitors) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`User:` + valueToStringGenerated(this.User) + `,`,
		`SecretFile:` + valueToStringGenerated(this.SecretFile) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CephFSVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CephFSVolumeSourceApplyConfiguration{`,
		`Monitors:` + fmt.Sprintf("%v", this.Monitors) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`User:` + valueToStringGenerated(this.User) + `,`,
		`SecretFile:` + valueToStringGenerated(this.SecretFile) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CinderPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CinderPersistentVolumeSourceApplyConfiguration{`,
		`VolumeID:` + valueToStringGenerated(this.VolumeID) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CinderVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CinderVolumeSourceApplyConfiguration{`,
		`VolumeID:` + valueToStringGenerated(this.VolumeID) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimSourceApplyConfiguration{`,
		`ResourceClaimName:` + valueToStringGenerated(this.ResourceClaimName) + `,`,
		`ResourceClaimTemplateName:` + valueToStringGenerated(this.ResourceClaimTemplateName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientIPConfigApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientIPConfigApplyConfiguration{`,
		`TimeoutSeconds:` + valueToStringGenerated(this.TimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentConditionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComponentConditionApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Status:` + valueToStringGenerated(this.Status) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`Error:` + valueToStringGenerated(this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]ComponentConditionApplyConfiguration{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "ComponentConditionApplyConfiguration", "ComponentConditionApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ComponentStatusApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	keysForBinaryData := make([]string, 0, len(this.BinaryData))
	for k := range this.BinaryData {
		keysForBinaryData = append(keysForBinaryData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBinaryData)
	mapStringForBinaryData := "map[string][]byte{"
	for _, k := range keysForBinaryData {
		mapStringForBinaryData += fmt.Sprintf("%v: %v,", k, this.BinaryData[k])
	}
	mapStringForBinaryData += "}"
	s := strings.Join([]string{`&ConfigMapApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Immutable:` + valueToStringGenerated(this.Immutable) + `,`,
		`Data:` + mapStringForData + `,`,
		`BinaryData:` + mapStringForBinaryData + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapEnvSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigMapEnvSourceApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapKeySelectorApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigMapKeySelectorApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapNodeConfigSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigMapNodeConfigSourceApplyConfiguration{`,
		`Namespace:` + valueToStringGenerated(this.Namespace) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`UID:` + valueToStringGenerated(this.UID) + `,`,
		`ResourceVersion:` + valueToStringGenerated(this.ResourceVersion) + `,`,
		`KubeletConfigKey:` + valueToStringGenerated(this.KubeletConfigKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapProjectionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KeyToPathApplyConfiguration{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KeyToPathApplyConfiguration", "KeyToPathApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ConfigMapProjectionApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KeyToPathApplyConfiguration{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KeyToPathApplyConfiguration", "KeyToPathApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ConfigMapVolumeSourceApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`DefaultMode:` + valueToStringGenerated(this.DefaultMode) + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPorts := "[]ContainerPortApplyConfiguration{"
	for _, f := range this.Ports {
		repeatedStringForPorts += strings.Replace(strings.Replace(f.String(), "ContainerPortApplyConfiguration", "ContainerPortApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPorts += "}"
	repeatedStringForEnvFrom := "[]EnvFromSourceApplyConfiguration{"
	for _, f := range this.EnvFrom {
		repeatedStringForEnvFrom += strings.Replace(strings.Replace(f.String(), "EnvFromSourceApplyConfiguration", "EnvFromSourceApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEnvFrom += "}"
	repeatedStringForEnv := "[]EnvVarApplyConfiguration{"
	for _, f := range this.Env {
		repeatedStringForEnv += strings.Replace(strings.Replace(f.String(), "EnvVarApplyConfiguration", "EnvVarApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEnv += "}"
	repeatedStringForResizePolicy := "[]ContainerResizePolicyApplyConfiguration{"
	for _, f := range this.ResizePolicy {
		repeatedStringForResizePolicy += strings.Replace(strings.Replace(f.String(), "ContainerResizePolicyApplyConfiguration", "ContainerResizePolicyApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForResizePolicy += "}"
	repeatedStringForVolumeMounts := "[]VolumeMountApplyConfiguration{"
	for _, f := range this.VolumeMounts {
		repeatedStringForVolumeMounts += strings.Replace(strings.Replace(f.String(), "VolumeMountApplyConfiguration", "VolumeMountApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForVolumeMounts += "}"
	repeatedStringForVolumeDevices := "[]VolumeDeviceApplyConfiguration{"
	for _, f := range this.VolumeDevices {
		repeatedStringForVolumeDevices += strings.Replace(strings.Replace(f.String(), "VolumeDeviceApplyConfiguration", "VolumeDeviceApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForVolumeDevices += "}"
	s := strings.Join([]string{`&ContainerApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Image:` + valueToStringGenerated(this.Image) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`WorkingDir:` + valueToStringGenerated(this.WorkingDir) + `,`,
		`Ports:` + repeatedStringForPorts + `,`,
		`EnvFrom:` + repeatedStringForEnvFrom + `,`,
		`Env:` + repeatedStringForEnv + `,`,
		`Resources:` + strings.Replace(this.Resources.String(), "ResourceRequirementsApplyConfiguration", "ResourceRequirementsApplyConfiguration", 1) + `,`,
		`ResizePolicy:` + repeatedStringForResizePolicy + `,`,
		`RestartPolicy:` + valueToStringGenerated(this.RestartPolicy) + `,`,
		`VolumeMounts:` + repeatedStringForVolumeMounts + `,`,
		`VolumeDevices:` + repeatedStringForVolumeDevices + `,`,
		`LivenessProbe:` + strings.Replace(this.LivenessProbe.String(), "ProbeApplyConfiguration", "ProbeApplyConfiguration", 1) + `,`,
		`ReadinessProbe:` + strings.Replace(this.ReadinessProbe.String(), "ProbeApplyConfiguration", "ProbeApplyConfiguration", 1) + `,`,
		`StartupProbe:` + strings.Replace(this.StartupProbe.String(), "ProbeApplyConfiguration", "ProbeApplyConfiguration", 1) + `,`,
		`Lifecycle:` + strings.Replace(this.Lifecycle.String(), "LifecycleApplyConfiguration", "LifecycleApplyConfiguration", 1) + `,`,
		`TerminationMessagePath:` + valueToStringGenerated(this.TerminationMessagePath) + `,`,
		`TerminationMessagePolicy:` + valueToStringGenerated(this.TerminationMessagePolicy) + `,`,
		`ImagePullPolicy:` + valueToStringGenerated(this.ImagePullPolicy) + `,`,
		`SecurityContext:` + strings.Replace(this.SecurityContext.String(), "SecurityContextApplyConfiguration", "SecurityContextApplyConfiguration", 1) + `,`,
		`Stdin:` + valueToStringGenerated(this.Stdin) + `,`,
		`StdinOnce:` + valueToStringGenerated(this.StdinOnce) + `,`,
		`TTY:` + valueToStringGenerated(this.TTY) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerImageApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerImageApplyConfiguration{`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`SizeBytes:` + valueToStringGenerated(this.SizeBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerPortApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerPortApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`HostPort:` + valueToStringGenerated(this.HostPort) + `,`,
		`ContainerPort:` + valueToStringGenerated(this.ContainerPort) + `,`,
		`Protocol:` + valueToStringGenerated(this.Protocol) + `,`,
		`HostIP:` + valueToStringGenerated(this.HostIP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerResizePolicyApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerResizePolicyApplyConfiguration{`,
		`ResourceName:` + valueToStringGenerated(this.ResourceName) + `,`,
		`RestartPolicy:` + valueToStringGenerated(this.RestartPolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStateApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStateApplyConfiguration{`,
		`Waiting:` + strings.Replace(this.Waiting.String(), "ContainerStateWaitingApplyConfiguration", "ContainerStateWaitingApplyConfiguration", 1) + `,`,
		`Running:` + strings.Replace(this.Running.String(), "ContainerStateRunningApplyConfiguration", "ContainerStateRunningApplyConfiguration", 1) + `,`,
		`Terminated:` + strings.Replace(this.Terminated.String(), "ContainerStateTerminatedApplyConfiguration", "ContainerStateTerminatedApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStateRunningApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStateRunningApplyConfiguration{`,
		`StartedAt:` + strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Time", "v11.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStateTerminatedApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStateTerminatedApplyConfiguration{`,
		`ExitCode:` + valueToStringGenerated(this.ExitCode) + `,`,
		`Signal:` + valueToStringGenerated(this.Signal) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`StartedAt:` + strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Time", "v11.Time", 1) + `,`,
		`FinishedAt:` + strings.Replace(fmt.Sprintf("%v", this.FinishedAt), "Time", "v11.Time", 1) + `,`,
		`ContainerID:` + valueToStringGenerated(this.ContainerID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStateWaitingApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStateWaitingApplyConfiguration{`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStatusApplyConfiguration) String() string {
		return "nil"
}
func (this *DaemonEndpointApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DaemonEndpointApplyConfiguration{`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownwardAPIProjectionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]DownwardAPIVolumeFileApplyConfiguration{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "DownwardAPIVolumeFileApplyConfiguration", "DownwardAPIVolumeFileApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&DownwardAPIProjectionApplyConfiguration{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownwardAPIVolumeFileApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownwardAPIVolumeFileApplyConfiguration{`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`FieldRef:` + strings.Replace(this.FieldRef.String(), "ObjectFieldSelectorApplyConfiguration", "ObjectFieldSelectorApplyConfiguration", 1) + `,`,
		`ResourceFieldRef:` + strings.Replace(this.ResourceFieldRef.String(), "ResourceFieldSelectorApplyConfiguration", "ResourceFieldSelectorApplyConfiguration", 1) + `,`,
		`Mode:` + valueToStringGenerated(this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownwardAPIVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]DownwardAPIVolumeFileApplyConfiguration{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "DownwardAPIVolumeFileApplyConfiguration", "DownwardAPIVolumeFileApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&DownwardAPIVolumeSourceApplyConfiguration{`,
		`Items:` + repeatedStringForItems + `,`,
		`DefaultMode:` + valueToStringGenerated(this.DefaultMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmptyDirVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyDirVolumeSourceApplyConfiguration{`,
		`Medium:` + valueToStringGenerated(this.Medium) + `,`,
		`SizeLimit:` + strings.Replace(fmt.Sprintf("%v", this.SizeLimit), "Quantity", "resource.Quantity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointAddressApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointAddressApplyConfiguration{`,
		`IP:` + valueToStringGenerated(this.IP) + `,`,
		`Hostname:` + valueToStringGenerated(this.Hostname) + `,`,
		`NodeName:` + valueToStringGenerated(this.NodeName) + `,`,
		`TargetRef:` + strings.Replace(this.TargetRef.String(), "ObjectReferenceApplyConfiguration", "ObjectReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointPortApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointPortApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`Protocol:` + valueToStringGenerated(this.Protocol) + `,`,
		`AppProtocol:` + valueToStringGenerated(this.AppProtocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointSubsetApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAddresses := "[]EndpointAddressApplyConfiguration{"
	for _, f := range this.Addresses {
		repeatedStringForAddresses += strings.Replace(strings.Replace(f.String(), "EndpointAddressApplyConfiguration", "EndpointAddressApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAddresses += "}"
	repeatedStringForNotReadyAddresses := "[]EndpointAddressApplyConfiguration{"
	for _, f := range this.NotReadyAddresses {
		repeatedStringForNotReadyAddresses += strings.Replace(strings.Replace(f.String(), "EndpointAddressApplyConfiguration", "EndpointAddressApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNotReadyAddresses += "}"
	repeatedStringForPorts := "[]EndpointPortApplyConfiguration{"
	for _, f := range this.Ports {
		repeatedStringForPorts += strings.Replace(strings.Replace(f.String(), "EndpointPortApplyConfiguration", "EndpointPortApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPorts += "}"
	s := strings.Join([]string{`&EndpointSubsetApplyConfiguration{`,
		`Addresses:` + repeatedStringForAddresses + `,`,
		`NotReadyAddresses:` + repeatedStringForNotReadyAddresses + `,`,
		`Ports:` + repeatedStringForPorts + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointsApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubsets := "[]EndpointSubsetApplyConfiguration{"
	for _, f := range this.Subsets {
		repeatedStringForSubsets += strings.Replace(strings.Replace(f.String(), "EndpointSubsetApplyConfiguration", "EndpointSubsetApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSubsets += "}"
	s := strings.Join([]string{`&EndpointsApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Subsets:` + repeatedStringForSubsets + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvFromSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvFromSourceApplyConfiguration{`,
		`Prefix:` + valueToStringGenerated(this.Prefix) + `,`,
		`ConfigMapRef:` + strings.Replace(this.ConfigMapRef.String(), "ConfigMapEnvSourceApplyConfiguration", "ConfigMapEnvSourceApplyConfiguration", 1) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretEnvSourceApplyConfiguration", "SecretEnvSourceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvVarApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvVarApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`ValueFrom:` + strings.Replace(this.ValueFrom.String(), "EnvVarSourceApplyConfiguration", "EnvVarSourceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvVarSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvVarSourceApplyConfiguration{`,
		`FieldRef:` + strings.Replace(this.FieldRef.String(), "ObjectFieldSelectorApplyConfiguration", "ObjectFieldSelectorApplyConfiguration", 1) + `,`,
		`ResourceFieldRef:` + strings.Replace(this.ResourceFieldRef.String(), "ResourceFieldSelectorApplyConfiguration", "ResourceFieldSelectorApplyConfiguration", 1) + `,`,
		`ConfigMapKeyRef:` + strings.Replace(this.ConfigMapKeyRef.String(), "ConfigMapKeySelectorApplyConfiguration", "ConfigMapKeySelectorApplyConfiguration", 1) + `,`,
		`SecretKeyRef:` + strings.Replace(this.SecretKeyRef.String(), "SecretKeySelectorApplyConfiguration", "SecretKeySelectorApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EphemeralContainerApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EphemeralContainerApplyConfiguration{`,
		`EphemeralContainerCommonApplyConfiguration:` + strings.Replace(strings.Replace(this.EphemeralContainerCommonApplyConfiguration.String(), "EphemeralContainerCommonApplyConfiguration", "EphemeralContainerCommonApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`TargetContainerName:` + valueToStringGenerated(this.TargetContainerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EphemeralContainerCommonApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPorts := "[]ContainerPortApplyConfiguration{"
	for _, f := range this.Ports {
		repeatedStringForPorts += strings.Replace(strings.Replace(f.String(), "ContainerPortApplyConfiguration", "ContainerPortApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPorts += "}"
	repeatedStringForEnvFrom := "[]EnvFromSourceApplyConfiguration{"
	for _, f := range this.EnvFrom {
		repeatedStringForEnvFrom += strings.Replace(strings.Replace(f.String(), "EnvFromSourceApplyConfiguration", "EnvFromSourceApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEnvFrom += "}"
	repeatedStringForEnv := "[]EnvVarApplyConfiguration{"
	for _, f := range this.Env {
		repeatedStringForEnv += strings.Replace(strings.Replace(f.String(), "EnvVarApplyConfiguration", "EnvVarApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEnv += "}"
	repeatedStringForResizePolicy := "[]ContainerResizePolicyApplyConfiguration{"
	for _, f := range this.ResizePolicy {
		repeatedStringForResizePolicy += strings.Replace(strings.Replace(f.String(), "ContainerResizePolicyApplyConfiguration", "ContainerResizePolicyApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForResizePolicy += "}"
	repeatedStringForVolumeMounts := "[]VolumeMountApplyConfiguration{"
	for _, f := range this.VolumeMounts {
		repeatedStringForVolumeMounts += strings.Replace(strings.Replace(f.String(), "VolumeMountApplyConfiguration", "VolumeMountApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForVolumeMounts += "}"
	repeatedStringForVolumeDevices := "[]VolumeDeviceApplyConfiguration{"
	for _, f := range this.VolumeDevices {
		repeatedStringForVolumeDevices += strings.Replace(strings.Replace(f.String(), "VolumeDeviceApplyConfiguration", "VolumeDeviceApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForVolumeDevices += "}"
	s := strings.Join([]string{`&EphemeralContainerCommonApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Image:` + valueToStringGenerated(this.Image) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`WorkingDir:` + valueToStringGenerated(this.WorkingDir) + `,`,
		`Ports:` + repeatedStringForPorts + `,`,
		`EnvFrom:` + repeatedStringForEnvFrom + `,`,
		`Env:` + repeatedStringForEnv + `,`,
		`Resources:` + strings.Replace(this.Resources.String(), "ResourceRequirementsApplyConfiguration", "ResourceRequirementsApplyConfiguration", 1) + `,`,
		`ResizePolicy:` + repeatedStringForResizePolicy + `,`,
		`RestartPolicy:` + valueToStringGenerated(this.RestartPolicy) + `,`,
		`VolumeMounts:` + repeatedStringForVolumeMounts + `,`,
		`VolumeDevices:` + repeatedStringForVolumeDevices + `,`,
		`LivenessProbe:` + strings.Replace(this.LivenessProbe.String(), "ProbeApplyConfiguration", "ProbeApplyConfiguration", 1) + `,`,
		`ReadinessProbe:` + strings.Replace(this.ReadinessProbe.String(), "ProbeApplyConfiguration", "ProbeApplyConfiguration", 1) + `,`,
		`StartupProbe:` + strings.Replace(this.StartupProbe.String(), "ProbeApplyConfiguration", "ProbeApplyConfiguration", 1) + `,`,
		`Lifecycle:` + strings.Replace(this.Lifecycle.String(), "LifecycleApplyConfiguration", "LifecycleApplyConfiguration", 1) + `,`,
		`TerminationMessagePath:` + valueToStringGenerated(this.TerminationMessagePath) + `,`,
		`TerminationMessagePolicy:` + valueToStringGenerated(this.TerminationMessagePolicy) + `,`,
		`ImagePullPolicy:` + valueToStringGenerated(this.ImagePullPolicy) + `,`,
		`SecurityContext:` + strings.Replace(this.SecurityContext.String(), "SecurityContextApplyConfiguration", "SecurityContextApplyConfiguration", 1) + `,`,
		`Stdin:` + valueToStringGenerated(this.Stdin) + `,`,
		`StdinOnce:` + valueToStringGenerated(this.StdinOnce) + `,`,
		`TTY:` + valueToStringGenerated(this.TTY) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EphemeralVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EphemeralVolumeSourceApplyConfiguration{`,
		`VolumeClaimTemplate:` + strings.Replace(this.VolumeClaimTemplate.String(), "PersistentVolumeClaimTemplateApplyConfiguration", "PersistentVolumeClaimTemplateApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`InvolvedObject:` + strings.Replace(this.InvolvedObject.String(), "ObjectReferenceApplyConfiguration", "ObjectReferenceApplyConfiguration", 1) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`Source:` + strings.Replace(this.Source.String(), "EventSourceApplyConfiguration", "EventSourceApplyConfiguration", 1) + `,`,
		`FirstTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.FirstTimestamp), "Time", "v11.Time", 1) + `,`,
		`LastTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.LastTimestamp), "Time", "v11.Time", 1) + `,`,
		`Count:` + valueToStringGenerated(this.Count) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`EventTime:` + strings.Replace(fmt.Sprintf("%v", this.EventTime), "MicroTime", "v11.MicroTime", 1) + `,`,
		`Series:` + strings.Replace(this.Series.String(), "EventSeriesApplyConfiguration", "EventSeriesApplyConfiguration", 1) + `,`,
		`Action:` + valueToStringGenerated(this.Action) + `,`,
		`Related:` + strings.Replace(this.Related.String(), "ObjectReferenceApplyConfiguration", "ObjectReferenceApplyConfiguration", 1) + `,`,
		`ReportingController:` + valueToStringGenerated(this.ReportingController) + `,`,
		`ReportingInstance:` + valueToStringGenerated(this.ReportingInstance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventSeriesApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventSeriesApplyConfiguration{`,
		`Count:` + valueToStringGenerated(this.Count) + `,`,
		`LastObservedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastObservedTime), "MicroTime", "v11.MicroTime", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventSourceApplyConfiguration{`,
		`Component:` + valueToStringGenerated(this.Component) + `,`,
		`Host:` + valueToStringGenerated(this.Host) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecActionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecActionApplyConfiguration{`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FCVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FCVolumeSourceApplyConfiguration{`,
		`TargetWWNs:` + fmt.Sprintf("%v", this.TargetWWNs) + `,`,
		`Lun:` + valueToStringGenerated(this.Lun) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`WWIDs:` + fmt.Sprintf("%v", this.WWIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlexPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&FlexPersistentVolumeSourceApplyConfiguration{`,
		`Driver:` + valueToStringGenerated(this.Driver) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlexVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&FlexVolumeSourceApplyConfiguration{`,
		`Driver:` + valueToStringGenerated(this.Driver) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlockerVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlockerVolumeSourceApplyConfiguration{`,
		`DatasetName:` + valueToStringGenerated(this.DatasetName) + `,`,
		`DatasetUUID:` + valueToStringGenerated(this.DatasetUUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCEPersistentDiskVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCEPersistentDiskVolumeSourceApplyConfiguration{`,
		`PDName:` + valueToStringGenerated(this.PDName) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`Partition:` + valueToStringGenerated(this.Partition) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GRPCActionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GRPCActionApplyConfiguration{`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`Service:` + valueToStringGenerated(this.Service) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GitRepoVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitRepoVolumeSourceApplyConfiguration{`,
		`Repository:` + valueToStringGenerated(this.Repository) + `,`,
		`Revision:` + valueToStringGenerated(this.Revision) + `,`,
		`Directory:` + valueToStringGenerated(this.Directory) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlusterfsPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlusterfsPersistentVolumeSourceApplyConfiguration{`,
		`EndpointsName:` + valueToStringGenerated(this.EndpointsName) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`EndpointsNamespace:` + valueToStringGenerated(this.EndpointsNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlusterfsVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlusterfsVolumeSourceApplyConfiguration{`,
		`EndpointsName:` + valueToStringGenerated(this.EndpointsName) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPGetActionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHTTPHeaders := "[]HTTPHeaderApplyConfiguration{"
	for _, f := range this.HTTPHeaders {
		repeatedStringForHTTPHeaders += strings.Replace(strings.Replace(f.String(), "HTTPHeaderApplyConfiguration", "HTTPHeaderApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForHTTPHeaders += "}"
	s := strings.Join([]string{`&HTTPGetActionApplyConfiguration{`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "IntOrString", "intstr.IntOrString", 1) + `,`,
		`Host:` + valueToStringGenerated(this.Host) + `,`,
		`Scheme:` + valueToStringGenerated(this.Scheme) + `,`,
		`HTTPHeaders:` + repeatedStringForHTTPHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPHeaderApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPHeaderApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostAliasApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostAliasApplyConfiguration{`,
		`IP:` + valueToStringGenerated(this.IP) + `,`,
		`Hostnames:` + fmt.Sprintf("%v", this.Hostnames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostIPApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostIPApplyConfiguration{`,
		`IP:` + valueToStringGenerated(this.IP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostPathVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostPathVolumeSourceApplyConfiguration{`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ISCSIPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ISCSIPersistentVolumeSourceApplyConfiguration{`,
		`TargetPortal:` + valueToStringGenerated(this.TargetPortal) + `,`,
		`IQN:` + valueToStringGenerated(this.IQN) + `,`,
		`Lun:` + valueToStringGenerated(this.Lun) + `,`,
		`ISCSIInterface:` + valueToStringGenerated(this.ISCSIInterface) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`Portals:` + fmt.Sprintf("%v", this.Portals) + `,`,
		`DiscoveryCHAPAuth:` + valueToStringGenerated(this.DiscoveryCHAPAuth) + `,`,
		`SessionCHAPAuth:` + valueToStringGenerated(this.SessionCHAPAuth) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`InitiatorName:` + valueToStringGenerated(this.InitiatorName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ISCSIVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ISCSIVolumeSourceApplyConfiguration{`,
		`TargetPortal:` + valueToStringGenerated(this.TargetPortal) + `,`,
		`IQN:` + valueToStringGenerated(this.IQN) + `,`,
		`Lun:` + valueToStringGenerated(this.Lun) + `,`,
		`ISCSIInterface:` + valueToStringGenerated(this.ISCSIInterface) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`Portals:` + fmt.Sprintf("%v", this.Portals) + `,`,
		`DiscoveryCHAPAuth:` + valueToStringGenerated(this.DiscoveryCHAPAuth) + `,`,
		`SessionCHAPAuth:` + valueToStringGenerated(this.SessionCHAPAuth) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`InitiatorName:` + valueToStringGenerated(this.InitiatorName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyToPathApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyToPathApplyConfiguration{`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`Mode:` + valueToStringGenerated(this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LifecycleApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LifecycleApplyConfiguration{`,
		`PostStart:` + strings.Replace(this.PostStart.String(), "LifecycleHandlerApplyConfiguration", "LifecycleHandlerApplyConfiguration", 1) + `,`,
		`PreStop:` + strings.Replace(this.PreStop.String(), "LifecycleHandlerApplyConfiguration", "LifecycleHandlerApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LifecycleHandlerApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LifecycleHandlerApplyConfiguration{`,
		`Exec:` + strings.Replace(this.Exec.String(), "ExecActionApplyConfiguration", "ExecActionApplyConfiguration", 1) + `,`,
		`HTTPGet:` + strings.Replace(this.HTTPGet.String(), "HTTPGetActionApplyConfiguration", "HTTPGetActionApplyConfiguration", 1) + `,`,
		`TCPSocket:` + strings.Replace(this.TCPSocket.String(), "TCPSocketActionApplyConfiguration", "TCPSocketActionApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LimitRangeApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LimitRangeApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "LimitRangeSpecApplyConfiguration", "LimitRangeSpecApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LimitRangeItemApplyConfiguration) String() string {
	return "nil"
}
func (this *LimitRangeSpecApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]LimitRangeItemApplyConfiguration{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(strings.Replace(f.String(), "LimitRangeItemApplyConfiguration", "LimitRangeItemApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForLimits += "}"
	s := strings.Join([]string{`&LimitRangeSpecApplyConfiguration{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadBalancerIngressApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPorts := "[]PortStatusApplyConfiguration{"
	for _, f := range this.Ports {
		repeatedStringForPorts += strings.Replace(strings.Replace(f.String(), "PortStatusApplyConfiguration", "PortStatusApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPorts += "}"
	s := strings.Join([]string{`&LoadBalancerIngressApplyConfiguration{`,
		`IP:` + valueToStringGenerated(this.IP) + `,`,
		`Hostname:` + valueToStringGenerated(this.Hostname) + `,`,
		`IPMode:` + valueToStringGenerated(this.IPMode) + `,`,
		`Ports:` + repeatedStringForPorts + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadBalancerStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIngress := "[]LoadBalancerIngressApplyConfiguration{"
	for _, f := range this.Ingress {
		repeatedStringForIngress += strings.Replace(strings.Replace(f.String(), "LoadBalancerIngressApplyConfiguration", "LoadBalancerIngressApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForIngress += "}"
	s := strings.Join([]string{`&LoadBalancerStatusApplyConfiguration{`,
		`Ingress:` + repeatedStringForIngress + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalObjectReferenceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalObjectReferenceApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalVolumeSourceApplyConfiguration{`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NFSVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NFSVolumeSourceApplyConfiguration{`,
		`Server:` + valueToStringGenerated(this.Server) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "NamespaceSpecApplyConfiguration", "NamespaceSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "NamespaceStatusApplyConfiguration", "NamespaceStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceConditionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceConditionApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Status:` + valueToStringGenerated(this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v11.Time", 1) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceSpecApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceSpecApplyConfiguration{`,
		`Finalizers:` + fmt.Sprintf("%v", this.Finalizers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]NamespaceConditionApplyConfiguration{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "NamespaceConditionApplyConfiguration", "NamespaceConditionApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&NamespaceStatusApplyConfiguration{`,
		`Phase:` + valueToStringGenerated(this.Phase) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeAddressApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeAddressApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Address:` + valueToStringGenerated(this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeAffinityApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution := "[]PreferredSchedulingTermApplyConfiguration{"
	for _, f := range this.PreferredDuringSchedulingIgnoredDuringExecution {
		repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution += strings.Replace(strings.Replace(f.String(), "PreferredSchedulingTermApplyConfiguration", "PreferredSchedulingTermApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution += "}"
	s := strings.Join([]string{`&NodeAffinityApplyConfiguration{`,
		`RequiredDuringSchedulingIgnoredDuringExecution:` + strings.Replace(this.RequiredDuringSchedulingIgnoredDuringExecution.String(), "NodeSelectorApplyConfiguration", "NodeSelectorApplyConfiguration", 1) + `,`,
		`PreferredDuringSchedulingIgnoredDuringExecution:` + repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "NodeSpecApplyConfiguration", "NodeSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "NodeStatusApplyConfiguration", "NodeStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeConditionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeConditionApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Status:` + valueToStringGenerated(this.Status) + `,`,
		`LastHeartbeatTime:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatTime), "Time", "v11.Time", 1) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v11.Time", 1) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeConfigSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeConfigSourceApplyConfiguration{`,
		`ConfigMap:` + strings.Replace(this.ConfigMap.String(), "ConfigMapNodeConfigSourceApplyConfiguration", "ConfigMapNodeConfigSourceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeConfigStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeConfigStatusApplyConfiguration{`,
		`Assigned:` + strings.Replace(this.Assigned.String(), "NodeConfigSourceApplyConfiguration", "NodeConfigSourceApplyConfiguration", 1) + `,`,
		`Active:` + strings.Replace(this.Active.String(), "NodeConfigSourceApplyConfiguration", "NodeConfigSourceApplyConfiguration", 1) + `,`,
		`LastKnownGood:` + strings.Replace(this.LastKnownGood.String(), "NodeConfigSourceApplyConfiguration", "NodeConfigSourceApplyConfiguration", 1) + `,`,
		`Error:` + valueToStringGenerated(this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeDaemonEndpointsApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeDaemonEndpointsApplyConfiguration{`,
		`KubeletEndpoint:` + strings.Replace(this.KubeletEndpoint.String(), "DaemonEndpointApplyConfiguration", "DaemonEndpointApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSelectorApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeSelectorTerms := "[]NodeSelectorTermApplyConfiguration{"
	for _, f := range this.NodeSelectorTerms {
		repeatedStringForNodeSelectorTerms += strings.Replace(strings.Replace(f.String(), "NodeSelectorTermApplyConfiguration", "NodeSelectorTermApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNodeSelectorTerms += "}"
	s := strings.Join([]string{`&NodeSelectorApplyConfiguration{`,
		`NodeSelectorTerms:` + repeatedStringForNodeSelectorTerms + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSelectorRequirementApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSelectorRequirementApplyConfiguration{`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Operator:` + valueToStringGenerated(this.Operator) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSelectorTermApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMatchExpressions := "[]NodeSelectorRequirementApplyConfiguration{"
	for _, f := range this.MatchExpressions {
		repeatedStringForMatchExpressions += strings.Replace(strings.Replace(f.String(), "NodeSelectorRequirementApplyConfiguration", "NodeSelectorRequirementApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMatchExpressions += "}"
	repeatedStringForMatchFields := "[]NodeSelectorRequirementApplyConfiguration{"
	for _, f := range this.MatchFields {
		repeatedStringForMatchFields += strings.Replace(strings.Replace(f.String(), "NodeSelectorRequirementApplyConfiguration", "NodeSelectorRequirementApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMatchFields += "}"
	s := strings.Join([]string{`&NodeSelectorTermApplyConfiguration{`,
		`MatchExpressions:` + repeatedStringForMatchExpressions + `,`,
		`MatchFields:` + repeatedStringForMatchFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSpecApplyConfiguration) String() string {
	return "nil"
}
func (this *NodeStatusApplyConfiguration) String() string {
	return "nil"
}
func (this *NodeSystemInfoApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSystemInfoApplyConfiguration{`,
		`MachineID:` + valueToStringGenerated(this.MachineID) + `,`,
		`SystemUUID:` + valueToStringGenerated(this.SystemUUID) + `,`,
		`BootID:` + valueToStringGenerated(this.BootID) + `,`,
		`KernelVersion:` + valueToStringGenerated(this.KernelVersion) + `,`,
		`OSImage:` + valueToStringGenerated(this.OSImage) + `,`,
		`ContainerRuntimeVersion:` + valueToStringGenerated(this.ContainerRuntimeVersion) + `,`,
		`KubeletVersion:` + valueToStringGenerated(this.KubeletVersion) + `,`,
		`KubeProxyVersion:` + valueToStringGenerated(this.KubeProxyVersion) + `,`,
		`OperatingSystem:` + valueToStringGenerated(this.OperatingSystem) + `,`,
		`Architecture:` + valueToStringGenerated(this.Architecture) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectFieldSelectorApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectFieldSelectorApplyConfiguration{`,
		`APIVersion:` + valueToStringGenerated(this.APIVersion) + `,`,
		`FieldPath:` + valueToStringGenerated(this.FieldPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectReferenceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectReferenceApplyConfiguration{`,
		`Kind:` + valueToStringGenerated(this.Kind) + `,`,
		`Namespace:` + valueToStringGenerated(this.Namespace) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`UID:` + valueToStringGenerated(this.UID) + `,`,
		`APIVersion:` + valueToStringGenerated(this.APIVersion) + `,`,
		`ResourceVersion:` + valueToStringGenerated(this.ResourceVersion) + `,`,
		`FieldPath:` + valueToStringGenerated(this.FieldPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PersistentVolumeSpecApplyConfiguration", "PersistentVolumeSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "PersistentVolumeStatusApplyConfiguration", "PersistentVolumeStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PersistentVolumeClaimSpecApplyConfiguration", "PersistentVolumeClaimSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "PersistentVolumeClaimStatusApplyConfiguration", "PersistentVolumeClaimStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimConditionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimConditionApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Status:` + valueToStringGenerated(this.Status) + `,`,
		`LastProbeTime:` + strings.Replace(fmt.Sprintf("%v", this.LastProbeTime), "Time", "v11.Time", 1) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v11.Time", 1) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimSpecApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimSpecApplyConfiguration{`,
		`AccessModes:` + fmt.Sprintf("%v", this.AccessModes) + `,`,
		`Selector:` + strings.Replace(fmt.Sprintf("%v", this.Selector), "LabelSelectorApplyConfiguration", "v1.LabelSelectorApplyConfiguration", 1) + `,`,
		`Resources:` + strings.Replace(this.Resources.String(), "ResourceRequirementsApplyConfiguration", "ResourceRequirementsApplyConfiguration", 1) + `,`,
		`VolumeName:` + valueToStringGenerated(this.VolumeName) + `,`,
		`StorageClassName:` + valueToStringGenerated(this.StorageClassName) + `,`,
		`VolumeMode:` + valueToStringGenerated(this.VolumeMode) + `,`,
		`DataSource:` + strings.Replace(this.DataSource.String(), "TypedLocalObjectReferenceApplyConfiguration", "TypedLocalObjectReferenceApplyConfiguration", 1) + `,`,
		`DataSourceRef:` + strings.Replace(this.DataSourceRef.String(), "TypedObjectReferenceApplyConfiguration", "TypedObjectReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimStatusApplyConfiguration) String() string {
	return "nil"
}
func (this *PersistentVolumeClaimTemplateApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimTemplateApplyConfiguration{`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PersistentVolumeClaimSpecApplyConfiguration", "PersistentVolumeClaimSpecApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimVolumeSourceApplyConfiguration{`,
		`ClaimName:` + valueToStringGenerated(this.ClaimName) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeSourceApplyConfiguration{`,
		`GCEPersistentDisk:` + strings.Replace(this.GCEPersistentDisk.String(), "GCEPersistentDiskVolumeSourceApplyConfiguration", "GCEPersistentDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`AWSElasticBlockStore:` + strings.Replace(this.AWSElasticBlockStore.String(), "AWSElasticBlockStoreVolumeSourceApplyConfiguration", "AWSElasticBlockStoreVolumeSourceApplyConfiguration", 1) + `,`,
		`HostPath:` + strings.Replace(this.HostPath.String(), "HostPathVolumeSourceApplyConfiguration", "HostPathVolumeSourceApplyConfiguration", 1) + `,`,
		`Glusterfs:` + strings.Replace(this.Glusterfs.String(), "GlusterfsPersistentVolumeSourceApplyConfiguration", "GlusterfsPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`NFS:` + strings.Replace(this.NFS.String(), "NFSVolumeSourceApplyConfiguration", "NFSVolumeSourceApplyConfiguration", 1) + `,`,
		`RBD:` + strings.Replace(this.RBD.String(), "RBDPersistentVolumeSourceApplyConfiguration", "RBDPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`ISCSI:` + strings.Replace(this.ISCSI.String(), "ISCSIPersistentVolumeSourceApplyConfiguration", "ISCSIPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`Cinder:` + strings.Replace(this.Cinder.String(), "CinderPersistentVolumeSourceApplyConfiguration", "CinderPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`CephFS:` + strings.Replace(this.CephFS.String(), "CephFSPersistentVolumeSourceApplyConfiguration", "CephFSPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`FC:` + strings.Replace(this.FC.String(), "FCVolumeSourceApplyConfiguration", "FCVolumeSourceApplyConfiguration", 1) + `,`,
		`Flocker:` + strings.Replace(this.Flocker.String(), "FlockerVolumeSourceApplyConfiguration", "FlockerVolumeSourceApplyConfiguration", 1) + `,`,
		`FlexVolume:` + strings.Replace(this.FlexVolume.String(), "FlexPersistentVolumeSourceApplyConfiguration", "FlexPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`AzureFile:` + strings.Replace(this.AzureFile.String(), "AzureFilePersistentVolumeSourceApplyConfiguration", "AzureFilePersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`VsphereVolume:` + strings.Replace(this.VsphereVolume.String(), "VsphereVirtualDiskVolumeSourceApplyConfiguration", "VsphereVirtualDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`Quobyte:` + strings.Replace(this.Quobyte.String(), "QuobyteVolumeSourceApplyConfiguration", "QuobyteVolumeSourceApplyConfiguration", 1) + `,`,
		`AzureDisk:` + strings.Replace(this.AzureDisk.String(), "AzureDiskVolumeSourceApplyConfiguration", "AzureDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`PhotonPersistentDisk:` + strings.Replace(this.PhotonPersistentDisk.String(), "PhotonPersistentDiskVolumeSourceApplyConfiguration", "PhotonPersistentDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`PortworxVolume:` + strings.Replace(this.PortworxVolume.String(), "PortworxVolumeSourceApplyConfiguration", "PortworxVolumeSourceApplyConfiguration", 1) + `,`,
		`ScaleIO:` + strings.Replace(this.ScaleIO.String(), "ScaleIOPersistentVolumeSourceApplyConfiguration", "ScaleIOPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`Local:` + strings.Replace(this.Local.String(), "LocalVolumeSourceApplyConfiguration", "LocalVolumeSourceApplyConfiguration", 1) + `,`,
		`StorageOS:` + strings.Replace(this.StorageOS.String(), "StorageOSPersistentVolumeSourceApplyConfiguration", "StorageOSPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`CSI:` + strings.Replace(this.CSI.String(), "CSIPersistentVolumeSourceApplyConfiguration", "CSIPersistentVolumeSourceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeSpecApplyConfiguration) String() string {
	return "nil"
}
func (this *PersistentVolumeStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeStatusApplyConfiguration{`,
		`Phase:` + valueToStringGenerated(this.Phase) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`LastPhaseTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastPhaseTransitionTime), "Time", "v11.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhotonPersistentDiskVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhotonPersistentDiskVolumeSourceApplyConfiguration{`,
		`PdID:` + valueToStringGenerated(this.PdID) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodAffinityApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution := "[]PodAffinityTermApplyConfiguration{"
	for _, f := range this.RequiredDuringSchedulingIgnoredDuringExecution {
		repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution += strings.Replace(strings.Replace(f.String(), "PodAffinityTermApplyConfiguration", "PodAffinityTermApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution += "}"
	repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution := "[]WeightedPodAffinityTermApplyConfiguration{"
	for _, f := range this.PreferredDuringSchedulingIgnoredDuringExecution {
		repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution += strings.Replace(strings.Replace(f.String(), "WeightedPodAffinityTermApplyConfiguration", "WeightedPodAffinityTermApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution += "}"
	s := strings.Join([]string{`&PodAffinityApplyConfiguration{`,
		`RequiredDuringSchedulingIgnoredDuringExecution:` + repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution + `,`,
		`PreferredDuringSchedulingIgnoredDuringExecution:` + repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodAffinityTermApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodAffinityTermApplyConfiguration{`,
		`LabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.LabelSelector), "LabelSelectorApplyConfiguration", "v1.LabelSelectorApplyConfiguration", 1) + `,`,
		`Namespaces:` + fmt.Sprintf("%v", this.Namespaces) + `,`,
		`TopologyKey:` + valueToStringGenerated(this.TopologyKey) + `,`,
		`NamespaceSelector:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceSelector), "LabelSelectorApplyConfiguration", "v1.LabelSelectorApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodAntiAffinityApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution := "[]PodAffinityTermApplyConfiguration{"
	for _, f := range this.RequiredDuringSchedulingIgnoredDuringExecution {
		repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution += strings.Replace(strings.Replace(f.String(), "PodAffinityTermApplyConfiguration", "PodAffinityTermApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution += "}"
	repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution := "[]WeightedPodAffinityTermApplyConfiguration{"
	for _, f := range this.PreferredDuringSchedulingIgnoredDuringExecution {
		repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution += strings.Replace(strings.Replace(f.String(), "WeightedPodAffinityTermApplyConfiguration", "WeightedPodAffinityTermApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution += "}"
	s := strings.Join([]string{`&PodAntiAffinityApplyConfiguration{`,
		`RequiredDuringSchedulingIgnoredDuringExecution:` + repeatedStringForRequiredDuringSchedulingIgnoredDuringExecution + `,`,
		`PreferredDuringSchedulingIgnoredDuringExecution:` + repeatedStringForPreferredDuringSchedulingIgnoredDuringExecution + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PodSpecApplyConfiguration", "PodSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "PodStatusApplyConfiguration", "PodStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodConditionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodConditionApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Status:` + valueToStringGenerated(this.Status) + `,`,
		`LastProbeTime:` + strings.Replace(fmt.Sprintf("%v", this.LastProbeTime), "Time", "v11.Time", 1) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v11.Time", 1) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodDNSConfigApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOptions := "[]PodDNSConfigOptionApplyConfiguration{"
	for _, f := range this.Options {
		repeatedStringForOptions += strings.Replace(strings.Replace(f.String(), "PodDNSConfigOptionApplyConfiguration", "PodDNSConfigOptionApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOptions += "}"
	s := strings.Join([]string{`&PodDNSConfigApplyConfiguration{`,
		`Nameservers:` + fmt.Sprintf("%v", this.Nameservers) + `,`,
		`Searches:` + fmt.Sprintf("%v", this.Searches) + `,`,
		`Options:` + repeatedStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodDNSConfigOptionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodDNSConfigOptionApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodIPApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodIPApplyConfiguration{`,
		`IP:` + valueToStringGenerated(this.IP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodOSApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodOSApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodReadinessGateApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodReadinessGateApplyConfiguration{`,
		`ConditionType:` + valueToStringGenerated(this.ConditionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodResourceClaimApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodResourceClaimApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Source:` + strings.Replace(this.Source.String(), "ClaimSourceApplyConfiguration", "ClaimSourceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodResourceClaimStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodResourceClaimStatusApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`ResourceClaimName:` + valueToStringGenerated(this.ResourceClaimName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSchedulingGateApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSchedulingGateApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityContextApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSysctls := "[]SysctlApplyConfiguration{"
	for _, f := range this.Sysctls {
		repeatedStringForSysctls += strings.Replace(strings.Replace(f.String(), "SysctlApplyConfiguration", "SysctlApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSysctls += "}"
	s := strings.Join([]string{`&PodSecurityContextApplyConfiguration{`,
		`SELinuxOptions:` + strings.Replace(this.SELinuxOptions.String(), "SELinuxOptionsApplyConfiguration", "SELinuxOptionsApplyConfiguration", 1) + `,`,
		`WindowsOptions:` + strings.Replace(this.WindowsOptions.String(), "WindowsSecurityContextOptionsApplyConfiguration", "WindowsSecurityContextOptionsApplyConfiguration", 1) + `,`,
		`RunAsUser:` + valueToStringGenerated(this.RunAsUser) + `,`,
		`RunAsGroup:` + valueToStringGenerated(this.RunAsGroup) + `,`,
		`RunAsNonRoot:` + valueToStringGenerated(this.RunAsNonRoot) + `,`,
		`SupplementalGroups:` + fmt.Sprintf("%v", this.SupplementalGroups) + `,`,
		`FSGroup:` + valueToStringGenerated(this.FSGroup) + `,`,
		`Sysctls:` + repeatedStringForSysctls + `,`,
		`FSGroupChangePolicy:` + valueToStringGenerated(this.FSGroupChangePolicy) + `,`,
		`SeccompProfile:` + strings.Replace(this.SeccompProfile.String(), "SeccompProfileApplyConfiguration", "SeccompProfileApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSpecApplyConfiguration) String() string {
	return "nil"
}
func (this *PodStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]PodConditionApplyConfiguration{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "PodConditionApplyConfiguration", "PodConditionApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	repeatedStringForHostIPs := "[]HostIPApplyConfiguration{"
	for _, f := range this.HostIPs {
		repeatedStringForHostIPs += strings.Replace(strings.Replace(f.String(), "HostIPApplyConfiguration", "HostIPApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForHostIPs += "}"
	repeatedStringForPodIPs := "[]PodIPApplyConfiguration{"
	for _, f := range this.PodIPs {
		repeatedStringForPodIPs += strings.Replace(strings.Replace(f.String(), "PodIPApplyConfiguration", "PodIPApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPodIPs += "}"
	repeatedStringForInitContainerStatuses := "[]ContainerStatusApplyConfiguration{"
	for _, f := range this.InitContainerStatuses {
		repeatedStringForInitContainerStatuses += strings.Replace(strings.Replace(f.String(), "ContainerStatusApplyConfiguration", "ContainerStatusApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForInitContainerStatuses += "}"
	repeatedStringForContainerStatuses := "[]ContainerStatusApplyConfiguration{"
	for _, f := range this.ContainerStatuses {
		repeatedStringForContainerStatuses += strings.Replace(strings.Replace(f.String(), "ContainerStatusApplyConfiguration", "ContainerStatusApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForContainerStatuses += "}"
	repeatedStringForEphemeralContainerStatuses := "[]ContainerStatusApplyConfiguration{"
	for _, f := range this.EphemeralContainerStatuses {
		repeatedStringForEphemeralContainerStatuses += strings.Replace(strings.Replace(f.String(), "ContainerStatusApplyConfiguration", "ContainerStatusApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEphemeralContainerStatuses += "}"
	repeatedStringForResourceClaimStatuses := "[]PodResourceClaimStatusApplyConfiguration{"
	for _, f := range this.ResourceClaimStatuses {
		repeatedStringForResourceClaimStatuses += strings.Replace(strings.Replace(f.String(), "PodResourceClaimStatusApplyConfiguration", "PodResourceClaimStatusApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForResourceClaimStatuses += "}"
	s := strings.Join([]string{`&PodStatusApplyConfiguration{`,
		`Phase:` + valueToStringGenerated(this.Phase) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`NominatedNodeName:` + valueToStringGenerated(this.NominatedNodeName) + `,`,
		`HostIP:` + valueToStringGenerated(this.HostIP) + `,`,
		`HostIPs:` + repeatedStringForHostIPs + `,`,
		`PodIP:` + valueToStringGenerated(this.PodIP) + `,`,
		`PodIPs:` + repeatedStringForPodIPs + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Time", "v11.Time", 1) + `,`,
		`InitContainerStatuses:` + repeatedStringForInitContainerStatuses + `,`,
		`ContainerStatuses:` + repeatedStringForContainerStatuses + `,`,
		`QOSClass:` + valueToStringGenerated(this.QOSClass) + `,`,
		`EphemeralContainerStatuses:` + repeatedStringForEphemeralContainerStatuses + `,`,
		`Resize:` + valueToStringGenerated(this.Resize) + `,`,
		`ResourceClaimStatuses:` + repeatedStringForResourceClaimStatuses + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodTemplateApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodTemplateApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Template:` + strings.Replace(this.Template.String(), "PodTemplateSpecApplyConfiguration", "PodTemplateSpecApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodTemplateSpecApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodTemplateSpecApplyConfiguration{`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "PodSpecApplyConfiguration", "PodSpecApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortStatusApplyConfiguration{`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`Protocol:` + valueToStringGenerated(this.Protocol) + `,`,
		`Error:` + valueToStringGenerated(this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortworxVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortworxVolumeSourceApplyConfiguration{`,
		`VolumeID:` + valueToStringGenerated(this.VolumeID) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PreferredSchedulingTermApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreferredSchedulingTermApplyConfiguration{`,
		`Weight:` + valueToStringGenerated(this.Weight) + `,`,
		`Preference:` + strings.Replace(this.Preference.String(), "NodeSelectorTermApplyConfiguration", "NodeSelectorTermApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProbeApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProbeApplyConfiguration{`,
		`ProbeHandlerApplyConfiguration:` + strings.Replace(strings.Replace(this.ProbeHandlerApplyConfiguration.String(), "ProbeHandlerApplyConfiguration", "ProbeHandlerApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`InitialDelaySeconds:` + valueToStringGenerated(this.InitialDelaySeconds) + `,`,
		`TimeoutSeconds:` + valueToStringGenerated(this.TimeoutSeconds) + `,`,
		`PeriodSeconds:` + valueToStringGenerated(this.PeriodSeconds) + `,`,
		`SuccessThreshold:` + valueToStringGenerated(this.SuccessThreshold) + `,`,
		`FailureThreshold:` + valueToStringGenerated(this.FailureThreshold) + `,`,
		`TerminationGracePeriodSeconds:` + valueToStringGenerated(this.TerminationGracePeriodSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProbeHandlerApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProbeHandlerApplyConfiguration{`,
		`Exec:` + strings.Replace(this.Exec.String(), "ExecActionApplyConfiguration", "ExecActionApplyConfiguration", 1) + `,`,
		`HTTPGet:` + strings.Replace(this.HTTPGet.String(), "HTTPGetActionApplyConfiguration", "HTTPGetActionApplyConfiguration", 1) + `,`,
		`TCPSocket:` + strings.Replace(this.TCPSocket.String(), "TCPSocketActionApplyConfiguration", "TCPSocketActionApplyConfiguration", 1) + `,`,
		`GRPC:` + strings.Replace(this.GRPC.String(), "GRPCActionApplyConfiguration", "GRPCActionApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectedVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSources := "[]VolumeProjectionApplyConfiguration{"
	for _, f := range this.Sources {
		repeatedStringForSources += strings.Replace(strings.Replace(f.String(), "VolumeProjectionApplyConfiguration", "VolumeProjectionApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSources += "}"
	s := strings.Join([]string{`&ProjectedVolumeSourceApplyConfiguration{`,
		`Sources:` + repeatedStringForSources + `,`,
		`DefaultMode:` + valueToStringGenerated(this.DefaultMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuobyteVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuobyteVolumeSourceApplyConfiguration{`,
		`Registry:` + valueToStringGenerated(this.Registry) + `,`,
		`Volume:` + valueToStringGenerated(this.Volume) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`User:` + valueToStringGenerated(this.User) + `,`,
		`Group:` + valueToStringGenerated(this.Group) + `,`,
		`Tenant:` + valueToStringGenerated(this.Tenant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RBDPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RBDPersistentVolumeSourceApplyConfiguration{`,
		`CephMonitors:` + fmt.Sprintf("%v", this.CephMonitors) + `,`,
		`RBDImage:` + valueToStringGenerated(this.RBDImage) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`RBDPool:` + valueToStringGenerated(this.RBDPool) + `,`,
		`RadosUser:` + valueToStringGenerated(this.RadosUser) + `,`,
		`Keyring:` + valueToStringGenerated(this.Keyring) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RBDVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RBDVolumeSourceApplyConfiguration{`,
		`CephMonitors:` + fmt.Sprintf("%v", this.CephMonitors) + `,`,
		`RBDImage:` + valueToStringGenerated(this.RBDImage) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`RBDPool:` + valueToStringGenerated(this.RBDPool) + `,`,
		`RadosUser:` + valueToStringGenerated(this.RadosUser) + `,`,
		`Keyring:` + valueToStringGenerated(this.Keyring) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationControllerApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationControllerApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "ReplicationControllerSpecApplyConfiguration", "ReplicationControllerSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "ReplicationControllerStatusApplyConfiguration", "ReplicationControllerStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationControllerConditionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationControllerConditionApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Status:` + valueToStringGenerated(this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v11.Time", 1) + `,`,
		`Reason:` + valueToStringGenerated(this.Reason) + `,`,
		`Message:` + valueToStringGenerated(this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationControllerSpecApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForSelector := make([]string, 0, len(this.Selector))
	for k := range this.Selector {
		keysForSelector = append(keysForSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSelector)
	mapStringForSelector := "map[string]string{"
	for _, k := range keysForSelector {
		mapStringForSelector += fmt.Sprintf("%v: %v,", k, this.Selector[k])
	}
	mapStringForSelector += "}"
	s := strings.Join([]string{`&ReplicationControllerSpecApplyConfiguration{`,
		`Replicas:` + valueToStringGenerated(this.Replicas) + `,`,
		`MinReadySeconds:` + valueToStringGenerated(this.MinReadySeconds) + `,`,
		`Selector:` + mapStringForSelector + `,`,
		`Template:` + strings.Replace(this.Template.String(), "PodTemplateSpecApplyConfiguration", "PodTemplateSpecApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationControllerStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]ReplicationControllerConditionApplyConfiguration{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "ReplicationControllerConditionApplyConfiguration", "ReplicationControllerConditionApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ReplicationControllerStatusApplyConfiguration{`,
		`Replicas:` + valueToStringGenerated(this.Replicas) + `,`,
		`FullyLabeledReplicas:` + valueToStringGenerated(this.FullyLabeledReplicas) + `,`,
		`ReadyReplicas:` + valueToStringGenerated(this.ReadyReplicas) + `,`,
		`AvailableReplicas:` + valueToStringGenerated(this.AvailableReplicas) + `,`,
		`ObservedGeneration:` + valueToStringGenerated(this.ObservedGeneration) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceClaimApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceClaimApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceFieldSelectorApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceFieldSelectorApplyConfiguration{`,
		`ContainerName:` + valueToStringGenerated(this.ContainerName) + `,`,
		`Resource:` + valueToStringGenerated(this.Resource) + `,`,
		`Divisor:` + strings.Replace(fmt.Sprintf("%v", this.Divisor), "Quantity", "resource.Quantity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceQuotaApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceQuotaApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "ResourceQuotaSpecApplyConfiguration", "ResourceQuotaSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "ResourceQuotaStatusApplyConfiguration", "ResourceQuotaStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceQuotaSpecApplyConfiguration) String() string {
	return "nil"
}
func (this *ResourceQuotaStatusApplyConfiguration) String() string {
	return "nil"
}
func (this *ResourceRequirementsApplyConfiguration) String() string {
	return "nil"
}
func (this *SELinuxOptionsApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SELinuxOptionsApplyConfiguration{`,
		`User:` + valueToStringGenerated(this.User) + `,`,
		`Role:` + valueToStringGenerated(this.Role) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`Level:` + valueToStringGenerated(this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScaleIOPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScaleIOPersistentVolumeSourceApplyConfiguration{`,
		`Gateway:` + valueToStringGenerated(this.Gateway) + `,`,
		`System:` + valueToStringGenerated(this.System) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "SecretReferenceApplyConfiguration", "SecretReferenceApplyConfiguration", 1) + `,`,
		`SSLEnabled:` + valueToStringGenerated(this.SSLEnabled) + `,`,
		`ProtectionDomain:` + valueToStringGenerated(this.ProtectionDomain) + `,`,
		`StoragePool:` + valueToStringGenerated(this.StoragePool) + `,`,
		`StorageMode:` + valueToStringGenerated(this.StorageMode) + `,`,
		`VolumeName:` + valueToStringGenerated(this.VolumeName) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScaleIOVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScaleIOVolumeSourceApplyConfiguration{`,
		`Gateway:` + valueToStringGenerated(this.Gateway) + `,`,
		`System:` + valueToStringGenerated(this.System) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`SSLEnabled:` + valueToStringGenerated(this.SSLEnabled) + `,`,
		`ProtectionDomain:` + valueToStringGenerated(this.ProtectionDomain) + `,`,
		`StoragePool:` + valueToStringGenerated(this.StoragePool) + `,`,
		`StorageMode:` + valueToStringGenerated(this.StorageMode) + `,`,
		`VolumeName:` + valueToStringGenerated(this.VolumeName) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScopeSelectorApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMatchExpressions := "[]ScopedResourceSelectorRequirementApplyConfiguration{"
	for _, f := range this.MatchExpressions {
		repeatedStringForMatchExpressions += strings.Replace(strings.Replace(f.String(), "ScopedResourceSelectorRequirementApplyConfiguration", "ScopedResourceSelectorRequirementApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMatchExpressions += "}"
	s := strings.Join([]string{`&ScopeSelectorApplyConfiguration{`,
		`MatchExpressions:` + repeatedStringForMatchExpressions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScopedResourceSelectorRequirementApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScopedResourceSelectorRequirementApplyConfiguration{`,
		`ScopeName:` + valueToStringGenerated(this.ScopeName) + `,`,
		`Operator:` + valueToStringGenerated(this.Operator) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeccompProfileApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeccompProfileApplyConfiguration{`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`LocalhostProfile:` + valueToStringGenerated(this.LocalhostProfile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string][]byte{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	keysForStringData := make([]string, 0, len(this.StringData))
	for k := range this.StringData {
		keysForStringData = append(keysForStringData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringData)
	mapStringForStringData := "map[string]string{"
	for _, k := range keysForStringData {
		mapStringForStringData += fmt.Sprintf("%v: %v,", k, this.StringData[k])
	}
	mapStringForStringData += "}"
	s := strings.Join([]string{`&SecretApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Immutable:` + valueToStringGenerated(this.Immutable) + `,`,
		`Data:` + mapStringForData + `,`,
		`StringData:` + mapStringForStringData + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretEnvSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretEnvSourceApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretKeySelectorApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretKeySelectorApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretProjectionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KeyToPathApplyConfiguration{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KeyToPathApplyConfiguration", "KeyToPathApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&SecretProjectionApplyConfiguration{`,
		`LocalObjectReferenceApplyConfiguration:` + strings.Replace(strings.Replace(this.LocalObjectReferenceApplyConfiguration.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretReferenceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretReferenceApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Namespace:` + valueToStringGenerated(this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KeyToPathApplyConfiguration{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KeyToPathApplyConfiguration", "KeyToPathApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&SecretVolumeSourceApplyConfiguration{`,
		`SecretName:` + valueToStringGenerated(this.SecretName) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`DefaultMode:` + valueToStringGenerated(this.DefaultMode) + `,`,
		`Optional:` + valueToStringGenerated(this.Optional) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityContextApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityContextApplyConfiguration{`,
		`Capabilities:` + strings.Replace(this.Capabilities.String(), "CapabilitiesApplyConfiguration", "CapabilitiesApplyConfiguration", 1) + `,`,
		`Privileged:` + valueToStringGenerated(this.Privileged) + `,`,
		`SELinuxOptions:` + strings.Replace(this.SELinuxOptions.String(), "SELinuxOptionsApplyConfiguration", "SELinuxOptionsApplyConfiguration", 1) + `,`,
		`WindowsOptions:` + strings.Replace(this.WindowsOptions.String(), "WindowsSecurityContextOptionsApplyConfiguration", "WindowsSecurityContextOptionsApplyConfiguration", 1) + `,`,
		`RunAsUser:` + valueToStringGenerated(this.RunAsUser) + `,`,
		`RunAsGroup:` + valueToStringGenerated(this.RunAsGroup) + `,`,
		`RunAsNonRoot:` + valueToStringGenerated(this.RunAsNonRoot) + `,`,
		`ReadOnlyRootFilesystem:` + valueToStringGenerated(this.ReadOnlyRootFilesystem) + `,`,
		`AllowPrivilegeEscalation:` + valueToStringGenerated(this.AllowPrivilegeEscalation) + `,`,
		`ProcMount:` + valueToStringGenerated(this.ProcMount) + `,`,
		`SeccompProfile:` + strings.Replace(this.SeccompProfile.String(), "SeccompProfileApplyConfiguration", "SeccompProfileApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceAccountApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSecrets := "[]ObjectReferenceApplyConfiguration{"
	for _, f := range this.Secrets {
		repeatedStringForSecrets += strings.Replace(strings.Replace(f.String(), "ObjectReferenceApplyConfiguration", "ObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSecrets += "}"
	repeatedStringForImagePullSecrets := "[]LocalObjectReferenceApplyConfiguration{"
	for _, f := range this.ImagePullSecrets {
		repeatedStringForImagePullSecrets += strings.Replace(strings.Replace(f.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForImagePullSecrets += "}"
	s := strings.Join([]string{`&ServiceAccountApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Secrets:` + repeatedStringForSecrets + `,`,
		`ImagePullSecrets:` + repeatedStringForImagePullSecrets + `,`,
		`AutomountServiceAccountToken:` + valueToStringGenerated(this.AutomountServiceAccountToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceAccountTokenProjectionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceAccountTokenProjectionApplyConfiguration{`,
		`Audience:` + valueToStringGenerated(this.Audience) + `,`,
		`ExpirationSeconds:` + valueToStringGenerated(this.ExpirationSeconds) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceApplyConfiguration{`,
		`TypeMetaApplyConfiguration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TypeMetaApplyConfiguration), "TypeMetaApplyConfiguration", "v1.TypeMetaApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`ObjectMetaApplyConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.ObjectMetaApplyConfiguration), "ObjectMetaApplyConfiguration", "v1.ObjectMetaApplyConfiguration", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "ServiceSpecApplyConfiguration", "ServiceSpecApplyConfiguration", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "ServiceStatusApplyConfiguration", "ServiceStatusApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicePortApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicePortApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Protocol:` + valueToStringGenerated(this.Protocol) + `,`,
		`AppProtocol:` + valueToStringGenerated(this.AppProtocol) + `,`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`TargetPort:` + strings.Replace(fmt.Sprintf("%v", this.TargetPort), "IntOrString", "intstr.IntOrString", 1) + `,`,
		`NodePort:` + valueToStringGenerated(this.NodePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSpecApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPorts := "[]ServicePortApplyConfiguration{"
	for _, f := range this.Ports {
		repeatedStringForPorts += strings.Replace(strings.Replace(f.String(), "ServicePortApplyConfiguration", "ServicePortApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPorts += "}"
	keysForSelector := make([]string, 0, len(this.Selector))
	for k := range this.Selector {
		keysForSelector = append(keysForSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSelector)
	mapStringForSelector := "map[string]string{"
	for _, k := range keysForSelector {
		mapStringForSelector += fmt.Sprintf("%v: %v,", k, this.Selector[k])
	}
	mapStringForSelector += "}"
	s := strings.Join([]string{`&ServiceSpecApplyConfiguration{`,
		`Ports:` + repeatedStringForPorts + `,`,
		`Selector:` + mapStringForSelector + `,`,
		`ClusterIP:` + valueToStringGenerated(this.ClusterIP) + `,`,
		`ClusterIPs:` + fmt.Sprintf("%v", this.ClusterIPs) + `,`,
		`Type:` + valueToStringGenerated(this.Type) + `,`,
		`ExternalIPs:` + fmt.Sprintf("%v", this.ExternalIPs) + `,`,
		`SessionAffinity:` + valueToStringGenerated(this.SessionAffinity) + `,`,
		`LoadBalancerIP:` + valueToStringGenerated(this.LoadBalancerIP) + `,`,
		`LoadBalancerSourceRanges:` + fmt.Sprintf("%v", this.LoadBalancerSourceRanges) + `,`,
		`ExternalName:` + valueToStringGenerated(this.ExternalName) + `,`,
		`ExternalTrafficPolicy:` + valueToStringGenerated(this.ExternalTrafficPolicy) + `,`,
		`HealthCheckNodePort:` + valueToStringGenerated(this.HealthCheckNodePort) + `,`,
		`PublishNotReadyAddresses:` + valueToStringGenerated(this.PublishNotReadyAddresses) + `,`,
		`SessionAffinityConfig:` + strings.Replace(this.SessionAffinityConfig.String(), "SessionAffinityConfigApplyConfiguration", "SessionAffinityConfigApplyConfiguration", 1) + `,`,
		`IPFamilies:` + fmt.Sprintf("%v", this.IPFamilies) + `,`,
		`IPFamilyPolicy:` + valueToStringGenerated(this.IPFamilyPolicy) + `,`,
		`AllocateLoadBalancerNodePorts:` + valueToStringGenerated(this.AllocateLoadBalancerNodePorts) + `,`,
		`LoadBalancerClass:` + valueToStringGenerated(this.LoadBalancerClass) + `,`,
		`InternalTrafficPolicy:` + valueToStringGenerated(this.InternalTrafficPolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatusApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]ConditionApplyConfiguration{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ServiceStatusApplyConfiguration{`,
		`LoadBalancer:` + strings.Replace(this.LoadBalancer.String(), "LoadBalancerStatusApplyConfiguration", "LoadBalancerStatusApplyConfiguration", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionAffinityConfigApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionAffinityConfigApplyConfiguration{`,
		`ClientIP:` + strings.Replace(this.ClientIP.String(), "ClientIPConfigApplyConfiguration", "ClientIPConfigApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageOSPersistentVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageOSPersistentVolumeSourceApplyConfiguration{`,
		`VolumeName:` + valueToStringGenerated(this.VolumeName) + `,`,
		`VolumeNamespace:` + valueToStringGenerated(this.VolumeNamespace) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "ObjectReferenceApplyConfiguration", "ObjectReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageOSVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageOSVolumeSourceApplyConfiguration{`,
		`VolumeName:` + valueToStringGenerated(this.VolumeName) + `,`,
		`VolumeNamespace:` + valueToStringGenerated(this.VolumeNamespace) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "LocalObjectReferenceApplyConfiguration", "LocalObjectReferenceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SysctlApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SysctlApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPSocketActionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPSocketActionApplyConfiguration{`,
		`Port:` + strings.Replace(fmt.Sprintf("%v", this.Port), "IntOrString", "intstr.IntOrString", 1) + `,`,
		`Host:` + valueToStringGenerated(this.Host) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaintApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaintApplyConfiguration{`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`Effect:` + valueToStringGenerated(this.Effect) + `,`,
		`TimeAdded:` + strings.Replace(fmt.Sprintf("%v", this.TimeAdded), "Time", "v11.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TolerationApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TolerationApplyConfiguration{`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Operator:` + valueToStringGenerated(this.Operator) + `,`,
		`Value:` + valueToStringGenerated(this.Value) + `,`,
		`Effect:` + valueToStringGenerated(this.Effect) + `,`,
		`TolerationSeconds:` + valueToStringGenerated(this.TolerationSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopologySelectorLabelRequirementApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopologySelectorLabelRequirementApplyConfiguration{`,
		`Key:` + valueToStringGenerated(this.Key) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopologySelectorTermApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMatchLabelExpressions := "[]TopologySelectorLabelRequirementApplyConfiguration{"
	for _, f := range this.MatchLabelExpressions {
		repeatedStringForMatchLabelExpressions += strings.Replace(strings.Replace(f.String(), "TopologySelectorLabelRequirementApplyConfiguration", "TopologySelectorLabelRequirementApplyConfiguration", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMatchLabelExpressions += "}"
	s := strings.Join([]string{`&TopologySelectorTermApplyConfiguration{`,
		`MatchLabelExpressions:` + repeatedStringForMatchLabelExpressions + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopologySpreadConstraintApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopologySpreadConstraintApplyConfiguration{`,
		`MaxSkew:` + valueToStringGenerated(this.MaxSkew) + `,`,
		`TopologyKey:` + valueToStringGenerated(this.TopologyKey) + `,`,
		`WhenUnsatisfiable:` + valueToStringGenerated(this.WhenUnsatisfiable) + `,`,
		`LabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.LabelSelector), "LabelSelectorApplyConfiguration", "v1.LabelSelectorApplyConfiguration", 1) + `,`,
		`MinDomains:` + valueToStringGenerated(this.MinDomains) + `,`,
		`NodeAffinityPolicy:` + valueToStringGenerated(this.NodeAffinityPolicy) + `,`,
		`NodeTaintsPolicy:` + valueToStringGenerated(this.NodeTaintsPolicy) + `,`,
		`MatchLabelKeys:` + fmt.Sprintf("%v", this.MatchLabelKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypedLocalObjectReferenceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypedLocalObjectReferenceApplyConfiguration{`,
		`APIGroup:` + valueToStringGenerated(this.APIGroup) + `,`,
		`Kind:` + valueToStringGenerated(this.Kind) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypedObjectReferenceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypedObjectReferenceApplyConfiguration{`,
		`APIGroup:` + valueToStringGenerated(this.APIGroup) + `,`,
		`Kind:` + valueToStringGenerated(this.Kind) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`Namespace:` + valueToStringGenerated(this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`VolumeSourceApplyConfiguration:` + strings.Replace(strings.Replace(this.VolumeSourceApplyConfiguration.String(), "VolumeSourceApplyConfiguration", "VolumeSourceApplyConfiguration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeDeviceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeDeviceApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`DevicePath:` + valueToStringGenerated(this.DevicePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeMountApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeMountApplyConfiguration{`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`ReadOnly:` + valueToStringGenerated(this.ReadOnly) + `,`,
		`MountPath:` + valueToStringGenerated(this.MountPath) + `,`,
		`SubPath:` + valueToStringGenerated(this.SubPath) + `,`,
		`MountPropagation:` + valueToStringGenerated(this.MountPropagation) + `,`,
		`SubPathExpr:` + valueToStringGenerated(this.SubPathExpr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeNodeAffinityApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeNodeAffinityApplyConfiguration{`,
		`Required:` + strings.Replace(this.Required.String(), "NodeSelectorApplyConfiguration", "NodeSelectorApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeProjectionApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeProjectionApplyConfiguration{`,
		`Secret:` + strings.Replace(this.Secret.String(), "SecretProjectionApplyConfiguration", "SecretProjectionApplyConfiguration", 1) + `,`,
		`DownwardAPI:` + strings.Replace(this.DownwardAPI.String(), "DownwardAPIProjectionApplyConfiguration", "DownwardAPIProjectionApplyConfiguration", 1) + `,`,
		`ConfigMap:` + strings.Replace(this.ConfigMap.String(), "ConfigMapProjectionApplyConfiguration", "ConfigMapProjectionApplyConfiguration", 1) + `,`,
		`ServiceAccountToken:` + strings.Replace(this.ServiceAccountToken.String(), "ServiceAccountTokenProjectionApplyConfiguration", "ServiceAccountTokenProjectionApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeSourceApplyConfiguration{`,
		`HostPath:` + strings.Replace(this.HostPath.String(), "HostPathVolumeSourceApplyConfiguration", "HostPathVolumeSourceApplyConfiguration", 1) + `,`,
		`EmptyDir:` + strings.Replace(this.EmptyDir.String(), "EmptyDirVolumeSourceApplyConfiguration", "EmptyDirVolumeSourceApplyConfiguration", 1) + `,`,
		`GCEPersistentDisk:` + strings.Replace(this.GCEPersistentDisk.String(), "GCEPersistentDiskVolumeSourceApplyConfiguration", "GCEPersistentDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`AWSElasticBlockStore:` + strings.Replace(this.AWSElasticBlockStore.String(), "AWSElasticBlockStoreVolumeSourceApplyConfiguration", "AWSElasticBlockStoreVolumeSourceApplyConfiguration", 1) + `,`,
		`GitRepo:` + strings.Replace(this.GitRepo.String(), "GitRepoVolumeSourceApplyConfiguration", "GitRepoVolumeSourceApplyConfiguration", 1) + `,`,
		`Secret:` + strings.Replace(this.Secret.String(), "SecretVolumeSourceApplyConfiguration", "SecretVolumeSourceApplyConfiguration", 1) + `,`,
		`NFS:` + strings.Replace(this.NFS.String(), "NFSVolumeSourceApplyConfiguration", "NFSVolumeSourceApplyConfiguration", 1) + `,`,
		`ISCSI:` + strings.Replace(this.ISCSI.String(), "ISCSIVolumeSourceApplyConfiguration", "ISCSIVolumeSourceApplyConfiguration", 1) + `,`,
		`Glusterfs:` + strings.Replace(this.Glusterfs.String(), "GlusterfsVolumeSourceApplyConfiguration", "GlusterfsVolumeSourceApplyConfiguration", 1) + `,`,
		`PersistentVolumeClaim:` + strings.Replace(this.PersistentVolumeClaim.String(), "PersistentVolumeClaimVolumeSourceApplyConfiguration", "PersistentVolumeClaimVolumeSourceApplyConfiguration", 1) + `,`,
		`RBD:` + strings.Replace(this.RBD.String(), "RBDVolumeSourceApplyConfiguration", "RBDVolumeSourceApplyConfiguration", 1) + `,`,
		`FlexVolume:` + strings.Replace(this.FlexVolume.String(), "FlexVolumeSourceApplyConfiguration", "FlexVolumeSourceApplyConfiguration", 1) + `,`,
		`Cinder:` + strings.Replace(this.Cinder.String(), "CinderVolumeSourceApplyConfiguration", "CinderVolumeSourceApplyConfiguration", 1) + `,`,
		`CephFS:` + strings.Replace(this.CephFS.String(), "CephFSVolumeSourceApplyConfiguration", "CephFSVolumeSourceApplyConfiguration", 1) + `,`,
		`Flocker:` + strings.Replace(this.Flocker.String(), "FlockerVolumeSourceApplyConfiguration", "FlockerVolumeSourceApplyConfiguration", 1) + `,`,
		`DownwardAPI:` + strings.Replace(this.DownwardAPI.String(), "DownwardAPIVolumeSourceApplyConfiguration", "DownwardAPIVolumeSourceApplyConfiguration", 1) + `,`,
		`FC:` + strings.Replace(this.FC.String(), "FCVolumeSourceApplyConfiguration", "FCVolumeSourceApplyConfiguration", 1) + `,`,
		`AzureFile:` + strings.Replace(this.AzureFile.String(), "AzureFileVolumeSourceApplyConfiguration", "AzureFileVolumeSourceApplyConfiguration", 1) + `,`,
		`ConfigMap:` + strings.Replace(this.ConfigMap.String(), "ConfigMapVolumeSourceApplyConfiguration", "ConfigMapVolumeSourceApplyConfiguration", 1) + `,`,
		`VsphereVolume:` + strings.Replace(this.VsphereVolume.String(), "VsphereVirtualDiskVolumeSourceApplyConfiguration", "VsphereVirtualDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`Quobyte:` + strings.Replace(this.Quobyte.String(), "QuobyteVolumeSourceApplyConfiguration", "QuobyteVolumeSourceApplyConfiguration", 1) + `,`,
		`AzureDisk:` + strings.Replace(this.AzureDisk.String(), "AzureDiskVolumeSourceApplyConfiguration", "AzureDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`PhotonPersistentDisk:` + strings.Replace(this.PhotonPersistentDisk.String(), "PhotonPersistentDiskVolumeSourceApplyConfiguration", "PhotonPersistentDiskVolumeSourceApplyConfiguration", 1) + `,`,
		`Projected:` + strings.Replace(this.Projected.String(), "ProjectedVolumeSourceApplyConfiguration", "ProjectedVolumeSourceApplyConfiguration", 1) + `,`,
		`PortworxVolume:` + strings.Replace(this.PortworxVolume.String(), "PortworxVolumeSourceApplyConfiguration", "PortworxVolumeSourceApplyConfiguration", 1) + `,`,
		`ScaleIO:` + strings.Replace(this.ScaleIO.String(), "ScaleIOVolumeSourceApplyConfiguration", "ScaleIOVolumeSourceApplyConfiguration", 1) + `,`,
		`StorageOS:` + strings.Replace(this.StorageOS.String(), "StorageOSVolumeSourceApplyConfiguration", "StorageOSVolumeSourceApplyConfiguration", 1) + `,`,
		`CSI:` + strings.Replace(this.CSI.String(), "CSIVolumeSourceApplyConfiguration", "CSIVolumeSourceApplyConfiguration", 1) + `,`,
		`Ephemeral:` + strings.Replace(this.Ephemeral.String(), "EphemeralVolumeSourceApplyConfiguration", "EphemeralVolumeSourceApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VsphereVirtualDiskVolumeSourceApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VsphereVirtualDiskVolumeSourceApplyConfiguration{`,
		`VolumePath:` + valueToStringGenerated(this.VolumePath) + `,`,
		`FSType:` + valueToStringGenerated(this.FSType) + `,`,
		`StoragePolicyName:` + valueToStringGenerated(this.StoragePolicyName) + `,`,
		`StoragePolicyID:` + valueToStringGenerated(this.StoragePolicyID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeightedPodAffinityTermApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeightedPodAffinityTermApplyConfiguration{`,
		`Weight:` + valueToStringGenerated(this.Weight) + `,`,
		`PodAffinityTerm:` + strings.Replace(this.PodAffinityTerm.String(), "PodAffinityTermApplyConfiguration", "PodAffinityTermApplyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WindowsSecurityContextOptionsApplyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WindowsSecurityContextOptionsApplyConfiguration{`,
		`GMSACredentialSpecName:` + valueToStringGenerated(this.GMSACredentialSpecName) + `,`,
		`GMSACredentialSpec:` + valueToStringGenerated(this.GMSACredentialSpec) + `,`,
		`RunAsUserName:` + valueToStringGenerated(this.RunAsUserName) + `,`,
		`HostProcess:` + valueToStringGenerated(this.HostProcess) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSElasticBlockStoreVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSElasticBlockStoreVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSElasticBlockStoreVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Partition = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffinityApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffinityApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffinityApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAffinity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAffinity == nil {
				m.NodeAffinity = &NodeAffinityApplyConfiguration{}
			}
			if err := m.NodeAffinity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAffinity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAffinity == nil {
				m.PodAffinity = &PodAffinityApplyConfiguration{}
			}
			if err := m.PodAffinity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAntiAffinity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAntiAffinity == nil {
				m.PodAntiAffinity = &PodAntiAffinityApplyConfiguration{}
			}
			if err := m.PodAntiAffinity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttachedVolumeApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttachedVolumeApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttachedVolumeApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.UniqueVolumeName(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DevicePath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureDiskVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureDiskVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureDiskVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DiskName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDiskURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DataDiskURI = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachingMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.AzureDataDiskCachingMode(dAtA[iNdEx:postIndex])
			m.CachingMode = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.AzureDataDiskKind(dAtA[iNdEx:postIndex])
			m.Kind = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureFilePersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureFilePersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureFilePersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ShareName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretNamespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureFileVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureFileVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureFileVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ShareName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSIPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSIPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSIPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Driver = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeHandle = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VolumeAttributes == nil {
				m.VolumeAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VolumeAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerPublishSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControllerPublishSecretRef == nil {
				m.ControllerPublishSecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.ControllerPublishSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStageSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeStageSecretRef == nil {
				m.NodeStageSecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.NodeStageSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePublishSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodePublishSecretRef == nil {
				m.NodePublishSecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.NodePublishSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerExpandSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControllerExpandSecretRef == nil {
				m.ControllerExpandSecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.ControllerExpandSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeExpandSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeExpandSecretRef == nil {
				m.NodeExpandSecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.NodeExpandSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSIVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSIVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSIVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Driver = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VolumeAttributes == nil {
				m.VolumeAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VolumeAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePublishSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodePublishSecretRef == nil {
				m.NodePublishSecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.NodePublishSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapabilitiesApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapabilitiesApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapabilitiesApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Add = append(m.Add, k8s_io_api_core_v1.Capability(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drop = append(m.Drop, k8s_io_api_core_v1.Capability(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CephFSPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CephFSPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CephFSPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monitors = append(m.Monitors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretFile = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CephFSVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CephFSVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CephFSVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monitors = append(m.Monitors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretFile = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CinderPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CinderPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CinderPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CinderVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CinderVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CinderVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceClaimName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceClaimName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceClaimTemplateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceClaimTemplateName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientIPConfigApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientIPConfigApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientIPConfigApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeoutSeconds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentConditionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentConditionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentConditionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ComponentConditionType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Error = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ComponentConditionApplyConfiguration{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Immutable = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BinaryData == nil {
				m.BinaryData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenerated
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BinaryData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapEnvSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapEnvSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapEnvSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapKeySelectorApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapKeySelectorApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapKeySelectorApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapNodeConfigSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapNodeConfigSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapNodeConfigSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_apimachinery_pkg_types.UID(dAtA[iNdEx:postIndex])
			m.UID = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceVersion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletConfigKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KubeletConfigKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapProjectionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapProjectionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapProjectionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KeyToPathApplyConfiguration{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KeyToPathApplyConfiguration{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultMode = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WorkingDir = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, ContainerPortApplyConfiguration{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvFrom = append(m.EnvFrom, EnvFromSourceApplyConfiguration{})
			if err := m.EnvFrom[len(m.EnvFrom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, EnvVarApplyConfiguration{})
			if err := m.Env[len(m.Env)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceRequirementsApplyConfiguration{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResizePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResizePolicy = append(m.ResizePolicy, ContainerResizePolicyApplyConfiguration{})
			if err := m.ResizePolicy[len(m.ResizePolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ContainerRestartPolicy(dAtA[iNdEx:postIndex])
			m.RestartPolicy = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeMounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeMounts = append(m.VolumeMounts, VolumeMountApplyConfiguration{})
			if err := m.VolumeMounts[len(m.VolumeMounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeDevices = append(m.VolumeDevices, VolumeDeviceApplyConfiguration{})
			if err := m.VolumeDevices[len(m.VolumeDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LivenessProbe == nil {
				m.LivenessProbe = &ProbeApplyConfiguration{}
			}
			if err := m.LivenessProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadinessProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadinessProbe == nil {
				m.ReadinessProbe = &ProbeApplyConfiguration{}
			}
			if err := m.ReadinessProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartupProbe == nil {
				m.StartupProbe = &ProbeApplyConfiguration{}
			}
			if err := m.StartupProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lifecycle == nil {
				m.Lifecycle = &LifecycleApplyConfiguration{}
			}
			if err := m.Lifecycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationMessagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TerminationMessagePath = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationMessagePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.TerminationMessagePolicy(dAtA[iNdEx:postIndex])
			m.TerminationMessagePolicy = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePullPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PullPolicy(dAtA[iNdEx:postIndex])
			m.ImagePullPolicy = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityContext == nil {
				m.SecurityContext = &SecurityContextApplyConfiguration{}
			}
			if err := m.SecurityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Stdin = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdinOnce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.StdinOnce = &b
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTY", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TTY = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerImageApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerImageApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerImageApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SizeBytes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerPortApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerPortApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerPortApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostPort = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContainerPort = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.Protocol(dAtA[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostIP = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerResizePolicyApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerResizePolicyApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerResizePolicyApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ResourceName(dAtA[iNdEx:postIndex])
			m.ResourceName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ResourceResizeRestartPolicy(dAtA[iNdEx:postIndex])
			m.RestartPolicy = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStateApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStateApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStateApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Waiting == nil {
				m.Waiting = &ContainerStateWaitingApplyConfiguration{}
			}
			if err := m.Waiting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Running", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Running == nil {
				m.Running = &ContainerStateRunningApplyConfiguration{}
			}
			if err := m.Running.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Terminated == nil {
				m.Terminated = &ContainerStateTerminatedApplyConfiguration{}
			}
			if err := m.Terminated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStateRunningApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStateRunningApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStateRunningApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedAt == nil {
				m.StartedAt = &v11.Time{}
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStateTerminatedApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStateTerminatedApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStateTerminatedApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExitCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signal = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedAt == nil {
				m.StartedAt = &v11.Time{}
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishedAt == nil {
				m.FinishedAt = &v11.Time{}
			}
			if err := m.FinishedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerID = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStateWaitingApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStateWaitingApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStateWaitingApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *DaemonEndpointApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaemonEndpointApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaemonEndpointApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownwardAPIProjectionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownwardAPIProjectionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownwardAPIProjectionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, DownwardAPIVolumeFileApplyConfiguration{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownwardAPIVolumeFileApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownwardAPIVolumeFileApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownwardAPIVolumeFileApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldRef == nil {
				m.FieldRef = &ObjectFieldSelectorApplyConfiguration{}
			}
			if err := m.FieldRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceFieldRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceFieldRef == nil {
				m.ResourceFieldRef = &ResourceFieldSelectorApplyConfiguration{}
			}
			if err := m.ResourceFieldRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownwardAPIVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownwardAPIVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownwardAPIVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, DownwardAPIVolumeFileApplyConfiguration{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultMode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyDirVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyDirVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyDirVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.StorageMedium(dAtA[iNdEx:postIndex])
			m.Medium = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SizeLimit == nil {
				m.SizeLimit = &resource.Quantity{}
			}
			if err := m.SizeLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointAddressApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointAddressApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointAddressApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IP = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetRef == nil {
				m.TargetRef = &ObjectReferenceApplyConfiguration{}
			}
			if err := m.TargetRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointPortApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointPortApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointPortApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.Protocol(dAtA[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppProtocol = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointSubsetApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSubsetApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSubsetApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, EndpointAddressApplyConfiguration{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotReadyAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotReadyAddresses = append(m.NotReadyAddresses, EndpointAddressApplyConfiguration{})
			if err := m.NotReadyAddresses[len(m.NotReadyAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, EndpointPortApplyConfiguration{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointsApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointsApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointsApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsets = append(m.Subsets, EndpointSubsetApplyConfiguration{})
			if err := m.Subsets[len(m.Subsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvFromSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvFromSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvFromSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Prefix = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMapRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMapRef == nil {
				m.ConfigMapRef = &ConfigMapEnvSourceApplyConfiguration{}
			}
			if err := m.ConfigMapRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretEnvSourceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvVarApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvVarApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvVarApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueFrom == nil {
				m.ValueFrom = &EnvVarSourceApplyConfiguration{}
			}
			if err := m.ValueFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvVarSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvVarSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvVarSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldRef == nil {
				m.FieldRef = &ObjectFieldSelectorApplyConfiguration{}
			}
			if err := m.FieldRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceFieldRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceFieldRef == nil {
				m.ResourceFieldRef = &ResourceFieldSelectorApplyConfiguration{}
			}
			if err := m.ResourceFieldRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMapKeyRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMapKeyRef == nil {
				m.ConfigMapKeyRef = &ConfigMapKeySelectorApplyConfiguration{}
			}
			if err := m.ConfigMapKeyRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKeyRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretKeyRef == nil {
				m.SecretKeyRef = &SecretKeySelectorApplyConfiguration{}
			}
			if err := m.SecretKeyRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralContainerApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralContainerApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralContainerApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralContainerCommonApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EphemeralContainerCommonApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetContainerName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralContainerCommonApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralContainerCommonApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralContainerCommonApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WorkingDir = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, ContainerPortApplyConfiguration{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvFrom = append(m.EnvFrom, EnvFromSourceApplyConfiguration{})
			if err := m.EnvFrom[len(m.EnvFrom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, EnvVarApplyConfiguration{})
			if err := m.Env[len(m.Env)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceRequirementsApplyConfiguration{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResizePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResizePolicy = append(m.ResizePolicy, ContainerResizePolicyApplyConfiguration{})
			if err := m.ResizePolicy[len(m.ResizePolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ContainerRestartPolicy(dAtA[iNdEx:postIndex])
			m.RestartPolicy = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeMounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeMounts = append(m.VolumeMounts, VolumeMountApplyConfiguration{})
			if err := m.VolumeMounts[len(m.VolumeMounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeDevices = append(m.VolumeDevices, VolumeDeviceApplyConfiguration{})
			if err := m.VolumeDevices[len(m.VolumeDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LivenessProbe == nil {
				m.LivenessProbe = &ProbeApplyConfiguration{}
			}
			if err := m.LivenessProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadinessProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadinessProbe == nil {
				m.ReadinessProbe = &ProbeApplyConfiguration{}
			}
			if err := m.ReadinessProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupProbe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartupProbe == nil {
				m.StartupProbe = &ProbeApplyConfiguration{}
			}
			if err := m.StartupProbe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lifecycle == nil {
				m.Lifecycle = &LifecycleApplyConfiguration{}
			}
			if err := m.Lifecycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationMessagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TerminationMessagePath = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationMessagePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.TerminationMessagePolicy(dAtA[iNdEx:postIndex])
			m.TerminationMessagePolicy = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePullPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PullPolicy(dAtA[iNdEx:postIndex])
			m.ImagePullPolicy = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityContext == nil {
				m.SecurityContext = &SecurityContextApplyConfiguration{}
			}
			if err := m.SecurityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Stdin = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdinOnce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.StdinOnce = &b
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTY", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TTY = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeClaimTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VolumeClaimTemplate == nil {
				m.VolumeClaimTemplate = &PersistentVolumeClaimTemplateApplyConfiguration{}
			}
			if err := m.VolumeClaimTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvolvedObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvolvedObject == nil {
				m.InvolvedObject = &ObjectReferenceApplyConfiguration{}
			}
			if err := m.InvolvedObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &EventSourceApplyConfiguration{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstTimestamp == nil {
				m.FirstTimestamp = &v11.Time{}
			}
			if err := m.FirstTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTimestamp == nil {
				m.LastTimestamp = &v11.Time{}
			}
			if err := m.LastTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventTime == nil {
				m.EventTime = &v11.MicroTime{}
			}
			if err := m.EventTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Series == nil {
				m.Series = &EventSeriesApplyConfiguration{}
			}
			if err := m.Series.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Action = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Related", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Related == nil {
				m.Related = &ObjectReferenceApplyConfiguration{}
			}
			if err := m.Related.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportingController", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReportingController = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportingInstance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReportingInstance = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSeriesApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSeriesApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSeriesApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastObservedTime == nil {
				m.LastObservedTime = &v11.MicroTime{}
			}
			if err := m.LastObservedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Component = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Host = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecActionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecActionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecActionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWWNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetWWNs = append(m.TargetWWNs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lun", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lun = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WWIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WWIDs = append(m.WWIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlexPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlexPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlexPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Driver = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlexVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlexVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlexVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Driver = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlockerVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlockerVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlockerVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DatasetName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DatasetUUID = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCEPersistentDiskVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCEPersistentDiskVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCEPersistentDiskVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PDName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PDName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Partition = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCActionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCActionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCActionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Service = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitRepoVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitRepoVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitRepoVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Repository = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Revision = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Directory = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlusterfsPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlusterfsPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlusterfsPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EndpointsName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointsNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EndpointsNamespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlusterfsVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlusterfsVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlusterfsVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EndpointsName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPGetActionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPGetActionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPGetActionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Port == nil {
				m.Port = &intstr.IntOrString{}
			}
			if err := m.Port.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Host = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.URIScheme(dAtA[iNdEx:postIndex])
			m.Scheme = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HTTPHeaders = append(m.HTTPHeaders, HTTPHeaderApplyConfiguration{})
			if err := m.HTTPHeaders[len(m.HTTPHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPHeaderApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPHeaderApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPHeaderApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostAliasApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostAliasApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostAliasApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IP = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostnames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostnames = append(m.Hostnames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostIPApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostIPApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostIPApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IP = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostPathVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostPathVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostPathVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.HostPathType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ISCSIPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ISCSIPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ISCSIPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPortal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetPortal = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IQN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IQN = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lun", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lun = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISCSIInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ISCSIInterface = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Portals = append(m.Portals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryCHAPAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DiscoveryCHAPAuth = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCHAPAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SessionCHAPAuth = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InitiatorName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ISCSIVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ISCSIVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ISCSIVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPortal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetPortal = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IQN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IQN = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lun", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lun = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISCSIInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ISCSIInterface = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Portals = append(m.Portals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryCHAPAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DiscoveryCHAPAuth = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCHAPAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SessionCHAPAuth = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InitiatorName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyToPathApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyToPathApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyToPathApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifecycleApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifecycleApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifecycleApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostStart == nil {
				m.PostStart = &LifecycleHandlerApplyConfiguration{}
			}
			if err := m.PostStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreStop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreStop == nil {
				m.PreStop = &LifecycleHandlerApplyConfiguration{}
			}
			if err := m.PreStop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifecycleHandlerApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifecycleHandlerApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifecycleHandlerApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exec == nil {
				m.Exec = &ExecActionApplyConfiguration{}
			}
			if err := m.Exec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HTTPGet == nil {
				m.HTTPGet = &HTTPGetActionApplyConfiguration{}
			}
			if err := m.HTTPGet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPSocket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TCPSocket == nil {
				m.TCPSocket = &TCPSocketActionApplyConfiguration{}
			}
			if err := m.TCPSocket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitRangeApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitRangeApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitRangeApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &LimitRangeSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitRangeItemApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *LimitRangeSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitRangeSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitRangeSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, LimitRangeItemApplyConfiguration{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancerIngressApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancerIngressApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancerIngressApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IP = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.LoadBalancerIPMode(dAtA[iNdEx:postIndex])
			m.IPMode = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, PortStatusApplyConfiguration{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancerStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancerStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancerStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ingress = append(m.Ingress, LoadBalancerIngressApplyConfiguration{})
			if err := m.Ingress[len(m.Ingress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalObjectReferenceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalObjectReferenceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalObjectReferenceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFSVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFSVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFSVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Server = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NamespaceSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NamespaceStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceConditionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceConditionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceConditionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NamespaceConditionType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v11.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, k8s_io_api_core_v1.FinalizerName(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NamespacePhase(dAtA[iNdEx:postIndex])
			m.Phase = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, NamespaceConditionApplyConfiguration{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeAddressApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeAddressApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeAddressApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NodeAddressType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeAffinityApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeAffinityApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeAffinityApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredDuringSchedulingIgnoredDuringExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredDuringSchedulingIgnoredDuringExecution == nil {
				m.RequiredDuringSchedulingIgnoredDuringExecution = &NodeSelectorApplyConfiguration{}
			}
			if err := m.RequiredDuringSchedulingIgnoredDuringExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredDuringSchedulingIgnoredDuringExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredDuringSchedulingIgnoredDuringExecution = append(m.PreferredDuringSchedulingIgnoredDuringExecution, PreferredSchedulingTermApplyConfiguration{})
			if err := m.PreferredDuringSchedulingIgnoredDuringExecution[len(m.PreferredDuringSchedulingIgnoredDuringExecution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NodeSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NodeStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConditionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConditionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConditionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NodeConditionType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatTime == nil {
				m.LastHeartbeatTime = &v11.Time{}
			}
			if err := m.LastHeartbeatTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v11.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConfigSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConfigSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConfigSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMap == nil {
				m.ConfigMap = &ConfigMapNodeConfigSourceApplyConfiguration{}
			}
			if err := m.ConfigMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConfigStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConfigStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConfigStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assigned == nil {
				m.Assigned = &NodeConfigSourceApplyConfiguration{}
			}
			if err := m.Assigned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Active == nil {
				m.Active = &NodeConfigSourceApplyConfiguration{}
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastKnownGood", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastKnownGood == nil {
				m.LastKnownGood = &NodeConfigSourceApplyConfiguration{}
			}
			if err := m.LastKnownGood.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Error = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDaemonEndpointsApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDaemonEndpointsApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDaemonEndpointsApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubeletEndpoint == nil {
				m.KubeletEndpoint = &DaemonEndpointApplyConfiguration{}
			}
			if err := m.KubeletEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSelectorApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSelectorApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSelectorApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelectorTerms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSelectorTerms = append(m.NodeSelectorTerms, NodeSelectorTermApplyConfiguration{})
			if err := m.NodeSelectorTerms[len(m.NodeSelectorTerms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSelectorRequirementApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSelectorRequirementApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSelectorRequirementApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NodeSelectorOperator(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSelectorTermApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSelectorTermApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSelectorTermApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchExpressions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchExpressions = append(m.MatchExpressions, NodeSelectorRequirementApplyConfiguration{})
			if err := m.MatchExpressions[len(m.MatchExpressions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchFields = append(m.MatchFields, NodeSelectorRequirementApplyConfiguration{})
			if err := m.MatchFields[len(m.MatchFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PodCIDR = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodCIDRs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodCIDRs = append(m.PodCIDRs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProviderID = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unschedulable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Unschedulable = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taints = append(m.Taints, TaintApplyConfiguration{})
			if err := m.Taints[len(m.Taints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigSource == nil {
				m.ConfigSource = &NodeConfigSourceApplyConfiguration{}
			}
			if err := m.ConfigSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotUseExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DoNotUseExternalID = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *NodeSystemInfoApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSystemInfoApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSystemInfoApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MachineID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemUUID = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BootID = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KernelVersion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OSImage = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerRuntimeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerRuntimeVersion = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KubeletVersion = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeProxyVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.KubeProxyVersion = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OperatingSystem = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Architecture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Architecture = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectFieldSelectorApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectFieldSelectorApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectFieldSelectorApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.APIVersion = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FieldPath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectReferenceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectReferenceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectReferenceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Kind = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_apimachinery_pkg_types.UID(dAtA[iNdEx:postIndex])
			m.UID = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.APIVersion = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceVersion = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FieldPath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PersistentVolumeSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PersistentVolumeStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PersistentVolumeClaimSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PersistentVolumeClaimStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimConditionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimConditionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimConditionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PersistentVolumeClaimConditionType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProbeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastProbeTime == nil {
				m.LastProbeTime = &v11.Time{}
			}
			if err := m.LastProbeTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v11.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessModes = append(m.AccessModes, k8s_io_api_core_v1.PersistentVolumeAccessMode(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &v1.LabelSelectorApplyConfiguration{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceRequirementsApplyConfiguration{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StorageClassName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PersistentVolumeMode(dAtA[iNdEx:postIndex])
			m.VolumeMode = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSource == nil {
				m.DataSource = &TypedLocalObjectReferenceApplyConfiguration{}
			}
			if err := m.DataSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSourceRef == nil {
				m.DataSourceRef = &TypedObjectReferenceApplyConfiguration{}
			}
			if err := m.DataSourceRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *PersistentVolumeClaimTemplateApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimTemplateApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimTemplateApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PersistentVolumeClaimSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClaimName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCEPersistentDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCEPersistentDisk == nil {
				m.GCEPersistentDisk = &GCEPersistentDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.GCEPersistentDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWSElasticBlockStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AWSElasticBlockStore == nil {
				m.AWSElasticBlockStore = &AWSElasticBlockStoreVolumeSourceApplyConfiguration{}
			}
			if err := m.AWSElasticBlockStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostPath == nil {
				m.HostPath = &HostPathVolumeSourceApplyConfiguration{}
			}
			if err := m.HostPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glusterfs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Glusterfs == nil {
				m.Glusterfs = &GlusterfsPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.Glusterfs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NFS == nil {
				m.NFS = &NFSVolumeSourceApplyConfiguration{}
			}
			if err := m.NFS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RBD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RBD == nil {
				m.RBD = &RBDPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.RBD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISCSI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ISCSI == nil {
				m.ISCSI = &ISCSIPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.ISCSI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cinder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cinder == nil {
				m.Cinder = &CinderPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.Cinder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CephFS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CephFS == nil {
				m.CephFS = &CephFSPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.CephFS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FC == nil {
				m.FC = &FCVolumeSourceApplyConfiguration{}
			}
			if err := m.FC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flocker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flocker == nil {
				m.Flocker = &FlockerVolumeSourceApplyConfiguration{}
			}
			if err := m.Flocker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlexVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlexVolume == nil {
				m.FlexVolume = &FlexPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.FlexVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureFile == nil {
				m.AzureFile = &AzureFilePersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.AzureFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsphereVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VsphereVolume == nil {
				m.VsphereVolume = &VsphereVirtualDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.VsphereVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quobyte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quobyte == nil {
				m.Quobyte = &QuobyteVolumeSourceApplyConfiguration{}
			}
			if err := m.Quobyte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureDisk == nil {
				m.AzureDisk = &AzureDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.AzureDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotonPersistentDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotonPersistentDisk == nil {
				m.PhotonPersistentDisk = &PhotonPersistentDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.PhotonPersistentDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortworxVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortworxVolume == nil {
				m.PortworxVolume = &PortworxVolumeSourceApplyConfiguration{}
			}
			if err := m.PortworxVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleIO", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScaleIO == nil {
				m.ScaleIO = &ScaleIOPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.ScaleIO.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Local == nil {
				m.Local = &LocalVolumeSourceApplyConfiguration{}
			}
			if err := m.Local.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageOS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageOS == nil {
				m.StorageOS = &StorageOSPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.StorageOS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CSI == nil {
				m.CSI = &CSIPersistentVolumeSourceApplyConfiguration{}
			}
			if err := m.CSI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *PersistentVolumeStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PersistentVolumePhase(dAtA[iNdEx:postIndex])
			m.Phase = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPhaseTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPhaseTransitionTime == nil {
				m.LastPhaseTransitionTime = &v11.Time{}
			}
			if err := m.LastPhaseTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotonPersistentDiskVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotonPersistentDiskVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotonPersistentDiskVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PdID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodAffinityApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodAffinityApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodAffinityApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredDuringSchedulingIgnoredDuringExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredDuringSchedulingIgnoredDuringExecution = append(m.RequiredDuringSchedulingIgnoredDuringExecution, PodAffinityTermApplyConfiguration{})
			if err := m.RequiredDuringSchedulingIgnoredDuringExecution[len(m.RequiredDuringSchedulingIgnoredDuringExecution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredDuringSchedulingIgnoredDuringExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredDuringSchedulingIgnoredDuringExecution = append(m.PreferredDuringSchedulingIgnoredDuringExecution, WeightedPodAffinityTermApplyConfiguration{})
			if err := m.PreferredDuringSchedulingIgnoredDuringExecution[len(m.PreferredDuringSchedulingIgnoredDuringExecution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodAffinityTermApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodAffinityTermApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodAffinityTermApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelector == nil {
				m.LabelSelector = &v1.LabelSelectorApplyConfiguration{}
			}
			if err := m.LabelSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopologyKey = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceSelector == nil {
				m.NamespaceSelector = &v1.LabelSelectorApplyConfiguration{}
			}
			if err := m.NamespaceSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodAntiAffinityApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodAntiAffinityApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodAntiAffinityApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredDuringSchedulingIgnoredDuringExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredDuringSchedulingIgnoredDuringExecution = append(m.RequiredDuringSchedulingIgnoredDuringExecution, PodAffinityTermApplyConfiguration{})
			if err := m.RequiredDuringSchedulingIgnoredDuringExecution[len(m.RequiredDuringSchedulingIgnoredDuringExecution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredDuringSchedulingIgnoredDuringExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredDuringSchedulingIgnoredDuringExecution = append(m.PreferredDuringSchedulingIgnoredDuringExecution, WeightedPodAffinityTermApplyConfiguration{})
			if err := m.PreferredDuringSchedulingIgnoredDuringExecution[len(m.PreferredDuringSchedulingIgnoredDuringExecution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PodSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PodStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodConditionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodConditionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodConditionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PodConditionType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProbeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastProbeTime == nil {
				m.LastProbeTime = &v11.Time{}
			}
			if err := m.LastProbeTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v11.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodDNSConfigApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodDNSConfigApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodDNSConfigApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nameservers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nameservers = append(m.Nameservers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Searches", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Searches = append(m.Searches, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, PodDNSConfigOptionApplyConfiguration{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodDNSConfigOptionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodDNSConfigOptionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodDNSConfigOptionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodIPApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodIPApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodIPApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IP = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodOSApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodOSApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodOSApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.OSName(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodReadinessGateApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodReadinessGateApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodReadinessGateApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PodConditionType(dAtA[iNdEx:postIndex])
			m.ConditionType = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodResourceClaimApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodResourceClaimApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodResourceClaimApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &ClaimSourceApplyConfiguration{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodResourceClaimStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodResourceClaimStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodResourceClaimStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceClaimName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceClaimName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodSchedulingGateApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodSchedulingGateApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodSchedulingGateApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodSecurityContextApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodSecurityContextApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodSecurityContextApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SELinuxOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SELinuxOptions == nil {
				m.SELinuxOptions = &SELinuxOptionsApplyConfiguration{}
			}
			if err := m.SELinuxOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowsOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindowsOptions == nil {
				m.WindowsOptions = &WindowsSecurityContextOptionsApplyConfiguration{}
			}
			if err := m.WindowsOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsUser", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunAsUser = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsGroup", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunAsGroup = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsNonRoot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RunAsNonRoot = &b
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupplementalGroups = append(m.SupplementalGroups, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenerated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenerated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SupplementalGroups) == 0 {
					m.SupplementalGroups = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupplementalGroups = append(m.SupplementalGroups, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplementalGroups", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSGroup", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FSGroup = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sysctls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sysctls = append(m.Sysctls, SysctlApplyConfiguration{})
			if err := m.Sysctls[len(m.Sysctls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSGroupChangePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PodFSGroupChangePolicy(dAtA[iNdEx:postIndex])
			m.FSGroupChangePolicy = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeccompProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeccompProfile == nil {
				m.SeccompProfile = &SeccompProfileApplyConfiguration{}
			}
			if err := m.SeccompProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *PodStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PodPhase(dAtA[iNdEx:postIndex])
			m.Phase = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, PodConditionApplyConfiguration{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominatedNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NominatedNodeName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostIP = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIPs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIPs = append(m.HostIPs, HostIPApplyConfiguration{})
			if err := m.HostIPs[len(m.HostIPs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PodIP = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIPs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIPs = append(m.PodIPs, PodIPApplyConfiguration{})
			if err := m.PodIPs[len(m.PodIPs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &v11.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitContainerStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitContainerStatuses = append(m.InitContainerStatuses, ContainerStatusApplyConfiguration{})
			if err := m.InitContainerStatuses[len(m.InitContainerStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerStatuses = append(m.ContainerStatuses, ContainerStatusApplyConfiguration{})
			if err := m.ContainerStatuses[len(m.ContainerStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QOSClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PodQOSClass(dAtA[iNdEx:postIndex])
			m.QOSClass = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralContainerStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EphemeralContainerStatuses = append(m.EphemeralContainerStatuses, ContainerStatusApplyConfiguration{})
			if err := m.EphemeralContainerStatuses[len(m.EphemeralContainerStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.PodResizeStatus(dAtA[iNdEx:postIndex])
			m.Resize = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceClaimStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceClaimStatuses = append(m.ResourceClaimStatuses, PodResourceClaimStatusApplyConfiguration{})
			if err := m.ResourceClaimStatuses[len(m.ResourceClaimStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodTemplateApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodTemplateApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodTemplateApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &PodTemplateSpecApplyConfiguration{}
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodTemplateSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodTemplateSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodTemplateSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PodSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.Protocol(dAtA[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Error = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortworxVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortworxVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortworxVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreferredSchedulingTermApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreferredSchedulingTermApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreferredSchedulingTermApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Preference == nil {
				m.Preference = &NodeSelectorTermApplyConfiguration{}
			}
			if err := m.Preference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProbeApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeHandlerApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProbeHandlerApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDelaySeconds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialDelaySeconds = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeoutSeconds = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodSeconds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PeriodSeconds = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessThreshold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuccessThreshold = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureThreshold", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailureThreshold = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationGracePeriodSeconds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TerminationGracePeriodSeconds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProbeHandlerApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeHandlerApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeHandlerApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exec == nil {
				m.Exec = &ExecActionApplyConfiguration{}
			}
			if err := m.Exec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HTTPGet == nil {
				m.HTTPGet = &HTTPGetActionApplyConfiguration{}
			}
			if err := m.HTTPGet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPSocket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TCPSocket == nil {
				m.TCPSocket = &TCPSocketActionApplyConfiguration{}
			}
			if err := m.TCPSocket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GRPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GRPC == nil {
				m.GRPC = &GRPCActionApplyConfiguration{}
			}
			if err := m.GRPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectedVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectedVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectedVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, VolumeProjectionApplyConfiguration{})
			if err := m.Sources[len(m.Sources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultMode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuobyteVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuobyteVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuobyteVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Registry = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Volume = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Group = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tenant = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBDPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBDPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBDPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CephMonitors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CephMonitors = append(m.CephMonitors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RBDImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RBDImage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RBDPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RBDPool = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadosUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RadosUser = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyring = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBDVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBDVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBDVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CephMonitors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CephMonitors = append(m.CephMonitors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RBDImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RBDImage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RBDPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RBDPool = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadosUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RadosUser = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Keyring = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationControllerApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationControllerApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationControllerApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ReplicationControllerSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ReplicationControllerStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationControllerConditionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationControllerConditionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationControllerConditionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ReplicationControllerConditionType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v11.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationControllerSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationControllerSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationControllerSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replicas = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReadySeconds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinReadySeconds = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Selector[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &PodTemplateSpecApplyConfiguration{}
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationControllerStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationControllerStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationControllerStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replicas = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullyLabeledReplicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullyLabeledReplicas = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyReplicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadyReplicas = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReplicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvailableReplicas = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ObservedGeneration = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ReplicationControllerConditionApplyConfiguration{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceClaimApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceClaimApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceClaimApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceFieldSelectorApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceFieldSelectorApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceFieldSelectorApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Resource = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Divisor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Divisor == nil {
				m.Divisor = &resource.Quantity{}
			}
			if err := m.Divisor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceQuotaApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceQuotaApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceQuotaApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ResourceQuotaSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ResourceQuotaStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceQuotaSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *ResourceQuotaStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *ResourceRequirementsApplyConfiguration) Unmarshal(dAtA []byte) error {
	return errors.New("bar")
}
func (m *SELinuxOptionsApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SELinuxOptionsApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SELinuxOptionsApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Role = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Level = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScaleIOPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScaleIOPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScaleIOPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Gateway = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.System = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &SecretReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSLEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SSLEnabled = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectionDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProtectionDomain = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoragePool = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StorageMode = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScaleIOVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScaleIOVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScaleIOVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Gateway = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.System = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSLEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SSLEnabled = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectionDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProtectionDomain = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoragePool = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StorageMode = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSelectorApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSelectorApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSelectorApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchExpressions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchExpressions = append(m.MatchExpressions, ScopedResourceSelectorRequirementApplyConfiguration{})
			if err := m.MatchExpressions[len(m.MatchExpressions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopedResourceSelectorRequirementApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopedResourceSelectorRequirementApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopedResourceSelectorRequirementApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ResourceQuotaScope(dAtA[iNdEx:postIndex])
			m.ScopeName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ScopeSelectorOperator(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeccompProfileApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeccompProfileApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeccompProfileApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.SeccompProfileType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalhostProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocalhostProfile = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Immutable = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenerated
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringData == nil {
				m.StringData = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StringData[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.SecretType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretEnvSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretEnvSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretEnvSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretKeySelectorApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretKeySelectorApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretKeySelectorApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretProjectionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretProjectionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretProjectionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalObjectReferenceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalObjectReferenceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KeyToPathApplyConfiguration{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretReferenceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretReferenceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretReferenceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecretName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KeyToPathApplyConfiguration{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultMode = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Optional = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityContextApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityContextApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityContextApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &CapabilitiesApplyConfiguration{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Privileged = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SELinuxOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SELinuxOptions == nil {
				m.SELinuxOptions = &SELinuxOptionsApplyConfiguration{}
			}
			if err := m.SELinuxOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowsOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindowsOptions == nil {
				m.WindowsOptions = &WindowsSecurityContextOptionsApplyConfiguration{}
			}
			if err := m.WindowsOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsUser", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunAsUser = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsGroup", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunAsGroup = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsNonRoot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RunAsNonRoot = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnlyRootFilesystem", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnlyRootFilesystem = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPrivilegeEscalation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AllowPrivilegeEscalation = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcMount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ProcMountType(dAtA[iNdEx:postIndex])
			m.ProcMount = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeccompProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeccompProfile == nil {
				m.SeccompProfile = &SeccompProfileApplyConfiguration{}
			}
			if err := m.SeccompProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secrets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secrets = append(m.Secrets, ObjectReferenceApplyConfiguration{})
			if err := m.Secrets[len(m.Secrets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePullSecrets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePullSecrets = append(m.ImagePullSecrets, LocalObjectReferenceApplyConfiguration{})
			if err := m.ImagePullSecrets[len(m.ImagePullSecrets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomountServiceAccountToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AutomountServiceAccountToken = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountTokenProjectionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountTokenProjectionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountTokenProjectionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audience", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Audience = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationSeconds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpirationSeconds = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMetaApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectMetaApplyConfiguration == nil {
				m.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
			}
			if err := m.ObjectMetaApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ServiceSpecApplyConfiguration{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ServiceStatusApplyConfiguration{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePortApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePortApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePortApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.Protocol(dAtA[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppProtocol = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetPort == nil {
				m.TargetPort = &intstr.IntOrString{}
			}
			if err := m.TargetPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodePort = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSpecApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSpecApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSpecApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, ServicePortApplyConfiguration{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Selector[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClusterIP = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterIPs = append(m.ClusterIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ServiceType(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIPs = append(m.ExternalIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAffinity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ServiceAffinity(dAtA[iNdEx:postIndex])
			m.SessionAffinity = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LoadBalancerIP = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerSourceRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerSourceRanges = append(m.LoadBalancerSourceRanges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExternalName = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalTrafficPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ServiceExternalTrafficPolicy(dAtA[iNdEx:postIndex])
			m.ExternalTrafficPolicy = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckNodePort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HealthCheckNodePort = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishNotReadyAddresses", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PublishNotReadyAddresses = &b
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAffinityConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionAffinityConfig == nil {
				m.SessionAffinityConfig = &SessionAffinityConfigApplyConfiguration{}
			}
			if err := m.SessionAffinityConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPFamilies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPFamilies = append(m.IPFamilies, k8s_io_api_core_v1.IPFamily(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPFamilyPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.IPFamilyPolicy(dAtA[iNdEx:postIndex])
			m.IPFamilyPolicy = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateLoadBalancerNodePorts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AllocateLoadBalancerNodePorts = &b
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LoadBalancerClass = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalTrafficPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.ServiceInternalTrafficPolicy(dAtA[iNdEx:postIndex])
			m.InternalTrafficPolicy = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadBalancer == nil {
				m.LoadBalancer = &LoadBalancerStatusApplyConfiguration{}
			}
			if err := m.LoadBalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v1.ConditionApplyConfiguration{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionAffinityConfigApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionAffinityConfigApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionAffinityConfigApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientIP == nil {
				m.ClientIP = &ClientIPConfigApplyConfiguration{}
			}
			if err := m.ClientIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageOSPersistentVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageOSPersistentVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageOSPersistentVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeNamespace = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &ObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageOSVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageOSVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageOSVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumeNamespace = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &LocalObjectReferenceApplyConfiguration{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysctlApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysctlApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysctlApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPSocketActionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPSocketActionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPSocketActionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Port == nil {
				m.Port = &intstr.IntOrString{}
			}
			if err := m.Port.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Host = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaintApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaintApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaintApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.TaintEffect(dAtA[iNdEx:postIndex])
			m.Effect = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeAdded == nil {
				m.TimeAdded = &v11.Time{}
			}
			if err := m.TimeAdded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TolerationApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TolerationApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TolerationApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.TolerationOperator(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.TaintEffect(dAtA[iNdEx:postIndex])
			m.Effect = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TolerationSeconds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TolerationSeconds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopologySelectorLabelRequirementApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopologySelectorLabelRequirementApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopologySelectorLabelRequirementApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopologySelectorTermApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopologySelectorTermApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopologySelectorTermApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchLabelExpressions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchLabelExpressions = append(m.MatchLabelExpressions, TopologySelectorLabelRequirementApplyConfiguration{})
			if err := m.MatchLabelExpressions[len(m.MatchLabelExpressions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopologySpreadConstraintApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopologySpreadConstraintApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopologySpreadConstraintApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSkew", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxSkew = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TopologyKey = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhenUnsatisfiable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.UnsatisfiableConstraintAction(dAtA[iNdEx:postIndex])
			m.WhenUnsatisfiable = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelector == nil {
				m.LabelSelector = &v1.LabelSelectorApplyConfiguration{}
			}
			if err := m.LabelSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDomains", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinDomains = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAffinityPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NodeInclusionPolicy(dAtA[iNdEx:postIndex])
			m.NodeAffinityPolicy = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTaintsPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.NodeInclusionPolicy(dAtA[iNdEx:postIndex])
			m.NodeTaintsPolicy = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchLabelKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchLabelKeys = append(m.MatchLabelKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypedLocalObjectReferenceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypedLocalObjectReferenceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypedLocalObjectReferenceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.APIGroup = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Kind = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypedObjectReferenceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypedObjectReferenceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypedObjectReferenceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.APIGroup = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Kind = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeSourceApplyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeSourceApplyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeDeviceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeDeviceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeDeviceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DevicePath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeMountApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeMountApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeMountApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReadOnly = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MountPath = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubPath = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPropagation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := k8s_io_api_core_v1.MountPropagationMode(dAtA[iNdEx:postIndex])
			m.MountPropagation = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPathExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SubPathExpr = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeNodeAffinityApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeNodeAffinityApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeNodeAffinityApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Required == nil {
				m.Required = &NodeSelectorApplyConfiguration{}
			}
			if err := m.Required.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeProjectionApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeProjectionApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeProjectionApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secret == nil {
				m.Secret = &SecretProjectionApplyConfiguration{}
			}
			if err := m.Secret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownwardAPI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownwardAPI == nil {
				m.DownwardAPI = &DownwardAPIProjectionApplyConfiguration{}
			}
			if err := m.DownwardAPI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMap == nil {
				m.ConfigMap = &ConfigMapProjectionApplyConfiguration{}
			}
			if err := m.ConfigMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceAccountToken == nil {
				m.ServiceAccountToken = &ServiceAccountTokenProjectionApplyConfiguration{}
			}
			if err := m.ServiceAccountToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostPath == nil {
				m.HostPath = &HostPathVolumeSourceApplyConfiguration{}
			}
			if err := m.HostPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyDir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmptyDir == nil {
				m.EmptyDir = &EmptyDirVolumeSourceApplyConfiguration{}
			}
			if err := m.EmptyDir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCEPersistentDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCEPersistentDisk == nil {
				m.GCEPersistentDisk = &GCEPersistentDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.GCEPersistentDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWSElasticBlockStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AWSElasticBlockStore == nil {
				m.AWSElasticBlockStore = &AWSElasticBlockStoreVolumeSourceApplyConfiguration{}
			}
			if err := m.AWSElasticBlockStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitRepo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GitRepo == nil {
				m.GitRepo = &GitRepoVolumeSourceApplyConfiguration{}
			}
			if err := m.GitRepo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secret == nil {
				m.Secret = &SecretVolumeSourceApplyConfiguration{}
			}
			if err := m.Secret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NFS == nil {
				m.NFS = &NFSVolumeSourceApplyConfiguration{}
			}
			if err := m.NFS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISCSI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ISCSI == nil {
				m.ISCSI = &ISCSIVolumeSourceApplyConfiguration{}
			}
			if err := m.ISCSI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glusterfs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Glusterfs == nil {
				m.Glusterfs = &GlusterfsVolumeSourceApplyConfiguration{}
			}
			if err := m.Glusterfs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersistentVolumeClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersistentVolumeClaim == nil {
				m.PersistentVolumeClaim = &PersistentVolumeClaimVolumeSourceApplyConfiguration{}
			}
			if err := m.PersistentVolumeClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RBD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RBD == nil {
				m.RBD = &RBDVolumeSourceApplyConfiguration{}
			}
			if err := m.RBD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlexVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlexVolume == nil {
				m.FlexVolume = &FlexVolumeSourceApplyConfiguration{}
			}
			if err := m.FlexVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cinder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cinder == nil {
				m.Cinder = &CinderVolumeSourceApplyConfiguration{}
			}
			if err := m.Cinder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CephFS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CephFS == nil {
				m.CephFS = &CephFSVolumeSourceApplyConfiguration{}
			}
			if err := m.CephFS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flocker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flocker == nil {
				m.Flocker = &FlockerVolumeSourceApplyConfiguration{}
			}
			if err := m.Flocker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownwardAPI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownwardAPI == nil {
				m.DownwardAPI = &DownwardAPIVolumeSourceApplyConfiguration{}
			}
			if err := m.DownwardAPI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FC == nil {
				m.FC = &FCVolumeSourceApplyConfiguration{}
			}
			if err := m.FC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureFile == nil {
				m.AzureFile = &AzureFileVolumeSourceApplyConfiguration{}
			}
			if err := m.AzureFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMap == nil {
				m.ConfigMap = &ConfigMapVolumeSourceApplyConfiguration{}
			}
			if err := m.ConfigMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsphereVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VsphereVolume == nil {
				m.VsphereVolume = &VsphereVirtualDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.VsphereVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quobyte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quobyte == nil {
				m.Quobyte = &QuobyteVolumeSourceApplyConfiguration{}
			}
			if err := m.Quobyte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureDisk == nil {
				m.AzureDisk = &AzureDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.AzureDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotonPersistentDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotonPersistentDisk == nil {
				m.PhotonPersistentDisk = &PhotonPersistentDiskVolumeSourceApplyConfiguration{}
			}
			if err := m.PhotonPersistentDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Projected == nil {
				m.Projected = &ProjectedVolumeSourceApplyConfiguration{}
			}
			if err := m.Projected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortworxVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortworxVolume == nil {
				m.PortworxVolume = &PortworxVolumeSourceApplyConfiguration{}
			}
			if err := m.PortworxVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleIO", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScaleIO == nil {
				m.ScaleIO = &ScaleIOVolumeSourceApplyConfiguration{}
			}
			if err := m.ScaleIO.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageOS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageOS == nil {
				m.StorageOS = &StorageOSVolumeSourceApplyConfiguration{}
			}
			if err := m.StorageOS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CSI == nil {
				m.CSI = &CSIVolumeSourceApplyConfiguration{}
			}
			if err := m.CSI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ephemeral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ephemeral == nil {
				m.Ephemeral = &EphemeralVolumeSourceApplyConfiguration{}
			}
			if err := m.Ephemeral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VsphereVirtualDiskVolumeSourceApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VsphereVirtualDiskVolumeSourceApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VsphereVirtualDiskVolumeSourceApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VolumePath = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FSType = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoragePolicyName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoragePolicyID = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedPodAffinityTermApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedPodAffinityTermApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedPodAffinityTermApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAffinityTerm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAffinityTerm == nil {
				m.PodAffinityTerm = &PodAffinityTermApplyConfiguration{}
			}
			if err := m.PodAffinityTerm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowsSecurityContextOptionsApplyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowsSecurityContextOptionsApplyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowsSecurityContextOptionsApplyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GMSACredentialSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GMSACredentialSpecName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GMSACredentialSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GMSACredentialSpec = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RunAsUserName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostProcess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HostProcess = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
