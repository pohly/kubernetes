/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.client_go.applyconfigurations.meta.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/client-go/applyconfigurations/meta/v1";

// ConditionApplyConfiguration represents an declarative configuration of the Condition type for use
// with apply.
message ConditionApplyConfiguration {
  optional string type = 1;

  optional string status = 2;

  optional int64 observedGeneration = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  optional string reason = 5;

  optional string message = 6;
}

// DeleteOptionsApplyConfiguration represents an declarative configuration of the DeleteOptions type for use
// with apply.
message DeleteOptionsApplyConfiguration {
  optional TypeMetaApplyConfiguration typeMetaApplyConfiguration = 1;

  optional int64 gracePeriodSeconds = 2;

  optional PreconditionsApplyConfiguration preconditions = 3;

  optional bool orphanDependents = 4;

  optional string propagationPolicy = 5;

  repeated string dryRun = 6;
}

// LabelSelectorApplyConfiguration represents an declarative configuration of the LabelSelector type for use
// with apply.
message LabelSelectorApplyConfiguration {
  map<string, string> matchLabels = 1;

  repeated LabelSelectorRequirementApplyConfiguration matchExpressions = 2;
}

// LabelSelectorRequirementApplyConfiguration represents an declarative configuration of the LabelSelectorRequirement type for use
// with apply.
message LabelSelectorRequirementApplyConfiguration {
  optional string key = 1;

  optional string operator = 2;

  repeated string values = 3;
}

// ManagedFieldsEntryApplyConfiguration represents an declarative configuration of the ManagedFieldsEntry type for use
// with apply.
message ManagedFieldsEntryApplyConfiguration {
  optional string manager = 1;

  optional string operation = 2;

  optional string apiVersion = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 4;

  optional string fieldsType = 5;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1 fieldsV1 = 6;

  optional string subresource = 7;
}

// ObjectMetaApplyConfiguration represents an declarative configuration of the ObjectMeta type for use
// with apply.
message ObjectMetaApplyConfiguration {
  optional string name = 1;

  optional string generateName = 2;

  optional string namespace = 3;

  optional string uid = 4;

  optional string resourceVersion = 5;

  optional int64 generation = 6;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time creationTimestamp = 7;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time deletionTimestamp = 8;

  optional int64 deletionGracePeriodSeconds = 9;

  map<string, string> labels = 10;

  map<string, string> annotations = 11;

  repeated OwnerReferenceApplyConfiguration ownerReferences = 12;

  repeated string finalizers = 13;
}

// OwnerReferenceApplyConfiguration represents an declarative configuration of the OwnerReference type for use
// with apply.
message OwnerReferenceApplyConfiguration {
  optional string apiVersion = 1;

  optional string kind = 2;

  optional string name = 3;

  optional string uid = 4;

  optional bool controller = 5;

  optional bool blockOwnerDeletion = 6;
}

// PreconditionsApplyConfiguration represents an declarative configuration of the Preconditions type for use
// with apply.
message PreconditionsApplyConfiguration {
  optional string uid = 1;

  optional string resourceVersion = 2;
}

// TypeMetaApplyConfiguration represents an declarative configuration of the TypeMeta type for use
// with apply.
message TypeMetaApplyConfiguration {
  optional string kind = 1;

  optional string apiVersion = 2;
}

