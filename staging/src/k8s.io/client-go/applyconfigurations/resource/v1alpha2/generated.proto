/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.client_go.applyconfigurations.resource.v1alpha2;

import "k8s.io/api/resource/v1alpha2/generated.proto";
import "k8s.io/client-go/applyconfigurations/core/v1/generated.proto";
import "k8s.io/client-go/applyconfigurations/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/client-go/applyconfigurations/resource/v1alpha2";

// AllocationResultApplyConfiguration represents an declarative configuration of the AllocationResult type for use
// with apply.
message AllocationResultApplyConfiguration {
  repeated ResourceHandleApplyConfiguration resourceHandles = 1;

  optional k8s.io.client_go.applyconfigurations.core.v1.NodeSelectorApplyConfiguration availableOnNodes = 2;

  optional bool shareable = 3;
}

// PodSchedulingContextApplyConfiguration represents an declarative configuration of the PodSchedulingContext type for use
// with apply.
message PodSchedulingContextApplyConfiguration {
  optional k8s.io.client_go.applyconfigurations.meta.v1.TypeMetaApplyConfiguration typeMetaApplyConfiguration = 1;

  optional k8s.io.client_go.applyconfigurations.meta.v1.ObjectMetaApplyConfiguration metadata = 2;

  optional PodSchedulingContextSpecApplyConfiguration spec = 3;

  optional PodSchedulingContextStatusApplyConfiguration status = 4;
}

// PodSchedulingContextSpecApplyConfiguration represents an declarative configuration of the PodSchedulingContextSpec type for use
// with apply.
message PodSchedulingContextSpecApplyConfiguration {
  optional string selectedNode = 1;

  repeated string potentialNodes = 2;
}

// PodSchedulingContextStatusApplyConfiguration represents an declarative configuration of the PodSchedulingContextStatus type for use
// with apply.
message PodSchedulingContextStatusApplyConfiguration {
  repeated ResourceClaimSchedulingStatusApplyConfiguration resourceClaims = 1;
}

// ResourceClaimApplyConfiguration represents an declarative configuration of the ResourceClaim type for use
// with apply.
message ResourceClaimApplyConfiguration {
  optional k8s.io.client_go.applyconfigurations.meta.v1.TypeMetaApplyConfiguration typeMetaApplyConfiguration = 1;

  optional k8s.io.client_go.applyconfigurations.meta.v1.ObjectMetaApplyConfiguration metadata = 2;

  optional ResourceClaimSpecApplyConfiguration spec = 3;

  optional ResourceClaimStatusApplyConfiguration status = 4;
}

// ResourceClaimConsumerReferenceApplyConfiguration represents an declarative configuration of the ResourceClaimConsumerReference type for use
// with apply.
message ResourceClaimConsumerReferenceApplyConfiguration {
  optional string apiGroup = 1;

  optional string resource = 2;

  optional string name = 3;

  optional string uid = 4;
}

// ResourceClaimParametersReferenceApplyConfiguration represents an declarative configuration of the ResourceClaimParametersReference type for use
// with apply.
message ResourceClaimParametersReferenceApplyConfiguration {
  optional string apiGroup = 1;

  optional string kind = 2;

  optional string name = 3;
}

// ResourceClaimSchedulingStatusApplyConfiguration represents an declarative configuration of the ResourceClaimSchedulingStatus type for use
// with apply.
message ResourceClaimSchedulingStatusApplyConfiguration {
  optional string name = 1;

  repeated string unsuitableNodes = 2;
}

// ResourceClaimSpecApplyConfiguration represents an declarative configuration of the ResourceClaimSpec type for use
// with apply.
message ResourceClaimSpecApplyConfiguration {
  optional string resourceClassName = 1;

  optional ResourceClaimParametersReferenceApplyConfiguration parametersRef = 2;

  optional string allocationMode = 3;
}

// ResourceClaimStatusApplyConfiguration represents an declarative configuration of the ResourceClaimStatus type for use
// with apply.
message ResourceClaimStatusApplyConfiguration {
  optional string driverName = 1;

  optional AllocationResultApplyConfiguration allocation = 2;

  repeated ResourceClaimConsumerReferenceApplyConfiguration reservedFor = 3;

  optional bool deallocationRequested = 4;
}

// ResourceClaimTemplateApplyConfiguration represents an declarative configuration of the ResourceClaimTemplate type for use
// with apply.
message ResourceClaimTemplateApplyConfiguration {
  optional k8s.io.client_go.applyconfigurations.meta.v1.TypeMetaApplyConfiguration typeMetaApplyConfiguration = 1;

  optional k8s.io.client_go.applyconfigurations.meta.v1.ObjectMetaApplyConfiguration metadata = 2;

  optional ResourceClaimTemplateSpecApplyConfiguration spec = 3;
}

// ResourceClaimTemplateSpecApplyConfiguration represents an declarative configuration of the ResourceClaimTemplateSpec type for use
// with apply.
message ResourceClaimTemplateSpecApplyConfiguration {
  optional k8s.io.client_go.applyconfigurations.meta.v1.ObjectMetaApplyConfiguration metadata = 1;

  optional ResourceClaimSpecApplyConfiguration spec = 2;
}

// ResourceClassApplyConfiguration represents an declarative configuration of the ResourceClass type for use
// with apply.
message ResourceClassApplyConfiguration {
  optional k8s.io.client_go.applyconfigurations.meta.v1.TypeMetaApplyConfiguration typeMetaApplyConfiguration = 1;

  optional k8s.io.client_go.applyconfigurations.meta.v1.ObjectMetaApplyConfiguration metadata = 2;

  optional string driverName = 3;

  optional ResourceClassParametersReferenceApplyConfiguration parametersRef = 4;

  optional k8s.io.client_go.applyconfigurations.core.v1.NodeSelectorApplyConfiguration suitableNodes = 5;
}

// ResourceClassParametersReferenceApplyConfiguration represents an declarative configuration of the ResourceClassParametersReference type for use
// with apply.
message ResourceClassParametersReferenceApplyConfiguration {
  optional string apiGroup = 1;

  optional string kind = 2;

  optional string name = 3;

  optional string namespace = 4;
}

// ResourceHandleApplyConfiguration represents an declarative configuration of the ResourceHandle type for use
// with apply.
message ResourceHandleApplyConfiguration {
  optional string driverName = 1;

  optional string data = 2;
}

