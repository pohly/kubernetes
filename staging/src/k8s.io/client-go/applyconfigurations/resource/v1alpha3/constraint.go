/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

// ConstraintApplyConfiguration represents a declarative configuration of the Constraint type for use
// with apply.
type ConstraintApplyConfiguration struct {
	RequestNames   []string `json:"requestNames,omitempty"`
	MatchAttribute *string  `json:"matchAttribute,omitempty"`
}

// ConstraintApplyConfiguration constructs a declarative configuration of the Constraint type for use with
// apply.
func Constraint() *ConstraintApplyConfiguration {
	return &ConstraintApplyConfiguration{}
}

// WithRequestNames adds the given value to the RequestNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RequestNames field.
func (b *ConstraintApplyConfiguration) WithRequestNames(values ...string) *ConstraintApplyConfiguration {
	for i := range values {
		b.RequestNames = append(b.RequestNames, values[i])
	}
	return b
}

// WithMatchAttribute sets the MatchAttribute field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MatchAttribute field is set to the value of the last call.
func (b *ConstraintApplyConfiguration) WithMatchAttribute(value string) *ConstraintApplyConfiguration {
	b.MatchAttribute = &value
	return b
}
