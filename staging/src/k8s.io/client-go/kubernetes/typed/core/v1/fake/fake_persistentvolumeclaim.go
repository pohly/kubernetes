/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	"encoding/json"
	"fmt"

	apicorev1 "k8s.io/api/core/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apimachinerypkglabels "k8s.io/apimachinery/pkg/labels"
	pkgruntimeschema "k8s.io/apimachinery/pkg/runtime/schema"
	apimachinerypkgtypes "k8s.io/apimachinery/pkg/types"
	apimachinerypkgwatch "k8s.io/apimachinery/pkg/watch"
	applyconfigurationscorev1 "k8s.io/client-go/applyconfigurations/core/v1"
	clientgotesting "k8s.io/client-go/testing"
)

// FakePersistentVolumeClaims implements PersistentVolumeClaimInterface
type FakePersistentVolumeClaims struct {
	Fake *FakeCoreV1
	ns   string
}

var persistentvolumeclaimsResource = pkgruntimeschema.GroupVersionResource{Group: "", Version: "v1", Resource: "persistentvolumeclaims"}

var persistentvolumeclaimsKind = pkgruntimeschema.GroupVersionKind{Group: "", Version: "v1", Kind: "PersistentVolumeClaim"}

// Get takes name of the persistentVolumeClaim, and returns the corresponding persistentVolumeClaim object, and an error if there is any.
func (c *FakePersistentVolumeClaims) Get(ctx context.Context, name string, options apismetav1.GetOptions) (result *apicorev1.PersistentVolumeClaim, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewGetAction(persistentvolumeclaimsResource, c.ns, name), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}

// List takes label and field selectors, and returns the list of PersistentVolumeClaims that match those selectors.
func (c *FakePersistentVolumeClaims) List(ctx context.Context, opts apismetav1.ListOptions) (result *apicorev1.PersistentVolumeClaimList, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewListAction(persistentvolumeclaimsResource, persistentvolumeclaimsKind, c.ns, opts), &apicorev1.PersistentVolumeClaimList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := clientgotesting.ExtractFromListOptions(opts)
	if label == nil {
		label = apimachinerypkglabels.Everything()
	}
	list := &apicorev1.PersistentVolumeClaimList{ListMeta: obj.(*apicorev1.PersistentVolumeClaimList).ListMeta}
	for _, item := range obj.(*apicorev1.PersistentVolumeClaimList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a apimachinerypkgwatch.Interface that watches the requested persistentVolumeClaims.
func (c *FakePersistentVolumeClaims) Watch(ctx context.Context, opts apismetav1.ListOptions) (apimachinerypkgwatch.Interface, error) {
	return c.Fake.
		InvokesWatch(clientgotesting.NewWatchAction(persistentvolumeclaimsResource, c.ns, opts))

}

// Create takes the representation of a persistentVolumeClaim and creates it.  Returns the server's representation of the persistentVolumeClaim, and an error, if there is any.
func (c *FakePersistentVolumeClaims) Create(ctx context.Context, persistentVolumeClaim *apicorev1.PersistentVolumeClaim, opts apismetav1.CreateOptions) (result *apicorev1.PersistentVolumeClaim, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewCreateAction(persistentvolumeclaimsResource, c.ns, persistentVolumeClaim), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}

// Update takes the representation of a persistentVolumeClaim and updates it. Returns the server's representation of the persistentVolumeClaim, and an error, if there is any.
func (c *FakePersistentVolumeClaims) Update(ctx context.Context, persistentVolumeClaim *apicorev1.PersistentVolumeClaim, opts apismetav1.UpdateOptions) (result *apicorev1.PersistentVolumeClaim, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewUpdateAction(persistentvolumeclaimsResource, c.ns, persistentVolumeClaim), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePersistentVolumeClaims) UpdateStatus(ctx context.Context, persistentVolumeClaim *apicorev1.PersistentVolumeClaim, opts apismetav1.UpdateOptions) (*apicorev1.PersistentVolumeClaim, error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewUpdateSubresourceAction(persistentvolumeclaimsResource, "status", c.ns, persistentVolumeClaim), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}

// Delete takes name of the persistentVolumeClaim and deletes it. Returns an error if one occurs.
func (c *FakePersistentVolumeClaims) Delete(ctx context.Context, name string, opts apismetav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(clientgotesting.NewDeleteActionWithOptions(persistentvolumeclaimsResource, c.ns, name, opts), &apicorev1.PersistentVolumeClaim{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePersistentVolumeClaims) DeleteCollection(ctx context.Context, opts apismetav1.DeleteOptions, listOpts apismetav1.ListOptions) error {
	action := clientgotesting.NewDeleteCollectionAction(persistentvolumeclaimsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &apicorev1.PersistentVolumeClaimList{})
	return err
}

// Patch applies the patch and returns the patched persistentVolumeClaim.
func (c *FakePersistentVolumeClaims) Patch(ctx context.Context, name string, pt apimachinerypkgtypes.PatchType, data []byte, opts apismetav1.PatchOptions, subresources ...string) (result *apicorev1.PersistentVolumeClaim, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewPatchSubresourceAction(persistentvolumeclaimsResource, c.ns, name, pt, data, subresources...), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied persistentVolumeClaim.
func (c *FakePersistentVolumeClaims) Apply(ctx context.Context, persistentVolumeClaim *applyconfigurationscorev1.PersistentVolumeClaimApplyConfiguration, opts apismetav1.ApplyOptions) (result *apicorev1.PersistentVolumeClaim, err error) {
	if persistentVolumeClaim == nil {
		return nil, fmt.Errorf("persistentVolumeClaim provided to Apply must not be nil")
	}
	data, err := json.Marshal(persistentVolumeClaim)
	if err != nil {
		return nil, err
	}
	name := persistentVolumeClaim.Name
	if name == nil {
		return nil, fmt.Errorf("persistentVolumeClaim.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(clientgotesting.NewPatchSubresourceAction(persistentvolumeclaimsResource, c.ns, *name, apimachinerypkgtypes.ApplyPatchType, data), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakePersistentVolumeClaims) ApplyStatus(ctx context.Context, persistentVolumeClaim *applyconfigurationscorev1.PersistentVolumeClaimApplyConfiguration, opts apismetav1.ApplyOptions) (result *apicorev1.PersistentVolumeClaim, err error) {
	if persistentVolumeClaim == nil {
		return nil, fmt.Errorf("persistentVolumeClaim provided to Apply must not be nil")
	}
	data, err := json.Marshal(persistentVolumeClaim)
	if err != nil {
		return nil, err
	}
	name := persistentVolumeClaim.Name
	if name == nil {
		return nil, fmt.Errorf("persistentVolumeClaim.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(clientgotesting.NewPatchSubresourceAction(persistentvolumeclaimsResource, c.ns, *name, apimachinerypkgtypes.ApplyPatchType, data, "status"), &apicorev1.PersistentVolumeClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.PersistentVolumeClaim), err
}
