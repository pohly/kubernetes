/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	"encoding/json"
	"fmt"

	apicorev1 "k8s.io/api/core/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apimachinerypkglabels "k8s.io/apimachinery/pkg/labels"
	pkgruntimeschema "k8s.io/apimachinery/pkg/runtime/schema"
	apimachinerypkgtypes "k8s.io/apimachinery/pkg/types"
	apimachinerypkgwatch "k8s.io/apimachinery/pkg/watch"
	applyconfigurationscorev1 "k8s.io/client-go/applyconfigurations/core/v1"
	clientgotesting "k8s.io/client-go/testing"
)

// FakeNamespaces implements NamespaceInterface
type FakeNamespaces struct {
	Fake *FakeCoreV1
}

var namespacesResource = pkgruntimeschema.GroupVersionResource{Group: "", Version: "v1", Resource: "namespaces"}

var namespacesKind = pkgruntimeschema.GroupVersionKind{Group: "", Version: "v1", Kind: "Namespace"}

// Get takes name of the namespace, and returns the corresponding namespace object, and an error if there is any.
func (c *FakeNamespaces) Get(ctx context.Context, name string, options apismetav1.GetOptions) (result *apicorev1.Namespace, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootGetAction(namespacesResource, name), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}

// List takes label and field selectors, and returns the list of Namespaces that match those selectors.
func (c *FakeNamespaces) List(ctx context.Context, opts apismetav1.ListOptions) (result *apicorev1.NamespaceList, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootListAction(namespacesResource, namespacesKind, opts), &apicorev1.NamespaceList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := clientgotesting.ExtractFromListOptions(opts)
	if label == nil {
		label = apimachinerypkglabels.Everything()
	}
	list := &apicorev1.NamespaceList{ListMeta: obj.(*apicorev1.NamespaceList).ListMeta}
	for _, item := range obj.(*apicorev1.NamespaceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a apimachinerypkgwatch.Interface that watches the requested namespaces.
func (c *FakeNamespaces) Watch(ctx context.Context, opts apismetav1.ListOptions) (apimachinerypkgwatch.Interface, error) {
	return c.Fake.
		InvokesWatch(clientgotesting.NewRootWatchAction(namespacesResource, opts))
}

// Create takes the representation of a namespace and creates it.  Returns the server's representation of the namespace, and an error, if there is any.
func (c *FakeNamespaces) Create(ctx context.Context, namespace *apicorev1.Namespace, opts apismetav1.CreateOptions) (result *apicorev1.Namespace, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootCreateAction(namespacesResource, namespace), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}

// Update takes the representation of a namespace and updates it. Returns the server's representation of the namespace, and an error, if there is any.
func (c *FakeNamespaces) Update(ctx context.Context, namespace *apicorev1.Namespace, opts apismetav1.UpdateOptions) (result *apicorev1.Namespace, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootUpdateAction(namespacesResource, namespace), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNamespaces) UpdateStatus(ctx context.Context, namespace *apicorev1.Namespace, opts apismetav1.UpdateOptions) (*apicorev1.Namespace, error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootUpdateSubresourceAction(namespacesResource, "status", namespace), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}

// Delete takes name of the namespace and deletes it. Returns an error if one occurs.
func (c *FakeNamespaces) Delete(ctx context.Context, name string, opts apismetav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(clientgotesting.NewRootDeleteActionWithOptions(namespacesResource, name, opts), &apicorev1.Namespace{})
	return err
}

// Patch applies the patch and returns the patched namespace.
func (c *FakeNamespaces) Patch(ctx context.Context, name string, pt apimachinerypkgtypes.PatchType, data []byte, opts apismetav1.PatchOptions, subresources ...string) (result *apicorev1.Namespace, err error) {
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootPatchSubresourceAction(namespacesResource, name, pt, data, subresources...), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied namespace.
func (c *FakeNamespaces) Apply(ctx context.Context, namespace *applyconfigurationscorev1.NamespaceApplyConfiguration, opts apismetav1.ApplyOptions) (result *apicorev1.Namespace, err error) {
	if namespace == nil {
		return nil, fmt.Errorf("namespace provided to Apply must not be nil")
	}
	data, err := json.Marshal(namespace)
	if err != nil {
		return nil, err
	}
	name := namespace.Name
	if name == nil {
		return nil, fmt.Errorf("namespace.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootPatchSubresourceAction(namespacesResource, *name, apimachinerypkgtypes.ApplyPatchType, data), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeNamespaces) ApplyStatus(ctx context.Context, namespace *applyconfigurationscorev1.NamespaceApplyConfiguration, opts apismetav1.ApplyOptions) (result *apicorev1.Namespace, err error) {
	if namespace == nil {
		return nil, fmt.Errorf("namespace provided to Apply must not be nil")
	}
	data, err := json.Marshal(namespace)
	if err != nil {
		return nil, err
	}
	name := namespace.Name
	if name == nil {
		return nil, fmt.Errorf("namespace.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(clientgotesting.NewRootPatchSubresourceAction(namespacesResource, *name, apimachinerypkgtypes.ApplyPatchType, data, "status"), &apicorev1.Namespace{})
	if obj == nil {
		return nil, err
	}
	return obj.(*apicorev1.Namespace), err
}
