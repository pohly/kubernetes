/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/storage/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CSIStorageLister helps list CSIStorages.
type CSIStorageLister interface {
	// List lists all CSIStorages in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CSIStorage, err error)
	// Get retrieves the CSIStorage from the index for a given name.
	Get(name string) (*v1alpha1.CSIStorage, error)
	CSIStorageListerExpansion
}

// cSIStorageLister implements the CSIStorageLister interface.
type cSIStorageLister struct {
	indexer cache.Indexer
}

// NewCSIStorageLister returns a new CSIStorageLister.
func NewCSIStorageLister(indexer cache.Indexer) CSIStorageLister {
	return &cSIStorageLister{indexer: indexer}
}

// List lists all CSIStorages in the indexer.
func (s *cSIStorageLister) List(selector labels.Selector) (ret []*v1alpha1.CSIStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CSIStorage))
	})
	return ret, err
}

// Get retrieves the CSIStorage from the index for a given name.
func (s *cSIStorageLister) Get(name string) (*v1alpha1.CSIStorage, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("csistorage"), name)
	}
	return obj.(*v1alpha1.CSIStorage), nil
}
